{"ast":null,"code":"// mock.js\n// 引入mockjs\nconst Mock = require('mockjs'); // 获取 mock.Random 对象\n\n\nconst Random = Mock.Random; // mock新闻数据，包括新闻标题title、内容content、创建时间createdTime\n// const produceNewsData = function () {\n//     let newsList = []\n//     for (let i = 0; i < 20; i++) {\n//     let newNewsObject = {\n//     title: Random.ctitle(), // Random.ctitle( min, max ) 随机产生一个中文标题，长度默认在3-7之间\n//     content: Random.cparagraph(), // Random.cparagraph(min, max) 随机生成一个中文段落，段落里的句子个数默认3-7个\n//     createdTime: Random.date() // Random.date()指示生成的日期字符串的格式,默认为yyyy-MM-dd；\n//     }\n//     newsList.push(newNewsObject)\n//     }\n//     return newList\n// }\n\nconst dataOne = function () {\n  let label_list = [];\n\n  for (let i = 0; i < 100; i++) {\n    label_list.push({\n      'x': Random.word(1, 20),\n      'value': Random.integer(1, 5000)\n    });\n  }\n\n  const data = {\n    'label_list': label_list,\n    'net_list': [\"ALL\", \"ETH\", \"BTC\"],\n    'category_list': [\"all\", \"transaction\", \"account\", \"token\"]\n  };\n  return data;\n};\n\nfunction dataTwo(res) {\n  let total = Random.integer(1, 5000);\n  let result_list = [];\n\n  for (let i = 0; i < total; i++) {\n    result_list.push({\n      'id': Random.integer(20),\n      'label': res.label,\n      'net': res.net,\n      'category': res.category,\n      'address': Random.word(30),\n      'info': {\n        'url': Random.url('https'),\n        'nametag': Random.word(5, 10),\n        'balance': Random.integer(4) + ' Ether',\n        'TxnCount': Random.integer(3)\n      }\n    });\n  }\n\n  const data = {\n    'total': total,\n    'result_list': result_list\n  };\n  return data;\n} // 请求该url，就可以返回newsList\n\n\nMock.mock(/\\/mock\\/one/, 'get', dataOne);\nMock.mock(/\\/mock\\/two/, 'post', function (options) {\n  return dataTwo(options.body);\n});","map":{"version":3,"names":["Mock","require","Random","dataOne","label_list","i","push","word","integer","data","dataTwo","res","total","result_list","label","net","category","url","mock","options","body"],"sources":["D:/研究生学习/xblock词云构建工作/wordcloud_new/src/mock.js"],"sourcesContent":["// mock.js\r\n// 引入mockjs\r\nconst Mock = require('mockjs');\r\n// 获取 mock.Random 对象\r\nconst Random = Mock.Random;\r\n// mock新闻数据，包括新闻标题title、内容content、创建时间createdTime\r\n// const produceNewsData = function () {\r\n//     let newsList = []\r\n//     for (let i = 0; i < 20; i++) {\r\n//     let newNewsObject = {\r\n//     title: Random.ctitle(), // Random.ctitle( min, max ) 随机产生一个中文标题，长度默认在3-7之间\r\n//     content: Random.cparagraph(), // Random.cparagraph(min, max) 随机生成一个中文段落，段落里的句子个数默认3-7个\r\n//     createdTime: Random.date() // Random.date()指示生成的日期字符串的格式,默认为yyyy-MM-dd；\r\n//     }\r\n//     newsList.push(newNewsObject)\r\n//     }\r\n//     return newList\r\n// }\r\nconst dataOne = function(){\r\n    let label_list = [];\r\n    for(let i=0; i<100; i++){\r\n        label_list.push({\r\n            'x': Random.word(1,20),\r\n            'value': Random.integer(1,5000)\r\n        })\r\n    }\r\n    const data = {\r\n        'label_list':label_list,\r\n        'net_list':[\r\n            \"ALL\",\r\n            \"ETH\",\r\n            \"BTC\",\r\n        ],\r\n        'category_list':[\r\n            \"all\",\r\n            \"transaction\",\r\n            \"account\",\r\n            \"token\"\r\n        ]\r\n    };\r\n    return data\r\n};\r\n\r\nfunction dataTwo(res){\r\n    let total = Random.integer(1,5000);\r\n    let result_list = [];\r\n    for(let i=0; i<total; i++){\r\n        result_list.push({\r\n            'id': Random.integer(20),\r\n            'label': res.label,\r\n            'net': res.net,\r\n            'category': res.category,\r\n            'address': Random.word(30),\r\n            'info':{\r\n                'url': Random.url('https'),\r\n                'nametag':Random.word(5,10),\r\n                'balance':Random.integer(4)+' Ether',\r\n                'TxnCount':Random.integer(3)\r\n            }\r\n        })\r\n    }\r\n    const data = {\r\n        'total':total,\r\n        'result_list':result_list\r\n    }\r\n    return data\r\n}\r\n\r\n// 请求该url，就可以返回newsList\r\nMock.mock(/\\/mock\\/one/, 'get', dataOne)\r\nMock.mock(/\\/mock\\/two/, 'post', function(options){\r\n    return dataTwo(options.body)\r\n})\r\n"],"mappings":"AAAA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CACA;;;AACA,MAAMC,MAAM,GAAGF,IAAI,CAACE,MAApB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,YAAU;EACtB,IAAIC,UAAU,GAAG,EAAjB;;EACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,GAAf,EAAoBA,CAAC,EAArB,EAAwB;IACpBD,UAAU,CAACE,IAAX,CAAgB;MACZ,KAAKJ,MAAM,CAACK,IAAP,CAAY,CAAZ,EAAc,EAAd,CADO;MAEZ,SAASL,MAAM,CAACM,OAAP,CAAe,CAAf,EAAiB,IAAjB;IAFG,CAAhB;EAIH;;EACD,MAAMC,IAAI,GAAG;IACT,cAAaL,UADJ;IAET,YAAW,CACP,KADO,EAEP,KAFO,EAGP,KAHO,CAFF;IAOT,iBAAgB,CACZ,KADY,EAEZ,aAFY,EAGZ,SAHY,EAIZ,OAJY;EAPP,CAAb;EAcA,OAAOK,IAAP;AACH,CAvBD;;AAyBA,SAASC,OAAT,CAAiBC,GAAjB,EAAqB;EACjB,IAAIC,KAAK,GAAGV,MAAM,CAACM,OAAP,CAAe,CAAf,EAAiB,IAAjB,CAAZ;EACA,IAAIK,WAAW,GAAG,EAAlB;;EACA,KAAI,IAAIR,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACO,KAAf,EAAsBP,CAAC,EAAvB,EAA0B;IACtBQ,WAAW,CAACP,IAAZ,CAAiB;MACb,MAAMJ,MAAM,CAACM,OAAP,CAAe,EAAf,CADO;MAEb,SAASG,GAAG,CAACG,KAFA;MAGb,OAAOH,GAAG,CAACI,GAHE;MAIb,YAAYJ,GAAG,CAACK,QAJH;MAKb,WAAWd,MAAM,CAACK,IAAP,CAAY,EAAZ,CALE;MAMb,QAAO;QACH,OAAOL,MAAM,CAACe,GAAP,CAAW,OAAX,CADJ;QAEH,WAAUf,MAAM,CAACK,IAAP,CAAY,CAAZ,EAAc,EAAd,CAFP;QAGH,WAAUL,MAAM,CAACM,OAAP,CAAe,CAAf,IAAkB,QAHzB;QAIH,YAAWN,MAAM,CAACM,OAAP,CAAe,CAAf;MAJR;IANM,CAAjB;EAaH;;EACD,MAAMC,IAAI,GAAG;IACT,SAAQG,KADC;IAET,eAAcC;EAFL,CAAb;EAIA,OAAOJ,IAAP;AACH,C,CAED;;;AACAT,IAAI,CAACkB,IAAL,CAAU,aAAV,EAAyB,KAAzB,EAAgCf,OAAhC;AACAH,IAAI,CAACkB,IAAL,CAAU,aAAV,EAAyB,MAAzB,EAAiC,UAASC,OAAT,EAAiB;EAC9C,OAAOT,OAAO,CAACS,OAAO,CAACC,IAAT,CAAd;AACH,CAFD"},"metadata":{},"sourceType":"script"}