{"ast":null,"code":"import { __assign } from \"tslib\";\nexport function getScaleMax(maxAngle, yField, data) {\n  var yData = data.map(function (item) {\n    return item[yField];\n  }).filter(function (v) {\n    return v !== undefined;\n  });\n  var maxValue = yData.length > 0 ? Math.max.apply(Math, yData) : 0;\n  var formatRadian = Math.abs(maxAngle) % 360;\n\n  if (!formatRadian) {\n    return maxValue;\n  }\n\n  return maxValue * 360 / formatRadian;\n}\n/**\n * 获取堆叠之后的数据\n */\n\nexport function getStackedData(data, xField, yField) {\n  var stackedData = [];\n  data.forEach(function (item) {\n    var valueItem = stackedData.find(function (v) {\n      return v[xField] === item[xField];\n    });\n\n    if (valueItem) {\n      valueItem[yField] += item[yField] || null;\n    } else {\n      stackedData.push(__assign({}, item));\n    }\n  });\n  return stackedData;\n}","map":{"version":3,"mappings":";AAEA,OAAM,SAAUA,WAAV,CAAsBC,QAAtB,EAAwCC,MAAxC,EAAwDC,IAAxD,EAAkE;EACtE,IAAMC,KAAK,GAAGD,IAAI,CAACE,GAAL,CAAS,UAACC,IAAD,EAAK;IAAK,WAAI,CAACJ,MAAD,CAAJ;EAAY,CAA/B,EAAiCK,MAAjC,CAAwC,UAACC,CAAD,EAAE;IAAK,QAAC,KAAKC,SAAN;EAAe,CAA9D,CAAd;EACA,IAAMC,QAAQ,GAAGN,KAAK,CAACO,MAAN,GAAe,CAAf,GAAmBC,IAAI,CAACC,GAAL,CAAQC,KAAR,OAAYV,KAAZ,CAAnB,GAAwC,CAAzD;EACA,IAAMW,YAAY,GAAGH,IAAI,CAACI,GAAL,CAASf,QAAT,IAAqB,GAA1C;;EACA,IAAI,CAACc,YAAL,EAAmB;IACjB,OAAOL,QAAP;EACD;;EACD,OAAQA,QAAQ,GAAG,GAAZ,GAAmBK,YAA1B;AACD;AAED;;;;AAGA,OAAM,SAAUE,cAAV,CAAyBd,IAAzB,EAAqCe,MAArC,EAAqDhB,MAArD,EAAmE;EACvE,IAAMiB,WAAW,GAAS,EAA1B;EACAhB,IAAI,CAACiB,OAAL,CAAa,UAACd,IAAD,EAAK;IAChB,IAAMe,SAAS,GAAGF,WAAW,CAACG,IAAZ,CAAiB,UAACd,CAAD,EAAE;MAAK,QAAC,CAACU,MAAD,CAAD,KAAcZ,IAAI,CAACY,MAAD,CAAlB;IAA0B,CAAlD,CAAlB;;IACA,IAAIG,SAAJ,EAAe;MACbA,SAAS,CAACnB,MAAD,CAAT,IAAqBI,IAAI,CAACJ,MAAD,CAAJ,IAAgB,IAArC;IACD,CAFD,MAEO;MACLiB,WAAW,CAACI,IAAZ,CAAgBC,aAAMlB,IAAN,CAAhB;IACD;EACF,CAPD;EAQA,OAAOa,WAAP;AACD","names":["getScaleMax","maxAngle","yField","data","yData","map","item","filter","v","undefined","maxValue","length","Math","max","apply","formatRadian","abs","getStackedData","xField","stackedData","forEach","valueItem","find","push","__assign"],"sourceRoot":"","sources":["../../../src/plots/radial-bar/utils.ts"],"sourcesContent":["import { Data } from '../../types';\n\nexport function getScaleMax(maxAngle: number, yField: string, data: Data): number {\n  const yData = data.map((item) => item[yField]).filter((v) => v !== undefined);\n  const maxValue = yData.length > 0 ? Math.max(...yData) : 0;\n  const formatRadian = Math.abs(maxAngle) % 360;\n  if (!formatRadian) {\n    return maxValue;\n  }\n  return (maxValue * 360) / formatRadian;\n}\n\n/**\n * 获取堆叠之后的数据\n */\nexport function getStackedData(data: Data, xField: string, yField: string) {\n  const stackedData: Data = [];\n  data.forEach((item) => {\n    const valueItem = stackedData.find((v) => v[xField] === item[xField]);\n    if (valueItem) {\n      valueItem[yField] += item[yField] || null;\n    } else {\n      stackedData.push({ ...item });\n    }\n  });\n  return stackedData;\n}\n"]},"metadata":{},"sourceType":"module"}