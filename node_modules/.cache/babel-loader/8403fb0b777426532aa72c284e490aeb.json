{"ast":null,"code":"import { getMedian, getMean } from './stat';\n/**\n * parse the value position\n * @param val\n * @param scale\n */\n\nexport function getNormalizedValue(val, scale) {\n  if (!scale) {\n    return null;\n  }\n\n  var scaled;\n\n  switch (val) {\n    case 'start':\n      return 0;\n\n    case 'center':\n      return 0.5;\n\n    case 'end':\n      return 1;\n\n    case 'median':\n      {\n        scaled = scale.isCategory ? getMedian(scale.values.map(function (_, idx) {\n          return idx;\n        })) : getMedian(scale.values);\n        break;\n      }\n\n    case 'mean':\n      {\n        scaled = scale.isCategory ? (scale.values.length - 1) / 2 : getMean(scale.values);\n        break;\n      }\n\n    case 'min':\n      scaled = scale.isCategory ? 0 : scale[val];\n      break;\n\n    case 'max':\n      scaled = scale.isCategory ? scale.values.length - 1 : scale[val];\n      break;\n\n    default:\n      scaled = val;\n      break;\n  }\n\n  return scale.scale(scaled);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,QAAnC;AAGA;;;;;;AAKA,OAAM,SAAUC,kBAAV,CAA6BC,GAA7B,EAAmDC,KAAnD,EAA+D;EACnE,IAAI,CAACA,KAAL,EAAY;IACV,OAAO,IAAP;EACD;;EACD,IAAIC,MAAJ;;EAEA,QAAQF,GAAR;IACE,KAAK,OAAL;MACE,OAAO,CAAP;;IACF,KAAK,QAAL;MACE,OAAO,GAAP;;IACF,KAAK,KAAL;MACE,OAAO,CAAP;;IACF,KAAK,QAAL;MAAe;QACbE,MAAM,GAAGD,KAAK,CAACE,UAAN,GAAmBN,SAAS,CAACI,KAAK,CAACG,MAAN,CAAaC,GAAb,CAAiB,UAACC,CAAD,EAAIC,GAAJ,EAAe;UAAK;QAAG,CAAxC,CAAD,CAA5B,GAA0EV,SAAS,CAACI,KAAK,CAACG,MAAP,CAA5F;QACA;MACD;;IACD,KAAK,MAAL;MAAa;QACXF,MAAM,GAAGD,KAAK,CAACE,UAAN,GAAmB,CAACF,KAAK,CAACG,MAAN,CAAaI,MAAb,GAAsB,CAAvB,IAA4B,CAA/C,GAAmDV,OAAO,CAACG,KAAK,CAACG,MAAP,CAAnE;QACA;MACD;;IACD,KAAK,KAAL;MACEF,MAAM,GAAGD,KAAK,CAACE,UAAN,GAAmB,CAAnB,GAAuBF,KAAK,CAACD,GAAD,CAArC;MACA;;IACF,KAAK,KAAL;MACEE,MAAM,GAAGD,KAAK,CAACE,UAAN,GAAmBF,KAAK,CAACG,MAAN,CAAaI,MAAb,GAAsB,CAAzC,GAA6CP,KAAK,CAACD,GAAD,CAA3D;MACA;;IACF;MACEE,MAAM,GAAGF,GAAT;MACA;EAvBJ;;EA0BA,OAAOC,KAAK,CAACA,KAAN,CAAYC,MAAZ,CAAP;AACD","names":["getMedian","getMean","getNormalizedValue","val","scale","scaled","isCategory","values","map","_","idx","length"],"sourceRoot":"","sources":["../../src/util/annotation.ts"],"sourcesContent":["import { getMedian, getMean } from './stat';\nimport { Scale } from '../dependents';\n\n/**\n * parse the value position\n * @param val\n * @param scale\n */\nexport function getNormalizedValue(val: number | string, scale: Scale) {\n  if (!scale) {\n    return null;\n  }\n  let scaled: number;\n\n  switch (val) {\n    case 'start':\n      return 0;\n    case 'center':\n      return 0.5;\n    case 'end':\n      return 1;\n    case 'median': {\n      scaled = scale.isCategory ? getMedian(scale.values.map((_, idx: number) => idx)) : getMedian(scale.values);\n      break;\n    }\n    case 'mean': {\n      scaled = scale.isCategory ? (scale.values.length - 1) / 2 : getMean(scale.values);\n      break;\n    }\n    case 'min':\n      scaled = scale.isCategory ? 0 : scale[val];\n      break;\n    case 'max':\n      scaled = scale.isCategory ? scale.values.length - 1 : scale[val];\n      break;\n    default:\n      scaled = val as number;\n      break;\n  }\n\n  return scale.scale(scaled);\n}\n"]},"metadata":{},"sourceType":"module"}