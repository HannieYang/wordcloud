{"ast":null,"code":"import { each, get } from '@antv/util';\nimport { getComponents, isInBox } from './action/util';\n/**\n * 交互的上下文\n */\n\nvar Context =\n/** @class */\nfunction () {\n  function Context(view) {\n    /** 当前所有的 Action */\n    this.actions = [];\n    /** 当前事件对象 */\n\n    this.event = null;\n    this.cacheMap = {};\n    this.view = view;\n  }\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n\n\n  Context.prototype.cache = function () {\n    var params = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  };\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n\n\n  Context.prototype.getAction = function (name) {\n    return this.actions.find(function (action) {\n      return action.name === name;\n    });\n  };\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n\n\n  Context.prototype.addAction = function (action) {\n    this.actions.push(action);\n  };\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n\n\n  Context.prototype.removeAction = function (action) {\n    var actions = this.actions;\n    var index = this.actions.indexOf(action);\n\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  };\n  /**\n   * 获取当前的点\n   */\n\n\n  Context.prototype.getCurrentPoint = function () {\n    var event = this.event;\n\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        var canvas = this.view.getCanvas();\n        var point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y\n        };\n      }\n    }\n\n    return null;\n  };\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n\n\n  Context.prototype.getCurrentShape = function () {\n    return get(this.event, ['gEvent', 'shape']);\n  };\n  /**\n   * 当前的触发是否在 View 内\n   */\n\n\n  Context.prototype.isInPlot = function () {\n    var point = this.getCurrentPoint();\n\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n\n    return false;\n  };\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n\n\n  Context.prototype.isInShape = function (name) {\n    var shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n\n    if (shape) {\n      return shape.get('name') === name;\n    }\n\n    return false;\n  };\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n\n\n  Context.prototype.isInComponent = function (name) {\n    var components = getComponents(this.view);\n    var point = this.getCurrentPoint();\n\n    if (point) {\n      return !!components.find(function (component) {\n        var bbox = component.getBBox();\n\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n\n    return false;\n  };\n  /**\n   * 销毁\n   */\n\n\n  Context.prototype.destroy = function () {\n    // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n    each(this.actions.slice(), function (action) {\n      action.destroy();\n    });\n    this.view = null;\n    this.event = null;\n    this.actions = null;\n    this.cacheMap = null;\n  };\n\n  return Context;\n}();\n\nexport default Context;","map":{"version":3,"mappings":"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","names":["each","get","getComponents","isInBox","view","Context","params","length","cacheMap","name","actions","find","action","push","index","indexOf","splice","event","target","HTMLElement","canvas","getCanvas","point","getPointByClient","clientX","clientY","x","y","getCurrentPoint","isPointInPlot","shape","getCurrentShape","components","component","bbox","getBBox","slice","destroy"],"sourceRoot":"","sources":["../../src/interaction/context.ts"],"sourcesContent":["import { each, get } from '@antv/util';\nimport { View } from '../chart';\nimport { BBox, IShape, Point } from '../dependents';\nimport { IAction, IInteractionContext, LooseObject } from '../interface';\nimport { getComponents, isInBox } from './action/util';\n\n/**\n * 交互的上下文\n */\nexport default class Context implements IInteractionContext {\n  /** 当前所有的 Action */\n  public actions: IAction[] = [];\n  /** 当前 View 实例 */\n  public view: View;\n  /** 当前事件对象 */\n  public event: LooseObject = null;\n\n  private cacheMap: LooseObject = {};\n\n  constructor(view: View) {\n    this.view = view;\n  }\n\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n  public cache(...params) {\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  }\n\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n  public getAction(name: string): IAction {\n    return this.actions.find((action) => action.name === name);\n  }\n\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n  public addAction(action: IAction) {\n    this.actions.push(action);\n  }\n\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n  public removeAction(action: IAction) {\n    const actions = this.actions;\n    const index = this.actions.indexOf(action);\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  }\n\n  /**\n   * 获取当前的点\n   */\n  public getCurrentPoint(): Point {\n    const event = this.event;\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        const canvas = this.view.getCanvas();\n        const point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y,\n        };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n  public getCurrentShape(): IShape {\n    return get(this.event, ['gEvent', 'shape']);\n  }\n\n  /**\n   * 当前的触发是否在 View 内\n   */\n  public isInPlot() {\n    const point = this.getCurrentPoint();\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n    return false;\n  }\n\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n  public isInShape(name) {\n    const shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n    if (shape) {\n      return shape.get('name') === name;\n    }\n    return false;\n  }\n\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n  public isInComponent(name?: string) {\n    const components = getComponents(this.view);\n    const point = this.getCurrentPoint();\n    if (point) {\n      return !!components.find((component) => {\n        const bbox = component.getBBox() as BBox;\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n    return false;\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n    each(this.actions.slice(), (action) => {\n      action.destroy();\n    });\n    this.view = null;\n    this.event = null;\n    this.actions = null;\n    this.cacheMap = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}