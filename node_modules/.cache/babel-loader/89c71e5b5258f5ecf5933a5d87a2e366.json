{"ast":null,"code":"import { flatten, isString, valuesOfKey, isNil } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate'; // 已经排序后的数据查找距离最小的\n\nfunction findMinDistance(arr, scale) {\n  var count = arr.length;\n  var sourceArr = arr;\n\n  if (isString(sourceArr[0])) {\n    // 日期类型的 values 经常上文本类型，所以需要转换一下\n    sourceArr = arr.map(function (v) {\n      return scale.translate(v);\n    });\n  }\n\n  var distance = sourceArr[1] - sourceArr[0];\n\n  for (var i = 2; i < count; i++) {\n    var tmp = sourceArr[i] - sourceArr[i - 1];\n\n    if (distance > tmp) {\n      distance = tmp;\n    }\n  }\n\n  return distance;\n}\n\nfunction getDodgeCount(dataArray, dodgeBy) {\n  if (dodgeBy) {\n    var mergeData = flatten(dataArray);\n    var values = valuesOfKey(mergeData, dodgeBy);\n    return values.length;\n  }\n\n  return dataArray.length;\n}\n/** @ignore */\n\n\nexport function getDefaultSize(geometry) {\n  var theme = geometry.theme;\n  var coordinate = geometry.coordinate;\n  var xScale = geometry.getXScale();\n  var xValues = xScale.values;\n  var dataArray = geometry.beforeMappingData;\n  var count = xValues.length;\n  var xDimensionLength = getXDimensionLength(geometry.coordinate); // 获取柱宽相关配置项\n\n  var intervalPadding = geometry.intervalPadding,\n      dodgePadding = geometry.dodgePadding; // 兼容theme配置\n\n  var maxColumnWidth = geometry.maxColumnWidth || theme.maxColumnWidth;\n  var minColumnWidth = geometry.minColumnWidth || theme.minColumnWidth;\n  var columnWidthRatio = geometry.columnWidthRatio || theme.columnWidthRatio;\n  var multiplePieWidthRatio = geometry.multiplePieWidthRatio || theme.multiplePieWidthRatio;\n  var roseWidthRatio = geometry.roseWidthRatio || theme.roseWidthRatio; // 线性情况下count值\n\n  if (xScale.isLinear && xValues.length > 1) {\n    // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n    xValues.sort();\n    var interval = findMinDistance(xValues, xScale);\n    count = (xScale.max - xScale.min) / interval;\n\n    if (xValues.length > count) {\n      count = xValues.length;\n    }\n  }\n\n  var range = xScale.range;\n  var normalizedSize = 1 / count;\n  var wr = 1;\n\n  if (coordinate.isPolar) {\n    // 极坐标场景\n    if (coordinate.isTransposed && count > 1) {\n      // 极坐标下多层环图\n      wr = multiplePieWidthRatio;\n    } else {\n      wr = roseWidthRatio;\n    }\n  } else {\n    // 非极坐标场景\n    if (xScale.isLinear) {\n      normalizedSize *= range[1] - range[0];\n    }\n\n    wr = columnWidthRatio;\n  } // 基础柱状图\n\n\n  if (!isNil(intervalPadding) && intervalPadding >= 0) {\n    // 配置组间距情况\n    var normalizedIntervalPadding = intervalPadding / xDimensionLength;\n    normalizedSize = (1 - (count - 1) * normalizedIntervalPadding) / count;\n  } else {\n    // 默认情况\n    normalizedSize *= wr;\n  } // 分组柱状图\n\n\n  if (geometry.getAdjust('dodge')) {\n    var dodgeAdjust = geometry.getAdjust('dodge');\n    var dodgeBy = dodgeAdjust.dodgeBy;\n    var dodgeCount = getDodgeCount(dataArray, dodgeBy);\n\n    if (!isNil(dodgePadding) && dodgePadding >= 0) {\n      // 仅配置组内间距情况\n      var normalizedDodgePadding = dodgePadding / xDimensionLength;\n      normalizedSize = (normalizedSize - normalizedDodgePadding * (dodgeCount - 1)) / dodgeCount;\n    } else if (!isNil(intervalPadding) && intervalPadding >= 0) {\n      // 设置组间距但未设置组内间距情况，避免组间距过小导致图形重叠，需乘以wr\n      normalizedSize *= wr;\n      normalizedSize = normalizedSize / dodgeCount;\n    } else {\n      // 组间距和组内间距均未配置\n      normalizedSize = normalizedSize / dodgeCount;\n    }\n\n    normalizedSize = normalizedSize >= 0 ? normalizedSize : 0;\n  } // 最大和最小限制\n\n\n  if (!isNil(maxColumnWidth) && maxColumnWidth >= 0) {\n    var normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n\n    if (normalizedSize > normalizedMaxColumnWidth) {\n      normalizedSize = normalizedMaxColumnWidth;\n    }\n  } // \bminColumnWidth可能设置为0\n\n\n  if (!isNil(minColumnWidth) && minColumnWidth >= 0) {\n    var normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n\n    if (normalizedSize < normalizedMinColumnWidth) {\n      normalizedSize = normalizedMinColumnWidth;\n    }\n  }\n\n  return normalizedSize;\n}","map":{"version":3,"mappings":"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","names":["flatten","isString","valuesOfKey","isNil","getXDimensionLength","findMinDistance","arr","scale","count","length","sourceArr","map","v","translate","distance","i","tmp","getDodgeCount","dataArray","dodgeBy","mergeData","values","getDefaultSize","geometry","theme","coordinate","xScale","getXScale","xValues","beforeMappingData","xDimensionLength","dodgePadding","maxColumnWidth","minColumnWidth","columnWidthRatio","multiplePieWidthRatio","roseWidthRatio","isLinear","sort","interval","max","min","range","normalizedSize","wr","isPolar","isTransposed","intervalPadding","normalizedIntervalPadding","getAdjust","dodgeAdjust","dodgeCount","normalizedDodgePadding","normalizedMaxColumnWidth","normalizedMinColumnWidth"],"sourceRoot":"","sources":["../../../src/geometry/util/shape-size.ts"],"sourcesContent":["import { flatten, isString, valuesOfKey, isNil } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate';\n\n// 已经排序后的数据查找距离最小的\nfunction findMinDistance(arr, scale) {\n  const count = arr.length;\n  let sourceArr = arr;\n  if (isString(sourceArr[0])) {\n    // 日期类型的 values 经常上文本类型，所以需要转换一下\n    sourceArr = arr.map((v: string) => {\n      return scale.translate(v);\n    });\n  }\n  let distance = sourceArr[1] - sourceArr[0];\n  for (let i = 2; i < count; i++) {\n    const tmp = sourceArr[i] - sourceArr[i - 1];\n    if (distance > tmp) {\n      distance = tmp;\n    }\n  }\n  return distance;\n}\n\nfunction getDodgeCount(dataArray, dodgeBy) {\n  if (dodgeBy) {\n    const mergeData = flatten(dataArray);\n    const values = valuesOfKey(mergeData, dodgeBy);\n    return values.length;\n  }\n\n  return dataArray.length;\n}\n\n/** @ignore */\nexport function getDefaultSize(geometry): number {\n  const theme = geometry.theme;\n  const coordinate = geometry.coordinate;\n  const xScale = geometry.getXScale();\n  const xValues = xScale.values;\n  const dataArray = geometry.beforeMappingData;\n  let count: number = xValues.length;\n  const xDimensionLength = getXDimensionLength(geometry.coordinate);\n  // 获取柱宽相关配置项\n  const { intervalPadding, dodgePadding } = geometry;\n  // 兼容theme配置\n  const maxColumnWidth = geometry.maxColumnWidth || theme.maxColumnWidth;\n  const minColumnWidth = geometry.minColumnWidth || theme.minColumnWidth;\n  const columnWidthRatio = geometry.columnWidthRatio || theme.columnWidthRatio;\n  const multiplePieWidthRatio = geometry.multiplePieWidthRatio || theme.multiplePieWidthRatio;\n  const roseWidthRatio = geometry.roseWidthRatio || theme.roseWidthRatio;\n\n  // 线性情况下count值\n  if (xScale.isLinear && xValues.length > 1) {\n    // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n    xValues.sort();\n    const interval = findMinDistance(xValues, xScale);\n    count = (xScale.max - xScale.min) / interval;\n    if (xValues.length > count) {\n      count = xValues.length;\n    }\n  }\n\n  const range = xScale.range;\n  let normalizedSize = 1 / count;\n  let wr = 1;\n  if (coordinate.isPolar) {\n    // 极坐标场景\n    if (coordinate.isTransposed && count > 1) {\n      // 极坐标下多层环图\n      wr = multiplePieWidthRatio;\n    } else {\n      wr = roseWidthRatio;\n    }\n  } else {\n    // 非极坐标场景\n    if (xScale.isLinear) {\n      normalizedSize *= range[1] - range[0];\n    }\n    wr = columnWidthRatio;\n  }\n\n  // 基础柱状图\n  if (!isNil(intervalPadding) && intervalPadding >= 0) {\n    // 配置组间距情况\n    const normalizedIntervalPadding = intervalPadding / xDimensionLength;\n    normalizedSize = (1 - (count - 1) * normalizedIntervalPadding) / count;\n  } else {\n    // 默认情况\n    normalizedSize *= wr;\n  }\n  // 分组柱状图\n  if (geometry.getAdjust('dodge')) {\n    const dodgeAdjust = geometry.getAdjust('dodge');\n    const dodgeBy = dodgeAdjust.dodgeBy;\n    const dodgeCount = getDodgeCount(dataArray, dodgeBy);\n    if (!isNil(dodgePadding) && dodgePadding >= 0) {\n      // 仅配置组内间距情况\n      const normalizedDodgePadding = dodgePadding / xDimensionLength;\n      normalizedSize = (normalizedSize - normalizedDodgePadding * (dodgeCount - 1)) / dodgeCount;\n    } else if (!isNil(intervalPadding) && intervalPadding >= 0) {\n      // 设置组间距但未设置组内间距情况，避免组间距过小导致图形重叠，需乘以wr\n      normalizedSize *= wr;\n      normalizedSize = normalizedSize / dodgeCount;\n    } else {\n      // 组间距和组内间距均未配置\n      normalizedSize = normalizedSize / dodgeCount;\n    }\n    normalizedSize = normalizedSize >= 0 ? normalizedSize : 0;\n  }\n\n  // 最大和最小限制\n  if (!isNil(maxColumnWidth) && maxColumnWidth >= 0) {\n    const normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n    if (normalizedSize > normalizedMaxColumnWidth) {\n      normalizedSize = normalizedMaxColumnWidth;\n    }\n  }\n\n  // \bminColumnWidth可能设置为0\n  if (!isNil(minColumnWidth) && minColumnWidth >= 0) {\n    const normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n    if (normalizedSize < normalizedMinColumnWidth) {\n      normalizedSize = normalizedMinColumnWidth;\n    }\n  }\n\n  return normalizedSize;\n}\n"]},"metadata":{},"sourceType":"module"}