{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { isArray, isString, filter } from '@antv/util';\n/** export 一些字段常量 */\n\n/** 在同层级，同一父节点下的节点索引顺序 */\n\nexport var NODE_INDEX_FIELD = 'nodeIndex';\n/** child 节点数量 */\n\nexport var CHILD_NODE_COUNT = 'childNodeCount';\n/** 节点的祖先节点 */\n\nexport var NODE_ANCESTORS_FIELD = 'nodeAncestor';\nvar INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\nexport function getField(options, defaultField) {\n  var field = options.field,\n      fields = options.fields;\n\n  if (isString(field)) {\n    return field;\n  }\n\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n\n  console.warn(INVALID_FIELD_ERR_MSG + \" will try to get fields instead.\");\n\n  if (isString(fields)) {\n    return fields;\n  }\n\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n\n  if (defaultField) {\n    return defaultField;\n  }\n\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\nexport function getAllNodes(root) {\n  var nodes = [];\n\n  if (root && root.each) {\n    var parent_1;\n    var index_1; // d3-hierarchy: Invokes the specified function for node and each descendant in **breadth-first order**\n\n    root.each(function (node) {\n      var _a, _b;\n\n      if (node.parent !== parent_1) {\n        parent_1 = node.parent;\n        index_1 = 0;\n      } else {\n        index_1 += 1;\n      }\n\n      var ancestors = filter((((_a = node.ancestors) === null || _a === void 0 ? void 0 : _a.call(node)) || []).map(function (d) {\n        return nodes.find(function (n) {\n          return n.name === d.name;\n        }) || d;\n      }), function (_a) {\n        var depth = _a.depth;\n        return depth > 0 && depth < node.depth;\n      });\n      node[NODE_ANCESTORS_FIELD] = ancestors;\n      node[CHILD_NODE_COUNT] = ((_b = node.children) === null || _b === void 0 ? void 0 : _b.length) || 0;\n      node[NODE_INDEX_FIELD] = index_1;\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode(function (node) {\n      nodes.push(node);\n    });\n  }\n\n  return nodes;\n}","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,MAA5B,QAA0C,YAA1C;AAEA;;AACA;;AACA,OAAO,IAAMC,gBAAgB,GAAG,WAAzB;AACP;;AACA,OAAO,IAAMC,gBAAgB,GAAG,gBAAzB;AACP;;AACA,OAAO,IAAMC,oBAAoB,GAAG,cAA7B;AAEP,IAAMC,qBAAqB,GAAG,qCAA9B;AAOA,OAAM,SAAUC,QAAV,CAAmBC,OAAnB,EAAqCC,YAArC,EAA0D;EACtD,SAAK,GAAaD,OAAO,MAAzB;EAAA,IAAOE,MAAM,GAAKF,OAAO,OAAzB;;EACR,IAAIP,QAAQ,CAACU,KAAD,CAAZ,EAAqB;IACnB,OAAOA,KAAP;EACD;;EACD,IAAIX,OAAO,CAACW,KAAD,CAAX,EAAoB;IAClBC,OAAO,CAACC,IAAR,CAAaP,qBAAb;IACA,OAAOK,KAAK,CAAC,CAAD,CAAZ;EACD;;EACDC,OAAO,CAACC,IAAR,CAAgBP,qBAAqB,qCAArC;;EACA,IAAIL,QAAQ,CAACS,MAAD,CAAZ,EAAsB;IACpB,OAAOA,MAAP;EACD;;EACD,IAAIV,OAAO,CAACU,MAAD,CAAP,IAAmBA,MAAM,CAACI,MAA9B,EAAsC;IACpC,OAAOJ,MAAM,CAAC,CAAD,CAAb;EACD;;EACD,IAAID,YAAJ,EAAkB;IAChB,OAAOA,YAAP;EACD;;EACD,MAAM,IAAIM,SAAJ,CAAcT,qBAAd,CAAN;AACD;AAED,OAAM,SAAUU,WAAV,CAAsBC,IAAtB,EAA+B;EACnC,IAAMC,KAAK,GAAU,EAArB;;EACA,IAAID,IAAI,IAAIA,IAAI,CAACE,IAAjB,EAAuB;IACrB,IAAIC,QAAJ;IACA,IAAIC,OAAJ,CAFqB,CAGrB;;IACAJ,IAAI,CAACE,IAAL,CAAU,UAACG,IAAD,EAAU;;;MAClB,IAAIA,IAAI,CAACC,MAAL,KAAgBH,QAApB,EAA4B;QAC1BA,QAAM,GAAGE,IAAI,CAACC,MAAd;QACAF,OAAK,GAAG,CAAR;MACD,CAHD,MAGO;QACLA,OAAK,IAAI,CAAT;MACD;;MACD,IAAMG,SAAS,GAAGtB,MAAM,CACtB,CAAC,WAAI,CAACsB,SAAL,MAAc,IAAd,IAAcC,aAAd,GAAc,MAAd,GAAcA,QAAdH,IAAc,CAAd,KAAsB,EAAvB,EAA2BI,GAA3B,CAA+B,UAACC,CAAD,EAAO;QAAK,YAAK,CAACC,IAAN,CAAW,UAACC,CAAD,EAAE;UAAK,QAAC,CAACC,IAAF,KAAWH,CAAC,CAACG,IAAb;QAAiB,CAAnC,KAAwCH,CAAxC;MAAyC,CAApF,CADsB,EAEtB,UAACF,EAAD,EAAU;YAAPM,KAAK;QAAO,YAAK,GAAG,CAAR,IAAaA,KAAK,GAAGT,IAAI,CAACS,KAA1B;MAA+B,CAFxB,CAAxB;MAKAT,IAAI,CAACjB,oBAAD,CAAJ,GAA6BmB,SAA7B;MACAF,IAAI,CAAClB,gBAAD,CAAJ,GAAyB,WAAI,CAAC4B,QAAL,MAAa,IAAb,IAAaC,aAAb,GAAa,MAAb,GAAaA,GAAEnB,MAAf,KAAyB,CAAlD;MACAQ,IAAI,CAACnB,gBAAD,CAAJ,GAAyBkB,OAAzB;MAEAH,KAAK,CAACgB,IAAN,CAAWZ,IAAX;IACD,CAjBD;EAkBD,CAtBD,MAsBO,IAAIL,IAAI,IAAIA,IAAI,CAACkB,QAAjB,EAA2B;IAChC;IACAlB,IAAI,CAACkB,QAAL,CAAc,UAACb,IAAD,EAAU;MACtBJ,KAAK,CAACgB,IAAN,CAAWZ,IAAX;IACD,CAFD;EAGD;;EACD,OAAOJ,KAAP;AACD","names":["isArray","isString","filter","NODE_INDEX_FIELD","CHILD_NODE_COUNT","NODE_ANCESTORS_FIELD","INVALID_FIELD_ERR_MSG","getField","options","defaultField","fields","field","console","warn","length","TypeError","getAllNodes","root","nodes","each","parent_1","index_1","node","parent","ancestors","_a","map","d","find","n","name","depth","children","_b","push","eachNode"],"sourceRoot":"","sources":["../../../src/utils/hierarchy/util.ts"],"sourcesContent":["import { isArray, isString, filter } from '@antv/util';\n\n/** export 一些字段常量 */\n/** 在同层级，同一父节点下的节点索引顺序 */\nexport const NODE_INDEX_FIELD = 'nodeIndex';\n/** child 节点数量 */\nexport const CHILD_NODE_COUNT = 'childNodeCount';\n/** 节点的祖先节点 */\nexport const NODE_ANCESTORS_FIELD = 'nodeAncestor';\n\nconst INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\n\ninterface Options {\n  field?: string | string[];\n  fields?: string | string[];\n}\n\nexport function getField(options: Options, defaultField?: string): string {\n  const { field, fields } = options;\n  if (isString(field)) {\n    return field;\n  }\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n  console.warn(`${INVALID_FIELD_ERR_MSG} will try to get fields instead.`);\n  if (isString(fields)) {\n    return fields;\n  }\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n  if (defaultField) {\n    return defaultField;\n  }\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\n\nexport function getAllNodes(root: any) {\n  const nodes: any[] = [];\n  if (root && root.each) {\n    let parent;\n    let index;\n    // d3-hierarchy: Invokes the specified function for node and each descendant in **breadth-first order**\n    root.each((node: any) => {\n      if (node.parent !== parent) {\n        parent = node.parent;\n        index = 0;\n      } else {\n        index += 1;\n      }\n      const ancestors = filter(\n        (node.ancestors?.() || []).map((d: any) => nodes.find((n) => n.name === d.name) || d),\n        ({ depth }) => depth > 0 && depth < node.depth\n      );\n\n      node[NODE_ANCESTORS_FIELD] = ancestors;\n      node[CHILD_NODE_COUNT] = node.children?.length || 0;\n      node[NODE_INDEX_FIELD] = index;\n\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode((node: any) => {\n      nodes.push(node);\n    });\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}