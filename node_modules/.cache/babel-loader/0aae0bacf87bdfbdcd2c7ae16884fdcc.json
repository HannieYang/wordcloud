{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport Geometry from './base';\n/** 引入 Path 对应的 ShapeFactory */\n\nimport './shape/polygon';\n/**\n * Polygon 几何标记。\n * 常用于绘制色块图、日历图等。\n */\n\nvar Polygon =\n/** @class */\nfunction (_super) {\n  __extends(Polygon, _super);\n\n  function Polygon() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'polygon';\n    _this.shapeType = 'polygon';\n    _this.generatePoints = true;\n    return _this;\n  }\n  /**\n   * 获取 Shape 的关键点数据。\n   * @param obj\n   * @returns\n   */\n\n\n  Polygon.prototype.createShapePointsCfg = function (obj) {\n    var cfg = _super.prototype.createShapePointsCfg.call(this, obj);\n\n    var x = cfg.x;\n    var y = cfg.y;\n    var temp; // x y 都是数组时，不做处理\n\n    if (!(isArray(x) && isArray(y))) {\n      var xScale = this.getXScale();\n      var yScale = this.getYScale();\n      var xCount = xScale.values.length;\n      var yCount = yScale.values.length;\n      var xOffset = 0.5 * 1 / xCount;\n      var yOffset = 0.5 * 1 / yCount;\n\n      if (xScale.isCategory && yScale.isCategory) {\n        // 如果x,y都是分类\n        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n      } else if (isArray(x)) {\n        // x 是数组\n        temp = x;\n        x = [temp[0], temp[0], temp[1], temp[1]];\n        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n      } else if (isArray(y)) {\n        // y 是数组\n        temp = y;\n        y = [temp[0], temp[1], temp[1], temp[0]];\n        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n      }\n\n      cfg.x = x;\n      cfg.y = y;\n    }\n\n    return cfg;\n  };\n\n  return Polygon;\n}(Geometry);\n\nexport default Polygon;","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,OAAOC,QAAP,MAAqB,QAArB;AACA;;AACA,OAAO,iBAAP;AAEA;;;;;AAIA;AAAA;AAAA;EAAqCC;;EAArC;IAAA;;IACkBC,aAAe,SAAf;IACAA,kBAAoB,SAApB;IACNA,uBAA0B,IAA1B;;EAyCX;EAvCC;;;;;;;EAKUC,yCAAV,UAA+BC,GAA/B,EAAyC;IACvC,IAAMC,GAAG,GAAQC,iBAAMC,oBAAN,CAA0BC,IAA1B,CAA0B,IAA1B,EAA2BJ,GAA3B,CAAjB;;IACA,IAAIK,CAAC,GAAGJ,GAAG,CAACI,CAAZ;IACA,IAAIC,CAAC,GAAGL,GAAG,CAACK,CAAZ;IACA,IAAIC,IAAJ,CAJuC,CAKvC;;IACA,IAAI,EAAEZ,OAAO,CAACU,CAAD,CAAP,IAAcV,OAAO,CAACW,CAAD,CAAvB,CAAJ,EAAiC;MAC/B,IAAME,MAAM,GAAG,KAAKC,SAAL,EAAf;MACA,IAAMC,MAAM,GAAG,KAAKC,SAAL,EAAf;MACA,IAAMC,MAAM,GAAGJ,MAAM,CAACK,MAAP,CAAcC,MAA7B;MACA,IAAMC,MAAM,GAAGL,MAAM,CAACG,MAAP,CAAcC,MAA7B;MACA,IAAME,OAAO,GAAI,MAAM,CAAP,GAAYJ,MAA5B;MACA,IAAMK,OAAO,GAAI,MAAM,CAAP,GAAYF,MAA5B;;MAEA,IAAIP,MAAM,CAACU,UAAP,IAAqBR,MAAM,CAACQ,UAAhC,EAA4C;QAC1C;QACAb,CAAC,GAAG,CAACA,CAAC,GAAGW,OAAL,EAAcX,CAAC,GAAGW,OAAlB,EAA2BX,CAAC,GAAGW,OAA/B,EAAwCX,CAAC,GAAGW,OAA5C,CAAJ;QACAV,CAAC,GAAG,CAACA,CAAC,GAAGW,OAAL,EAAcX,CAAC,GAAGW,OAAlB,EAA2BX,CAAC,GAAGW,OAA/B,EAAwCX,CAAC,GAAGW,OAA5C,CAAJ;MACD,CAJD,MAIO,IAAItB,OAAO,CAACU,CAAD,CAAX,EAAgB;QACrB;QACAE,IAAI,GAAGF,CAAP;QACAA,CAAC,GAAG,CAACE,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,EAA4BA,IAAI,CAAC,CAAD,CAAhC,CAAJ;QACAD,CAAC,GAAG,CAACA,CAAC,GAAGW,OAAO,GAAG,CAAf,EAAkBX,CAAC,GAAGW,OAAO,GAAG,CAAhC,EAAmCX,CAAC,GAAGW,OAAO,GAAG,CAAjD,EAAoDX,CAAC,GAAGW,OAAO,GAAG,CAAlE,CAAJ;MACD,CALM,MAKA,IAAItB,OAAO,CAACW,CAAD,CAAX,EAAgB;QACrB;QACAC,IAAI,GAAGD,CAAP;QACAA,CAAC,GAAG,CAACC,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,EAA4BA,IAAI,CAAC,CAAD,CAAhC,CAAJ;QACAF,CAAC,GAAG,CAACA,CAAC,GAAGW,OAAO,GAAG,CAAf,EAAkBX,CAAC,GAAGW,OAAO,GAAG,CAAhC,EAAmCX,CAAC,GAAGW,OAAO,GAAG,CAAjD,EAAoDX,CAAC,GAAGW,OAAO,GAAG,CAAlE,CAAJ;MACD;;MACDf,GAAG,CAACI,CAAJ,GAAQA,CAAR;MACAJ,GAAG,CAACK,CAAJ,GAAQA,CAAR;IACD;;IACD,OAAOL,GAAP;EACD,CAjCS;;EAkCZ;AAAC,CA5CD,CAAqCL,QAArC","names":["isArray","Geometry","__extends","_this","Polygon","obj","cfg","_super","createShapePointsCfg","call","x","y","temp","xScale","getXScale","yScale","getYScale","xCount","values","length","yCount","xOffset","yOffset","isCategory"],"sourceRoot":"","sources":["../../src/geometry/polygon.ts"],"sourcesContent":["import { isArray } from '@antv/util';\nimport { Datum } from '../interface';\nimport Geometry from './base';\n/** 引入 Path 对应的 ShapeFactory */\nimport './shape/polygon';\n\n/**\n * Polygon 几何标记。\n * 常用于绘制色块图、日历图等。\n */\nexport default class Polygon extends Geometry {\n  public readonly type: string = 'polygon';\n  public readonly shapeType: string = 'polygon';\n  protected generatePoints: boolean = true;\n\n  /**\n   * 获取 Shape 的关键点数据。\n   * @param obj\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum) {\n    const cfg: any = super.createShapePointsCfg(obj);\n    let x = cfg.x;\n    let y = cfg.y;\n    let temp;\n    // x y 都是数组时，不做处理\n    if (!(isArray(x) && isArray(y))) {\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const xCount = xScale.values.length;\n      const yCount = yScale.values.length;\n      const xOffset = (0.5 * 1) / xCount;\n      const yOffset = (0.5 * 1) / yCount;\n\n      if (xScale.isCategory && yScale.isCategory) {\n        // 如果x,y都是分类\n        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n      } else if (isArray(x)) {\n        // x 是数组\n        temp = x;\n        x = [temp[0], temp[0], temp[1], temp[1]];\n        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n      } else if (isArray(y)) {\n        // y 是数组\n        temp = y;\n        y = [temp[0], temp[1], temp[1], temp[0]];\n        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n      }\n      cfg.x = x;\n      cfg.y = y;\n    }\n    return cfg;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}