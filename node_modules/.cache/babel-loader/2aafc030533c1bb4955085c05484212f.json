{"ast":null,"code":"import { theme, animation, annotation, tooltip, pattern } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { getTinyData } from '../tiny-line/utils';\nimport { meta } from '../tiny-area/adaptor';\nexport { meta };\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      color = options.color,\n      columnStyle = options.columnStyle,\n      columnWidthRatio = options.columnWidthRatio;\n  var seriesData = getTinyData(data);\n  chart.data(seriesData);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      widthRatio: columnWidthRatio,\n      interval: {\n        style: columnStyle,\n        color: color\n      }\n    }\n  });\n  interval(p);\n  chart.axis(false);\n  chart.legend(false);\n  chart.interaction('element-active');\n  return params;\n}\n/**\n * 迷你柱形图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(theme, pattern('columnStyle'), geometry, meta, tooltip, animation, annotation())(params);\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,OAAvC,EAAgDC,OAAhD,QAA+D,sBAA/D;AAEA,SAASC,IAAT,EAAeC,UAAf,QAAiC,aAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,wBAAjC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,IAAT,QAAqB,sBAArB;AAGA,SAASA,IAAT;AAEA;;;;;AAIA,SAASC,QAAT,CAAkBC,MAAlB,EAAmD;EACzC,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,QAAI,GAA2CC,OAAO,KAAtD;EAAA,IAAMC,KAAK,GAAoCD,OAAO,MAAtD;EAAA,IAAaE,WAAW,GAAuBF,OAAO,YAAtD;EAAA,IAA0BG,gBAAgB,GAAKH,OAAO,iBAAtD;EAER,IAAMI,UAAU,GAAGR,WAAW,CAACS,IAAD,CAA9B;EAEAC,KAAK,CAACD,IAAN,CAAWD,UAAX;EAEA,IAAMG,CAAC,GAAGf,UAAU,CAAC,EAAD,EAAKO,MAAL,EAAa;IAC/BC,OAAO,EAAE;MACPQ,MAAM,EAAEd,OADD;MAEPe,MAAM,EAAEd,OAFD;MAGPe,UAAU,EAAEP,gBAHL;MAIPV,QAAQ,EAAE;QACRkB,KAAK,EAAET,WADC;QAERD,KAAK;MAFG;IAJH;EADsB,CAAb,CAApB;EAWAR,QAAQ,CAACc,CAAD,CAAR;EAEAD,KAAK,CAACM,IAAN,CAAW,KAAX;EACAN,KAAK,CAACO,MAAN,CAAa,KAAb;EACAP,KAAK,CAACQ,WAAN,CAAkB,gBAAlB;EACA,OAAOf,MAAP;AACD;AAED;;;;;;;AAKA,OAAM,SAAUgB,OAAV,CAAkBhB,MAAlB,EAAmD;EACvD,OAAOR,IAAI,CAACL,KAAD,EAAQI,OAAO,CAAC,aAAD,CAAf,EAAgCQ,QAAhC,EAA0CD,IAA1C,EAAgDR,OAAhD,EAAyDF,SAAzD,EAAoEC,UAAU,EAA9E,CAAJ,CAAsFW,MAAtF,CAAP;AACD","names":["theme","animation","annotation","tooltip","pattern","flow","deepAssign","interval","X_FIELD","Y_FIELD","getTinyData","meta","geometry","params","options","color","columnStyle","columnWidthRatio","seriesData","data","chart","p","xField","yField","widthRatio","style","axis","legend","interaction","adaptor"],"sourceRoot":"","sources":["../../../src/plots/tiny-column/adaptor.ts"],"sourcesContent":["import { theme, animation, annotation, tooltip, pattern } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { getTinyData } from '../tiny-line/utils';\nimport { meta } from '../tiny-area/adaptor';\nimport { TinyColumnOptions } from './types';\n\nexport { meta };\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TinyColumnOptions>): Params<TinyColumnOptions> {\n  const { chart, options } = params;\n  const { data, color, columnStyle, columnWidthRatio } = options;\n\n  const seriesData = getTinyData(data);\n\n  chart.data(seriesData);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      widthRatio: columnWidthRatio,\n      interval: {\n        style: columnStyle,\n        color,\n      },\n    },\n  });\n  interval(p);\n\n  chart.axis(false);\n  chart.legend(false);\n  chart.interaction('element-active');\n  return params;\n}\n\n/**\n * 迷你柱形图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TinyColumnOptions>) {\n  return flow(theme, pattern('columnStyle'), geometry, meta, tooltip, animation, annotation())(params);\n}\n"]},"metadata":{},"sourceType":"module"}