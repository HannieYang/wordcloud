{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport TransformAction from './scale-transform';\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\n\nvar ScaleTranslate =\n/** @class */\nfunction (_super) {\n  __extends(ScaleTranslate, _super);\n\n  function ScaleTranslate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.startPoint = null;\n    _this.starting = false;\n    _this.startCache = {};\n    return _this;\n  }\n  /**\n   * 开始\n   */\n\n\n  ScaleTranslate.prototype.start = function () {\n    var _this = this;\n\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      var scale = _this.getScale(dim);\n\n      var min = scale.min,\n          max = scale.max,\n          values = scale.values;\n      _this.startCache[dim] = {\n        min: min,\n        max: max,\n        values: values\n      };\n    });\n  }; // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 结束\n   */\n\n\n  ScaleTranslate.prototype.end = function () {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  };\n  /**\n   * 平移\n   */\n\n\n  ScaleTranslate.prototype.translate = function () {\n    var _this = this;\n\n    if (!this.starting) {\n      return;\n    }\n\n    var startPoint = this.startPoint;\n    var coord = this.context.view.getCoordinate();\n    var currentPoint = this.context.getCurrentPoint();\n    var normalStart = coord.invert(startPoint);\n    var noramlCurrent = coord.invert(currentPoint);\n    var dx = noramlCurrent.x - normalStart.x;\n    var dy = noramlCurrent.y - normalStart.y;\n    var view = this.context.view;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      _this.translateDim(dim, {\n        x: dx * -1,\n        y: dy * -1\n      });\n    });\n    view.render(true);\n  }; // 平移度量\n\n\n  ScaleTranslate.prototype.translateDim = function (dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      var scale = this.getScale(dim);\n\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      } //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n\n    }\n  }; // linear 度量平移\n\n\n  ScaleTranslate.prototype.translateLinear = function (dim, scale, normalPoint) {\n    var view = this.context.view;\n    var _a = this.startCache[dim],\n        min = _a.min,\n        max = _a.max;\n    var range = max - min;\n    var d = normalPoint[dim] * range; // 只有第一次缓存，否则无法回滚\n\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min: min,\n        max: max\n      };\n    }\n\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d\n    });\n  }; // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 回滚\n   */\n\n\n  ScaleTranslate.prototype.reset = function () {\n    _super.prototype.reset.call(this);\n\n    this.startPoint = null;\n    this.starting = false;\n  };\n\n  return ScaleTranslate;\n}(TransformAction);\n\nexport default ScaleTranslate;","map":{"version":3,"mappings":"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","names":["each","TransformAction","__extends","_this","ScaleTranslate","startPoint","context","getCurrentPoint","starting","dims","dim","scale","getScale","max","values","startCache","min","coord","view","getCoordinate","currentPoint","normalStart","invert","noramlCurrent","dx","x","dy","y","translateDim","render","normalPoint","hasDim","isLinear","translateLinear","range","d","cacheScaleDefs","nice","field","_super","reset","call"],"sourceRoot":"","sources":["../../../../src/interaction/action/view/scale-translate.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { Point } from '../../../dependents';\nimport TransformAction from './scale-transform';\n\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\nclass ScaleTranslate extends TransformAction {\n  protected startPoint: Point = null;\n  protected starting = false;\n  private startCache = {};\n  /**\n   * 开始\n   */\n  public start() {\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      const scale = this.getScale(dim);\n      const { min, max, values } = scale;\n      this.startCache[dim] = { min, max, values };\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  }\n\n  /**\n   * 平移\n   */\n  public translate() {\n    if (!this.starting) {\n      return;\n    }\n    const startPoint = this.startPoint;\n    const coord = this.context.view.getCoordinate();\n    const currentPoint = this.context.getCurrentPoint();\n    const normalStart = coord.invert(startPoint);\n    const noramlCurrent = coord.invert(currentPoint);\n    const dx = noramlCurrent.x - normalStart.x;\n    const dy = noramlCurrent.y - normalStart.y;\n    const view = this.context.view;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      this.translateDim(dim, { x: dx * -1, y: dy * -1 });\n    });\n    view.render(true);\n  }\n\n  // 平移度量\n  private translateDim(dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      const scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n    }\n  }\n  // linear 度量平移\n  private translateLinear(dim, scale, normalPoint) {\n    const view = this.context.view;\n    const { min, max } = this.startCache[dim];\n    const range = max - min;\n    const d = normalPoint[dim] * range;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min,\n        max,\n      };\n    }\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d,\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 回滚\n   */\n  public reset() {\n    super.reset();\n    this.startPoint = null;\n    this.starting = false;\n  }\n}\n\nexport default ScaleTranslate;\n"]},"metadata":{},"sourceType":"module"}