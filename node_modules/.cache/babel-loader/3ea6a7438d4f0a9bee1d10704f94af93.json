{"ast":null,"code":"/**\n * @desc simple kebabCase like lodash\n *\n * kebabCase('fooBar'); => 'foo-bar'\n */\nexport function kebabCase(word) {\n  if (!word) {\n    return word;\n  }\n\n  var result = word.match(/(([A-Z]{0,1}[a-z]*[^A-Z])|([A-Z]{1}))/g);\n  return result.map(function (s) {\n    return s.toLowerCase();\n  }).join('-');\n}","map":{"version":3,"mappings":"AAAA;;;;;AAKA,OAAM,SAAUA,SAAV,CAAoBC,IAApB,EAAgC;EACpC,IAAI,CAACA,IAAL,EAAW;IACT,OAAOA,IAAP;EACD;;EACD,IAAMC,MAAM,GAAGD,IAAI,CAACE,KAAL,CAAW,wCAAX,CAAf;EACA,OAAOD,MAAM,CAACE,GAAP,CAAW,UAACC,CAAD,EAAU;IAAK,QAAC,CAACC,WAAF;EAAe,CAAzC,EAA2CC,IAA3C,CAAgD,GAAhD,CAAP;AACD","names":["kebabCase","word","result","match","map","s","toLowerCase","join"],"sourceRoot":"","sources":["../../src/utils/kebab-case.ts"],"sourcesContent":["/**\n * @desc simple kebabCase like lodash\n *\n * kebabCase('fooBar'); => 'foo-bar'\n */\nexport function kebabCase(word: string) {\n  if (!word) {\n    return word;\n  }\n  const result = word.match(/(([A-Z]{0,1}[a-z]*[^A-Z])|([A-Z]{1}))/g);\n  return result.map((s: string) => s.toLowerCase()).join('-');\n}\n"]},"metadata":{},"sourceType":"module"}