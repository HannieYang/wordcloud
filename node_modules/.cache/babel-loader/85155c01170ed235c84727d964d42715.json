{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { justify } from './align';\nimport { constant, sumBy, maxValueBy, minValueBy } from './helper';\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error('missing: ' + id);\n  return node;\n}\n\nfunction computeLinkBreadths(_a) {\n  var nodes = _a.nodes;\n\n  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n    var node = nodes_1[_i];\n    var y0 = node.y0;\n    var y1 = y0;\n\n    for (var _b = 0, _c = node.sourceLinks; _b < _c.length; _b++) {\n      var link = _c[_b];\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n\n    for (var _d = 0, _e = node.targetLinks; _d < _e.length; _d++) {\n      var link = _e[_d];\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport function Sankey() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1; // extent\n\n  var dx = 24; // nodeWidth\n\n  var dy = 8,\n      py; // nodePadding\n\n  var id = defaultId;\n  var align = justify;\n  var depth;\n  var sort;\n  var linkSort;\n  var nodes = defaultNodes;\n  var links = defaultLinks;\n  var iterations = 6;\n\n  function sankey(arg) {\n    var graph = {\n      nodes: nodes(arg),\n      links: links(arg)\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function (_) {\n    return arguments.length ? (id = typeof _ === 'function' ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? (align = typeof _ === 'function' ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeDepth = function (_) {\n    return arguments.length ? (depth = typeof _ === 'function' ? _ : _, sankey) : depth;\n  };\n\n  sankey.nodeSort = function (_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function (_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function (_) {\n    return arguments.length ? (nodes = typeof _ === 'function' ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function (_) {\n    return arguments.length ? (links = typeof _ === 'function' ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function (_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function (_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function (_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function (_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks(_a) {\n    var nodes = _a.nodes,\n        links = _a.links;\n    nodes.forEach(function (node, idx) {\n      node.index = idx;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    var nodeById = new Map(nodes.map(function (d) {\n      return [id(d), d];\n    }));\n    links.forEach(function (link, idx) {\n      link.index = idx;\n      var source = link.source,\n          target = link.target;\n      if (typeof source !== 'object') source = link.source = find(nodeById, source);\n      if (typeof target !== 'object') target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n\n    if (linkSort != null) {\n      for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n        var _b = nodes_2[_i],\n            sourceLinks = _b.sourceLinks,\n            targetLinks = _b.targetLinks;\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues(_a) {\n    var nodes = _a.nodes;\n\n    for (var _i = 0, nodes_3 = nodes; _i < nodes_3.length; _i++) {\n      var node = nodes_3[_i];\n      node.value = node.fixedValue === undefined ? Math.max(sumBy(node.sourceLinks, value), sumBy(node.targetLinks, value)) : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths(_a) {\n    var nodes = _a.nodes;\n    var n = nodes.length;\n    var current = new Set(nodes);\n    var next = new Set();\n    var x = 0;\n\n    while (current.size) {\n      current.forEach(function (node) {\n        node.depth = x;\n\n        for (var _i = 0, _a = node.sourceLinks; _i < _a.length; _i++) {\n          var target = _a[_i].target;\n          next.add(target);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    } // 如果配置了 depth，则设置自定义 depth\n\n\n    if (depth) {\n      var maxDepth = Math.max(maxValueBy(nodes, function (d) {\n        return d.depth;\n      }) + 1, 0);\n      var node = void 0;\n\n      for (var i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.depth = depth.call(null, node, maxDepth);\n      }\n    }\n  }\n\n  function computeNodeHeights(_a) {\n    var nodes = _a.nodes;\n    var n = nodes.length;\n    var current = new Set(nodes);\n    var next = new Set();\n    var x = 0;\n\n    while (current.size) {\n      current.forEach(function (node) {\n        node.height = x;\n\n        for (var _i = 0, _a = node.targetLinks; _i < _a.length; _i++) {\n          var source = _a[_i].source;\n          next.add(source);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n  }\n\n  function computeNodeLayers(_a) {\n    var nodes = _a.nodes;\n    var x = Math.max(maxValueBy(nodes, function (d) {\n      return d.depth;\n    }) + 1, 0);\n    var kx = (x1 - x0 - dx) / (x - 1);\n    var columns = new Array(x).fill(0).map(function () {\n      return [];\n    });\n\n    for (var _i = 0, nodes_4 = nodes; _i < nodes_4.length; _i++) {\n      var node = nodes_4[_i];\n      var i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);else columns[i] = [node];\n    }\n\n    if (sort) for (var _b = 0, columns_1 = columns; _b < columns_1.length; _b++) {\n      var column = columns_1[_b];\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    var ky = minValueBy(columns, function (c) {\n      return (y1 - y0 - (c.length - 1) * py) / sumBy(c, value);\n    });\n\n    for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {\n      var nodes_6 = columns_2[_i];\n      var y = y0;\n\n      for (var _a = 0, nodes_5 = nodes_6; _a < nodes_5.length; _a++) {\n        var node = nodes_5[_a];\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n\n        for (var _b = 0, _c = node.sourceLinks; _b < _c.length; _b++) {\n          var link = _c[_b];\n          link.width = link.value * ky;\n        }\n      }\n\n      y = (y1 - y + py) / (nodes_6.length + 1);\n\n      for (var i = 0; i < nodes_6.length; ++i) {\n        var node = nodes_6[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n\n      reorderLinks(nodes_6);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    var columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (maxValueBy(columns, function (c) {\n      return c.length;\n    }) - 1));\n    initializeNodeBreadths(columns);\n\n    for (var i = 0; i < iterations; ++i) {\n      var alpha = Math.pow(0.99, i);\n      var beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  } // Reposition each node based on its incoming (target) links.\n\n\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (var i = 1, n = columns.length; i < n; ++i) {\n      var column = columns[i];\n\n      for (var _i = 0, column_1 = column; _i < column_1.length; _i++) {\n        var target = column_1[_i];\n        var y = 0;\n        var w = 0;\n\n        for (var _a = 0, _b = target.targetLinks; _a < _b.length; _a++) {\n          var _c = _b[_a],\n              source = _c.source,\n              value_1 = _c.value;\n          var v = value_1 * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n\n        if (!(w > 0)) continue;\n        var dy_1 = (y / w - target.y0) * alpha;\n        target.y0 += dy_1;\n        target.y1 += dy_1;\n        reorderNodeLinks(target);\n      }\n\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  } // Reposition each node based on its outgoing (source) links.\n\n\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (var n = columns.length, i = n - 2; i >= 0; --i) {\n      var column = columns[i];\n\n      for (var _i = 0, column_2 = column; _i < column_2.length; _i++) {\n        var source = column_2[_i];\n        var y = 0;\n        var w = 0;\n\n        for (var _a = 0, _b = source.sourceLinks; _a < _b.length; _a++) {\n          var _c = _b[_a],\n              target = _c.target,\n              value_2 = _c.value;\n          var v = value_2 * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n\n        if (!(w > 0)) continue;\n        var dy_2 = (y / w - source.y0) * alpha;\n        source.y0 += dy_2;\n        source.y1 += dy_2;\n        reorderNodeLinks(source);\n      }\n\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    var i = nodes.length >> 1;\n    var subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  } // Push any overlapping nodes down.\n\n\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      var node = nodes[i];\n      var dy_3 = (y - node.y0) * alpha;\n      if (dy_3 > 1e-6) node.y0 += dy_3, node.y1 += dy_3;\n      y = node.y1 + py;\n    }\n  } // Push any overlapping nodes up.\n\n\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      var node = nodes[i];\n      var dy_4 = (node.y1 - y) * alpha;\n      if (dy_4 > 1e-6) node.y0 -= dy_4, node.y1 -= dy_4;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks(_a) {\n    var sourceLinks = _a.sourceLinks,\n        targetLinks = _a.targetLinks;\n\n    if (linkSort === undefined) {\n      for (var _i = 0, targetLinks_1 = targetLinks; _i < targetLinks_1.length; _i++) {\n        var sourceLinks_2 = targetLinks_1[_i].source.sourceLinks;\n        sourceLinks_2.sort(ascendingTargetBreadth);\n      }\n\n      for (var _b = 0, sourceLinks_1 = sourceLinks; _b < sourceLinks_1.length; _b++) {\n        var targetLinks_2 = sourceLinks_1[_b].target.targetLinks;\n        targetLinks_2.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (var _i = 0, nodes_7 = nodes; _i < nodes_7.length; _i++) {\n        var _a = nodes_7[_i],\n            sourceLinks = _a.sourceLinks,\n            targetLinks = _a.targetLinks;\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  } // Returns the target.y0 that would produce an ideal link from source to target.\n\n\n  function targetTop(source, target) {\n    var y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n\n    for (var _i = 0, _a = source.sourceLinks; _i < _a.length; _i++) {\n      var _b = _a[_i],\n          node = _b.target,\n          width = _b.width;\n      if (node === target) break;\n      y += width + py;\n    }\n\n    for (var _c = 0, _d = target.targetLinks; _c < _d.length; _c++) {\n      var _e = _d[_c],\n          node = _e.source,\n          width = _e.width;\n      if (node === source) break;\n      y -= width;\n    }\n\n    return y;\n  } // Returns the source.y0 that would produce an ideal link from source to target.\n\n\n  function sourceTop(source, target) {\n    var y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n\n    for (var _i = 0, _a = target.targetLinks; _i < _a.length; _i++) {\n      var _b = _a[_i],\n          node = _b.source,\n          width = _b.width;\n      if (node === source) break;\n      y += width + py;\n    }\n\n    for (var _c = 0, _d = source.sourceLinks; _c < _d.length; _c++) {\n      var _e = _d[_c],\n          node = _e.target,\n          width = _e.width;\n      if (node === target) break;\n      y -= width;\n    }\n\n    return y;\n  }\n\n  return sankey;\n}","map":{"version":3,"mappings":"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","names":["justify","constant","sumBy","maxValueBy","minValueBy","ascendingSourceBreadth","a","b","ascendingBreadth","source","index","ascendingTargetBreadth","target","y0","value","d","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","node","get","Error","computeLinkBreadths","_a","_i","y1","sourceLinks","_b","link","width","targetLinks","_d","Sankey","x0","x1","dx","dy","py","align","depth","sort","linkSort","iterations","sankey","arg","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","update","nodeId","_","arguments","length","nodeAlign","nodeDepth","nodeSort","nodeWidth","nodePadding","size","extent","forEach","idx","Map","map","push","fixedValue","undefined","Math","max","n","current","Set","next","x","add","maxDepth","i","call","height","computeNodeLayers","kx","columns","Array","fill","min","floor","layer","column","initializeNodeBreadths","ky","c","nodes_6","y","reorderLinks","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","w","value_1","v","targetTop","dy_1","reorderNodeLinks","resolveCollisions","value_2","sourceTop","dy_2","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","dy_3","dy_4","sourceLinks_2","targetLinks_2","_c"],"sourceRoot":"","sources":["../../../../src/plots/sankey/sankey/sankey.ts"],"sourcesContent":["import { justify } from './align';\nimport { constant, sumBy, maxValueBy, minValueBy } from './helper';\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error('missing: ' + id);\n  return node;\n}\n\nfunction computeLinkBreadths({ nodes }) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport function Sankey() {\n  let x0 = 0,\n    y0 = 0,\n    x1 = 1,\n    y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8,\n    py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let depth;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey(arg) {\n    const graph = {\n      nodes: nodes(arg),\n      links: links(arg),\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function (_) {\n    return arguments.length ? ((id = typeof _ === 'function' ? _ : constant(_)), sankey) : id;\n  };\n\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? ((align = typeof _ === 'function' ? _ : constant(_)), sankey) : align;\n  };\n\n  sankey.nodeDepth = function (_) {\n    return arguments.length ? ((depth = typeof _ === 'function' ? _ : _), sankey) : depth;\n  };\n\n  sankey.nodeSort = function (_) {\n    return arguments.length ? ((sort = _), sankey) : sort;\n  };\n\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? ((dx = +_), sankey) : dx;\n  };\n\n  sankey.nodePadding = function (_) {\n    return arguments.length ? ((dy = py = +_), sankey) : dy;\n  };\n\n  sankey.nodes = function (_) {\n    return arguments.length ? ((nodes = typeof _ === 'function' ? _ : constant(_)), sankey) : nodes;\n  };\n\n  sankey.links = function (_) {\n    return arguments.length ? ((links = typeof _ === 'function' ? _ : constant(_)), sankey) : links;\n  };\n\n  sankey.linkSort = function (_) {\n    return arguments.length ? ((linkSort = _), sankey) : linkSort;\n  };\n\n  sankey.size = function (_) {\n    return arguments.length ? ((x0 = y0 = 0), (x1 = +_[0]), (y1 = +_[1]), sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function (_) {\n    return arguments.length\n      ? ((x0 = +_[0][0]), (x1 = +_[1][0]), (y0 = +_[0][1]), (y1 = +_[1][1]), sankey)\n      : [\n          [x0, y0],\n          [x1, y1],\n        ];\n  };\n\n  sankey.iterations = function (_) {\n    return arguments.length ? ((iterations = +_), sankey) : iterations;\n  };\n\n  function computeNodeLinks({ nodes, links }) {\n    nodes.forEach((node, idx) => {\n      node.index = idx;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n\n    const nodeById = new Map(nodes.map((d) => [id(d), d]));\n\n    links.forEach((link, idx) => {\n      link.index = idx;\n      let { source, target } = link;\n      if (typeof source !== 'object') source = link.source = find(nodeById, source);\n      if (typeof target !== 'object') target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n\n    if (linkSort != null) {\n      for (const { sourceLinks, targetLinks } of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({ nodes }) {\n    for (const node of nodes) {\n      node.value =\n        node.fixedValue === undefined\n          ? Math.max(sumBy(node.sourceLinks, value), sumBy(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({ nodes }) {\n    const n = nodes.length;\n    let current = new Set<any>(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      current.forEach((node) => {\n        node.depth = x;\n        for (const { target } of node.sourceLinks) {\n          next.add(target);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n\n    // 如果配置了 depth，则设置自定义 depth\n    if (depth) {\n      const maxDepth = Math.max(maxValueBy(nodes, (d: any) => d.depth) + 1, 0);\n\n      let node;\n      for (let i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.depth = depth.call(null, node, maxDepth);\n      }\n    }\n  }\n\n  function computeNodeHeights({ nodes }) {\n    const n = nodes.length;\n    let current = new Set<any>(nodes);\n    let next = new Set();\n    let x = 0;\n    while (current.size) {\n      current.forEach((node) => {\n        node.height = x;\n        for (const { source } of node.targetLinks) {\n          next.add(source);\n        }\n      });\n      if (++x > n) throw new Error('circular link');\n      current = next;\n      next = new Set();\n    }\n  }\n\n  function computeNodeLayers({ nodes }) {\n    const x = Math.max(maxValueBy(nodes, (d: any) => d.depth) + 1, 0);\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x).fill(0).map(() => []);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort)\n      for (const column of columns) {\n        column.sort(sort);\n      }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = minValueBy(columns, (c: any[]) => (y1 - y0 - (c.length - 1) * py) / sumBy(c, value)) as any as number;\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / ((maxValueBy(columns, (c: any[]) => c.length) as any as number) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const { source, value } of target.targetLinks) {\n          const v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        const dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const { target, value } of source.sourceLinks) {\n          const v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        const dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      if (column.length) resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) (node.y0 += dy), (node.y1 += dy);\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) (node.y0 -= dy), (node.y1 -= dy);\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({ sourceLinks, targetLinks }) {\n    if (linkSort === undefined) {\n      for (const {\n        source: { sourceLinks },\n      } of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {\n        target: { targetLinks },\n      } of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const { sourceLinks, targetLinks } of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    let y = source.y0 - ((source.sourceLinks.length - 1) * py) / 2;\n    for (const { target: node, width } of source.sourceLinks) {\n      if (node === target) break;\n      y += width + py;\n    }\n    for (const { source: node, width } of target.targetLinks) {\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    let y = target.y0 - ((target.targetLinks.length - 1) * py) / 2;\n    for (const { source: node, width } of target.targetLinks) {\n      if (node === source) break;\n      y += width + py;\n    }\n    for (const { target: node, width } of source.sourceLinks) {\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  return sankey;\n}\n"]},"metadata":{},"sourceType":"module"}