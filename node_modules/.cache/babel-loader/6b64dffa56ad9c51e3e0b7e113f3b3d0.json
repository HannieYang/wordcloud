{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\nimport { deepMix, find, get, isEqual, isFunction, mix, isString, isBoolean, flatten, isArray } from '@antv/util';\nimport { Crosshair, HtmlTooltip } from '../../dependents';\nimport { getAngleByPoint, getDistanceToCenter, getCoordinateClipCfg } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { findItemsFromView } from '../../util/tooltip';\nimport { BBox } from '../../util/bbox';\nimport { Controller } from './base';\nimport Event from '../event'; // Filter duplicates, use `name`, `color`, `value` and `title` property values as condition\n\nfunction uniq(items) {\n  var uniqItems = [];\n\n  var _loop_1 = function (index) {\n    var item = items[index];\n    var result = find(uniqItems, function (subItem) {\n      return subItem.color === item.color && subItem.name === item.name && subItem.value === item.value && subItem.title === item.title;\n    });\n\n    if (!result) {\n      uniqItems.push(item);\n    }\n  };\n\n  for (var index = 0; index < items.length; index++) {\n    _loop_1(index);\n  }\n\n  return uniqItems;\n}\n/** @ignore */\n\n\nvar Tooltip =\n/** @class */\nfunction (_super) {\n  __extends(Tooltip, _super);\n\n  function Tooltip() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.isLocked = false;\n    return _this;\n  }\n\n  Object.defineProperty(Tooltip.prototype, \"name\", {\n    get: function () {\n      return 'tooltip';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Tooltip.prototype.init = function () {};\n\n  Tooltip.prototype.isVisible = function () {\n    var option = this.view.getOptions().tooltip;\n    return option !== false;\n  };\n\n  Tooltip.prototype.render = function () {};\n  /**\n   * Shows tooltip\n   * @param point\n   */\n\n\n  Tooltip.prototype.showTooltip = function (point) {\n    this.point = point;\n\n    if (!this.isVisible()) {\n      // 如果设置 tooltip(false) 则始终不显示\n      return;\n    }\n\n    var view = this.view;\n    var items = this.getTooltipItems(point);\n\n    if (!items.length) {\n      // 无内容则不展示，同时 tooltip 需要隐藏\n      this.hideTooltip();\n      return;\n    }\n\n    var title = this.getTitle(items);\n    var dataPoint = {\n      x: items[0].x,\n      y: items[0].y\n    }; // 数据点位置\n\n    view.emit('tooltip:show', Event.fromData(view, 'tooltip:show', __assign({\n      items: items,\n      title: title\n    }, point)));\n    var cfg = this.getTooltipCfg();\n    var follow = cfg.follow,\n        showMarkers = cfg.showMarkers,\n        showCrosshairs = cfg.showCrosshairs,\n        showContent = cfg.showContent,\n        marker = cfg.marker;\n    var lastItems = this.items;\n    var lastTitle = this.title;\n\n    if (!isEqual(lastTitle, title) || !isEqual(lastItems, items)) {\n      // 内容发生变化了更新 tooltip\n      view.emit('tooltip:change', Event.fromData(view, 'tooltip:change', __assign({\n        items: items,\n        title: title\n      }, point)));\n\n      if (isFunction(showContent) ? showContent(items) : showContent) {\n        // 展示 tooltip 内容框才渲染 tooltip\n        if (!this.tooltip) {\n          // 延迟生成\n          this.renderTooltip();\n        }\n\n        this.tooltip.update(mix({}, cfg, {\n          items: this.getItemsAfterProcess(items),\n          title: title\n        }, follow ? point : {}));\n        this.tooltip.show();\n      }\n\n      if (showMarkers) {\n        // 展示 tooltipMarkers，tooltipMarkers 跟随数据\n        this.renderTooltipMarkers(items, marker);\n      }\n    } else {\n      // 内容未发生变化，则更新位置\n      if (this.tooltip && follow) {\n        this.tooltip.update(point);\n        this.tooltip.show(); // tooltip 有可能被隐藏，需要保证显示状态\n      }\n\n      if (this.tooltipMarkersGroup) {\n        this.tooltipMarkersGroup.show();\n      }\n    }\n\n    this.items = items;\n    this.title = title;\n\n    if (showCrosshairs) {\n      // 展示 tooltip 辅助线\n      var isCrosshairsFollowCursor = get(cfg, ['crosshairs', 'follow'], false); // 辅助线是否要跟随鼠标\n\n      this.renderCrosshairs(isCrosshairsFollowCursor ? point : dataPoint, cfg);\n    }\n  };\n\n  Tooltip.prototype.hideTooltip = function () {\n    var follow = this.getTooltipCfg().follow;\n\n    if (!follow) {\n      this.point = null;\n      return;\n    } // hide the tooltipMarkers\n\n\n    var tooltipMarkersGroup = this.tooltipMarkersGroup;\n\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.hide();\n    } // hide crosshairs\n\n\n    var xCrosshair = this.xCrosshair;\n    var yCrosshair = this.yCrosshair;\n\n    if (xCrosshair) {\n      xCrosshair.hide();\n    }\n\n    if (yCrosshair) {\n      yCrosshair.hide();\n    }\n\n    var tooltip = this.tooltip;\n\n    if (tooltip) {\n      tooltip.hide();\n    }\n\n    this.view.emit('tooltip:hide', Event.fromData(this.view, 'tooltip:hide', {}));\n    this.point = null;\n  };\n  /**\n   * lockTooltip\n   */\n\n\n  Tooltip.prototype.lockTooltip = function () {\n    this.isLocked = true;\n\n    if (this.tooltip) {\n      // tooltip contianer 可捕获事件\n      this.tooltip.setCapture(true);\n    }\n  };\n  /**\n   * unlockTooltip\n   */\n\n\n  Tooltip.prototype.unlockTooltip = function () {\n    this.isLocked = false;\n    var cfg = this.getTooltipCfg();\n\n    if (this.tooltip) {\n      // 重置 capture 属性\n      this.tooltip.setCapture(cfg.capture);\n    }\n  };\n  /**\n   * isTooltipLocked\n   */\n\n\n  Tooltip.prototype.isTooltipLocked = function () {\n    return this.isLocked;\n  };\n\n  Tooltip.prototype.clear = function () {\n    var _a = this,\n        tooltip = _a.tooltip,\n        xCrosshair = _a.xCrosshair,\n        yCrosshair = _a.yCrosshair,\n        tooltipMarkersGroup = _a.tooltipMarkersGroup;\n\n    if (tooltip) {\n      tooltip.hide();\n      tooltip.clear();\n    }\n\n    if (xCrosshair) {\n      xCrosshair.clear();\n    }\n\n    if (yCrosshair) {\n      yCrosshair.clear();\n    }\n\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.clear();\n    } // 如果 customContent 不为空，就重新生成 tooltip\n\n\n    if (tooltip === null || tooltip === void 0 ? void 0 : tooltip.get('customContent')) {\n      this.tooltip.destroy();\n      this.tooltip = null;\n    } // title 和 items 需要清空, 否则 tooltip 内容会出现置空的情况\n    // 即：需要走进 !isEqual(lastTitle, title) || !isEqual(lastItems, items) 的逻辑，更新 tooltip 的内容\n\n\n    this.title = null;\n    this.items = null;\n  };\n\n  Tooltip.prototype.destroy = function () {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n\n    if (this.xCrosshair) {\n      this.xCrosshair.destroy();\n    }\n\n    if (this.yCrosshair) {\n      this.yCrosshair.destroy();\n    }\n\n    if (this.guideGroup) {\n      this.guideGroup.remove(true);\n    }\n\n    this.reset();\n  };\n\n  Tooltip.prototype.reset = function () {\n    this.items = null;\n    this.title = null;\n    this.tooltipMarkersGroup = null;\n    this.tooltipCrosshairsGroup = null;\n    this.xCrosshair = null;\n    this.yCrosshair = null;\n    this.tooltip = null;\n    this.guideGroup = null;\n    this.isLocked = false;\n    this.point = null;\n  };\n\n  Tooltip.prototype.changeVisible = function (visible) {\n    if (this.visible === visible) {\n      return;\n    }\n\n    var _a = this,\n        tooltip = _a.tooltip,\n        tooltipMarkersGroup = _a.tooltipMarkersGroup,\n        xCrosshair = _a.xCrosshair,\n        yCrosshair = _a.yCrosshair;\n\n    if (visible) {\n      if (tooltip) {\n        tooltip.show();\n      }\n\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.show();\n      }\n\n      if (xCrosshair) {\n        xCrosshair.show();\n      }\n\n      if (yCrosshair) {\n        yCrosshair.show();\n      }\n    } else {\n      if (tooltip) {\n        tooltip.hide();\n      }\n\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.hide();\n      }\n\n      if (xCrosshair) {\n        xCrosshair.hide();\n      }\n\n      if (yCrosshair) {\n        yCrosshair.hide();\n      }\n    }\n\n    this.visible = visible;\n  };\n\n  Tooltip.prototype.getTooltipItems = function (point) {\n    var e_1, _a, e_2, _b, e_3, _c;\n\n    var items = this.findItemsFromView(this.view, point);\n\n    if (items.length) {\n      // 三层\n      items = flatten(items);\n\n      try {\n        for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n          var itemArr = items_1_1.value;\n\n          try {\n            for (var itemArr_1 = (e_2 = void 0, __values(itemArr)), itemArr_1_1 = itemArr_1.next(); !itemArr_1_1.done; itemArr_1_1 = itemArr_1.next()) {\n              var item = itemArr_1_1.value;\n              var _d = item.mappingData,\n                  x = _d.x,\n                  y = _d.y;\n              item.x = isArray(x) ? x[x.length - 1] : x;\n              item.y = isArray(y) ? y[y.length - 1] : y;\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (itemArr_1_1 && !itemArr_1_1.done && (_b = itemArr_1.return)) _b.call(itemArr_1);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var shared = this.getTooltipCfg().shared; // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n\n      if (shared === false && items.length > 1) {\n        var snapItem = items[0];\n        var min = Math.abs(point.y - snapItem[0].y);\n\n        try {\n          for (var items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n            var aItem = items_2_1.value;\n            var yDistance = Math.abs(point.y - aItem[0].y);\n\n            if (yDistance <= min) {\n              snapItem = aItem;\n              min = yDistance;\n            }\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (items_2_1 && !items_2_1.done && (_c = items_2.return)) _c.call(items_2);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n\n        items = [snapItem];\n      }\n\n      return uniq(flatten(items));\n    }\n\n    return [];\n  };\n\n  Tooltip.prototype.layout = function () {};\n\n  Tooltip.prototype.update = function () {\n    if (this.point) {\n      this.showTooltip(this.point);\n    }\n\n    if (this.tooltip) {\n      // #2279 修复resize之后tooltip越界的问题\n      // 确保tooltip已经创建的情况下\n      var canvas = this.view.getCanvas(); // TODO 逍为 tooltip 的区域不应该是 canvas，而应该是整个 特别是在图比较小的时候\n      // 更新 region\n\n      this.tooltip.set('region', {\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: canvas.get('width'),\n          y: canvas.get('height')\n        }\n      });\n    }\n  };\n  /**\n   * 当前鼠标点是在 enter tooltip 中\n   * @param point\n   */\n\n\n  Tooltip.prototype.isCursorEntered = function (point) {\n    // 是可捕获的，并且点在 tooltip dom 上\n    if (this.tooltip) {\n      var el = this.tooltip.getContainer();\n      var capture = this.tooltip.get('capture');\n\n      if (el && capture) {\n        var _a = el.getBoundingClientRect(),\n            x = _a.x,\n            y = _a.y,\n            width = _a.width,\n            height = _a.height;\n\n        return new BBox(x, y, width, height).isPointIn(point);\n      }\n    }\n\n    return false;\n  }; // 获取 tooltip 配置，因为用户可能会通过 view.tooltip() 重新配置 tooltip，所以就不做缓存，每次直接读取\n\n\n  Tooltip.prototype.getTooltipCfg = function () {\n    var view = this.view;\n    var option = view.getOptions().tooltip;\n    var processOption = this.processCustomContent(option);\n    var theme = view.getTheme();\n    var defaultCfg = get(theme, ['components', 'tooltip'], {});\n    var enterable = get(processOption, 'enterable', defaultCfg.enterable);\n    return deepMix({}, defaultCfg, processOption, {\n      capture: enterable || this.isLocked ? true : false\n    });\n  }; // process customContent\n\n\n  Tooltip.prototype.processCustomContent = function (option) {\n    if (isBoolean(option) || !get(option, 'customContent')) {\n      return option;\n    }\n\n    var currentCustomContent = option.customContent;\n\n    var customContent = function (title, items) {\n      var content = currentCustomContent(title, items) || '';\n      return isString(content) ? '<div class=\"g2-tooltip\">' + content + '</div>' : content;\n    };\n\n    return __assign(__assign({}, option), {\n      customContent: customContent\n    });\n  };\n\n  Tooltip.prototype.getTitle = function (items) {\n    var title = items[0].title || items[0].name;\n    this.title = title;\n    return title;\n  };\n\n  Tooltip.prototype.renderTooltip = function () {\n    var canvas = this.view.getCanvas();\n    var region = {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: canvas.get('width'),\n        y: canvas.get('height')\n      }\n    };\n    var cfg = this.getTooltipCfg();\n    var tooltip = new HtmlTooltip(__assign(__assign({\n      parent: canvas.get('el').parentNode,\n      region: region\n    }, cfg), {\n      visible: false,\n      crosshairs: null\n    }));\n    tooltip.init();\n    this.tooltip = tooltip;\n  };\n\n  Tooltip.prototype.renderTooltipMarkers = function (items, marker) {\n    var e_4, _a;\n\n    var tooltipMarkersGroup = this.getTooltipMarkersGroup();\n    var rootView = this.view.getRootView();\n    var limitInPlot = rootView.limitInPlot;\n\n    try {\n      for (var items_3 = __values(items), items_3_1 = items_3.next(); !items_3_1.done; items_3_1 = items_3.next()) {\n        var item = items_3_1.value;\n        var x = item.x,\n            y = item.y; // 有裁剪就剪切\n\n        if (limitInPlot || (tooltipMarkersGroup === null || tooltipMarkersGroup === void 0 ? void 0 : tooltipMarkersGroup.getClip())) {\n          var _b = getCoordinateClipCfg(rootView.getCoordinate()),\n              type = _b.type,\n              attrs_1 = _b.attrs;\n\n          tooltipMarkersGroup === null || tooltipMarkersGroup === void 0 ? void 0 : tooltipMarkersGroup.setClip({\n            type: type,\n            attrs: attrs_1\n          });\n        } else {\n          // 清除已有的 clip\n          tooltipMarkersGroup === null || tooltipMarkersGroup === void 0 ? void 0 : tooltipMarkersGroup.setClip(undefined);\n        }\n\n        var attrs = __assign(__assign({\n          fill: item.color,\n          symbol: 'circle',\n          shadowColor: item.color\n        }, marker), {\n          x: x,\n          y: y\n        });\n\n        tooltipMarkersGroup.addShape('marker', {\n          attrs: attrs\n        });\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (items_3_1 && !items_3_1.done && (_a = items_3.return)) _a.call(items_3);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n  };\n\n  Tooltip.prototype.renderCrosshairs = function (point, cfg) {\n    var crosshairsType = get(cfg, ['crosshairs', 'type'], 'x'); // 默认展示 x 轴上的辅助线\n\n    if (crosshairsType === 'x') {\n      if (this.yCrosshair) {\n        this.yCrosshair.hide();\n      }\n\n      this.renderXCrosshairs(point, cfg);\n    } else if (crosshairsType === 'y') {\n      if (this.xCrosshair) {\n        this.xCrosshair.hide();\n      }\n\n      this.renderYCrosshairs(point, cfg);\n    } else if (crosshairsType === 'xy') {\n      this.renderXCrosshairs(point, cfg);\n      this.renderYCrosshairs(point, cfg);\n    }\n  }; // 渲染 x 轴上的 tooltip 辅助线\n\n\n  Tooltip.prototype.renderXCrosshairs = function (point, tooltipCfg) {\n    var coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    var start;\n    var end;\n\n    if (coordinate.isRect) {\n      if (coordinate.isTransposed) {\n        start = {\n          x: coordinate.start.x,\n          y: point.y\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y\n        };\n      } else {\n        start = {\n          x: point.x,\n          y: coordinate.end.y\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y\n        };\n      }\n    } else {\n      // 极坐标下 x 轴上的 crosshairs 表现为半径\n      var angle = getAngleByPoint(coordinate, point);\n      var center = coordinate.getCenter();\n      var radius = coordinate.getRadius();\n      end = polarToCartesian(center.x, center.y, radius, angle);\n      start = center;\n    }\n\n    var cfg = deepMix({\n      start: start,\n      end: end,\n      container: this.getTooltipCrosshairsGroup()\n    }, get(tooltipCfg, 'crosshairs', {}), this.getCrosshairsText('x', point, tooltipCfg));\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    var xCrosshair = this.xCrosshair;\n\n    if (xCrosshair) {\n      xCrosshair.update(cfg);\n    } else {\n      xCrosshair = new Crosshair.Line(cfg);\n      xCrosshair.init();\n    }\n\n    xCrosshair.render();\n    xCrosshair.show();\n    this.xCrosshair = xCrosshair;\n  }; // 渲染 y 轴上的辅助线\n\n\n  Tooltip.prototype.renderYCrosshairs = function (point, tooltipCfg) {\n    var coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    var cfg;\n    var type;\n\n    if (coordinate.isRect) {\n      var start = void 0;\n      var end = void 0;\n\n      if (coordinate.isTransposed) {\n        start = {\n          x: point.x,\n          y: coordinate.end.y\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y\n        };\n      } else {\n        start = {\n          x: coordinate.start.x,\n          y: point.y\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y\n        };\n      }\n\n      cfg = {\n        start: start,\n        end: end\n      };\n      type = 'Line';\n    } else {\n      // 极坐标下 y 轴上的 crosshairs 表现为圆弧\n      cfg = {\n        center: coordinate.getCenter(),\n        // @ts-ignore\n        radius: getDistanceToCenter(coordinate, point),\n        startAngle: coordinate.startAngle,\n        endAngle: coordinate.endAngle\n      };\n      type = 'Circle';\n    }\n\n    cfg = deepMix({\n      container: this.getTooltipCrosshairsGroup()\n    }, cfg, get(tooltipCfg, 'crosshairs', {}), this.getCrosshairsText('y', point, tooltipCfg));\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    var yCrosshair = this.yCrosshair;\n\n    if (yCrosshair) {\n      // 如果坐标系发生直角坐标系与极坐标的切换操作\n      if (coordinate.isRect && yCrosshair.get('type') === 'circle' || !coordinate.isRect && yCrosshair.get('type') === 'line') {\n        yCrosshair = new Crosshair[type](cfg);\n        yCrosshair.init();\n      } else {\n        yCrosshair.update(cfg);\n      }\n    } else {\n      yCrosshair = new Crosshair[type](cfg);\n      yCrosshair.init();\n    }\n\n    yCrosshair.render();\n    yCrosshair.show();\n    this.yCrosshair = yCrosshair;\n  };\n\n  Tooltip.prototype.getCrosshairsText = function (type, point, tooltipCfg) {\n    var textCfg = get(tooltipCfg, ['crosshairs', 'text']);\n    var follow = get(tooltipCfg, ['crosshairs', 'follow']);\n    var items = this.items;\n\n    if (textCfg) {\n      var view = this.getViewWithGeometry(this.view); // 需要展示文本\n\n      var firstItem = items[0];\n      var xScale = view.getXScale();\n      var yScale = view.getYScales()[0];\n      var xValue = void 0;\n      var yValue = void 0;\n\n      if (follow) {\n        // 如果需要跟随鼠标移动，就需要将当前鼠标坐标点转换为对应的数值\n        var invertPoint = this.view.getCoordinate().invert(point);\n        xValue = xScale.invert(invertPoint.x); // 转换为原始值\n\n        yValue = yScale.invert(invertPoint.y); // 转换为原始值\n      } else {\n        xValue = firstItem.data[xScale.field];\n        yValue = firstItem.data[yScale.field];\n      }\n\n      var content = type === 'x' ? xValue : yValue;\n\n      if (isFunction(textCfg)) {\n        textCfg = textCfg(type, content, items, point);\n      } else {\n        textCfg.content = content;\n      }\n\n      return {\n        text: textCfg\n      };\n    }\n  }; // 获取存储 tooltipMarkers 和 crosshairs 的容器\n\n\n  Tooltip.prototype.getGuideGroup = function () {\n    if (!this.guideGroup) {\n      var foregroundGroup = this.view.foregroundGroup;\n      this.guideGroup = foregroundGroup.addGroup({\n        name: 'tooltipGuide',\n        capture: false\n      });\n    }\n\n    return this.guideGroup;\n  }; // 获取 tooltipMarkers 存储的容器\n\n\n  Tooltip.prototype.getTooltipMarkersGroup = function () {\n    var tooltipMarkersGroup = this.tooltipMarkersGroup;\n\n    if (tooltipMarkersGroup && !tooltipMarkersGroup.destroyed) {\n      tooltipMarkersGroup.clear();\n      tooltipMarkersGroup.show();\n    } else {\n      tooltipMarkersGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipMarkersGroup'\n      });\n      tooltipMarkersGroup.toFront();\n      this.tooltipMarkersGroup = tooltipMarkersGroup;\n    }\n\n    return tooltipMarkersGroup;\n  }; // 获取 tooltip crosshairs 存储的容器\n\n\n  Tooltip.prototype.getTooltipCrosshairsGroup = function () {\n    var tooltipCrosshairsGroup = this.tooltipCrosshairsGroup;\n\n    if (!tooltipCrosshairsGroup) {\n      tooltipCrosshairsGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipCrosshairsGroup',\n        capture: false\n      });\n      tooltipCrosshairsGroup.toBack();\n      this.tooltipCrosshairsGroup = tooltipCrosshairsGroup;\n    }\n\n    return tooltipCrosshairsGroup;\n  };\n\n  Tooltip.prototype.findItemsFromView = function (view, point) {\n    var e_5, _a;\n\n    if (view.getOptions().tooltip === false) {\n      // 如果 view 关闭了 tooltip\n      return [];\n    }\n\n    var tooltipCfg = this.getTooltipCfg();\n    var result = findItemsFromView(view, point, tooltipCfg);\n\n    try {\n      // 递归查找，并合并结果\n      for (var _b = __values(view.views), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var childView = _c.value;\n        result = result.concat(this.findItemsFromView(childView, point));\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return result;\n  }; // FIXME: hack 方法\n  // 因为 tooltip 的交互是挂载在 Chart 上，所以当chart 上没有绘制 Geometry 的时候，就查找不到数据，并且绘图区域同子 View 的区域不同\n\n\n  Tooltip.prototype.getViewWithGeometry = function (view) {\n    var _this = this;\n\n    if (view.geometries.length) {\n      return view;\n    }\n\n    return find(view.views, function (childView) {\n      return _this.getViewWithGeometry(childView);\n    });\n  };\n  /**\n   * 根据用户配置的 items 配置，来进行用户自定义的处理，并返回最终的 items\n   * 默认不做任何处理\n   */\n\n\n  Tooltip.prototype.getItemsAfterProcess = function (originalItems) {\n    var customItems = this.getTooltipCfg().customItems;\n    var fn = customItems ? customItems : function (v) {\n      return v;\n    };\n    return fn(originalItems);\n  };\n\n  return Tooltip;\n}(Controller);\n\nexport default Tooltip;","map":{"version":3,"mappings":"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","names":["deepMix","find","get","isEqual","isFunction","mix","isString","isBoolean","flatten","isArray","Crosshair","HtmlTooltip","getAngleByPoint","getDistanceToCenter","getCoordinateClipCfg","polarToCartesian","findItemsFromView","BBox","Controller","Event","uniq","items","uniqItems","index","item","result","subItem","color","name","value","title","push","length","__extends","_this","Object","Tooltip","option","view","getOptions","tooltip","point","isVisible","getTooltipItems","hideTooltip","getTitle","dataPoint","x","y","emit","fromData","__assign","cfg","getTooltipCfg","showMarkers","showCrosshairs","showContent","marker","lastItems","lastTitle","renderTooltip","update","getItemsAfterProcess","follow","show","renderTooltipMarkers","tooltipMarkersGroup","isCrosshairsFollowCursor","renderCrosshairs","hide","xCrosshair","yCrosshair","isLocked","setCapture","capture","clear","destroy","guideGroup","remove","reset","tooltipCrosshairsGroup","visible","items_1_1","itemArr","itemArr_1_1","mappingData","shared","snapItem","min","Math","abs","items_2_1","aItem","yDistance","showTooltip","canvas","getCanvas","set","start","end","el","getContainer","getBoundingClientRect","width","height","isPointIn","processOption","processCustomContent","theme","getTheme","defaultCfg","enterable","currentCustomContent","customContent","content","region","parent","parentNode","crosshairs","init","getTooltipMarkersGroup","rootView","getRootView","items_3_1","limitInPlot","getClip","getCoordinate","type","attrs_1","setClip","attrs","undefined","fill","symbol","shadowColor","addShape","crosshairsType","renderXCrosshairs","renderYCrosshairs","tooltipCfg","coordinate","getViewWithGeometry","isRect","isTransposed","angle","center","getCenter","radius","getRadius","container","getTooltipCrosshairsGroup","getCrosshairsText","Line","render","startAngle","endAngle","textCfg","firstItem","xScale","getXScale","yScale","getYScales","xValue","yValue","invertPoint","invert","data","field","text","foregroundGroup","addGroup","destroyed","getGuideGroup","toFront","toBack","views","_c","childView","concat","geometries","originalItems","customItems","fn","v"],"sourceRoot":"","sources":["../../../src/chart/controller/tooltip.ts"],"sourcesContent":["import { deepMix, find, get, isEqual, isFunction, mix, isString, isBoolean, flatten, isArray } from '@antv/util';\nimport { Crosshair, HtmlTooltip, IGroup } from '../../dependents';\nimport { Point, TooltipItem, TooltipOption } from '../../interface';\nimport { getAngleByPoint, getDistanceToCenter, getCoordinateClipCfg } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { findItemsFromView } from '../../util/tooltip';\nimport { BBox } from '../../util/bbox';\nimport { Controller } from './base';\nimport Event from '../event';\nimport View from '../view';\n\n// Filter duplicates, use `name`, `color`, `value` and `title` property values as condition\nfunction uniq(items) {\n  const uniqItems = [];\n  for (let index = 0; index < items.length; index++) {\n    const item = items[index];\n    const result = find(uniqItems, (subItem) => {\n      return (\n        subItem.color === item.color &&\n        subItem.name === item.name &&\n        subItem.value === item.value &&\n        subItem.title === item.title\n      );\n    });\n    if (!result) {\n      uniqItems.push(item);\n    }\n  }\n  return uniqItems;\n}\n\n/** @ignore */\nexport default class Tooltip extends Controller<TooltipOption> {\n  private tooltip;\n  private tooltipMarkersGroup: IGroup;\n  private tooltipCrosshairsGroup: IGroup;\n  private xCrosshair;\n  private yCrosshair;\n  private guideGroup: IGroup;\n\n  private isLocked: boolean = false;\n  private items;\n  private title: string;\n  private point: Point;\n\n  public get name(): string {\n    return 'tooltip';\n  }\n\n  public init() { }\n\n  private isVisible() {\n    const option = this.view.getOptions().tooltip;\n    return option !== false;\n  }\n\n  public render() { }\n\n  /**\n   * Shows tooltip\n   * @param point\n   */\n  public showTooltip(point: Point) {\n    this.point = point;\n    if (!this.isVisible()) {\n      // 如果设置 tooltip(false) 则始终不显示\n      return;\n    }\n    const view = this.view;\n    const items = this.getTooltipItems(point);\n    if (!items.length) {\n      // 无内容则不展示，同时 tooltip 需要隐藏\n      this.hideTooltip();\n      return;\n    }\n    const title = this.getTitle(items);\n    const dataPoint = {\n      x: items[0].x,\n      y: items[0].y,\n    }; // 数据点位置\n\n    view.emit(\n      'tooltip:show',\n      Event.fromData(view, 'tooltip:show', {\n        items,\n        title,\n        ...point,\n      })\n    );\n\n    const cfg = this.getTooltipCfg();\n    const { follow, showMarkers, showCrosshairs, showContent, marker } = cfg;\n    const lastItems = this.items;\n    const lastTitle = this.title;\n    if (!isEqual(lastTitle, title) || !isEqual(lastItems, items)) {\n      // 内容发生变化了更新 tooltip\n      view.emit(\n        'tooltip:change',\n        Event.fromData(view, 'tooltip:change', {\n          items,\n          title,\n          ...point,\n        })\n      );\n\n      if (isFunction(showContent) ? showContent(items) : showContent) {\n        // 展示 tooltip 内容框才渲染 tooltip\n        if (!this.tooltip) {\n          // 延迟生成\n          this.renderTooltip();\n        }\n        this.tooltip.update(\n          mix(\n            {},\n            cfg,\n            {\n              items: this.getItemsAfterProcess(items),\n              title,\n            },\n            follow ? point : {}\n          )\n        );\n        this.tooltip.show();\n      }\n\n      if (showMarkers) {\n        // 展示 tooltipMarkers，tooltipMarkers 跟随数据\n        this.renderTooltipMarkers(items, marker);\n      }\n    } else {\n      // 内容未发生变化，则更新位置\n      if (this.tooltip && follow) {\n        this.tooltip.update(point);\n        this.tooltip.show(); // tooltip 有可能被隐藏，需要保证显示状态\n      }\n\n      if (this.tooltipMarkersGroup) {\n        this.tooltipMarkersGroup.show();\n      }\n    }\n\n    this.items = items;\n    this.title = title;\n\n    if (showCrosshairs) {\n      // 展示 tooltip 辅助线\n      const isCrosshairsFollowCursor = get(cfg, ['crosshairs', 'follow'], false); // 辅助线是否要跟随鼠标\n      this.renderCrosshairs(isCrosshairsFollowCursor ? point : dataPoint, cfg);\n    }\n  }\n\n  public hideTooltip() {\n    const { follow } = this.getTooltipCfg();\n    if (!follow) {\n      this.point = null;\n      return;\n    }\n    // hide the tooltipMarkers\n    const tooltipMarkersGroup = this.tooltipMarkersGroup;\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.hide();\n    }\n\n    // hide crosshairs\n    const xCrosshair = this.xCrosshair;\n    const yCrosshair = this.yCrosshair;\n    if (xCrosshair) {\n      xCrosshair.hide();\n    }\n    if (yCrosshair) {\n      yCrosshair.hide();\n    }\n\n    const tooltip = this.tooltip;\n    if (tooltip) {\n      tooltip.hide();\n    }\n\n    this.view.emit('tooltip:hide', Event.fromData(this.view, 'tooltip:hide', {}));\n\n    this.point = null;\n  }\n\n  /**\n   * lockTooltip\n   */\n  public lockTooltip() {\n    this.isLocked = true;\n    if (this.tooltip) {\n      // tooltip contianer 可捕获事件\n      this.tooltip.setCapture(true);\n    }\n  }\n\n  /**\n   * unlockTooltip\n   */\n  public unlockTooltip() {\n    this.isLocked = false;\n    const cfg = this.getTooltipCfg();\n    if (this.tooltip) {\n      // 重置 capture 属性\n      this.tooltip.setCapture(cfg.capture);\n    }\n  }\n\n  /**\n   * isTooltipLocked\n   */\n  public isTooltipLocked() {\n    return this.isLocked;\n  }\n\n  public clear() {\n    const { tooltip, xCrosshair, yCrosshair, tooltipMarkersGroup } = this;\n    if (tooltip) {\n      tooltip.hide();\n      tooltip.clear();\n    }\n\n    if (xCrosshair) {\n      xCrosshair.clear();\n    }\n\n    if (yCrosshair) {\n      yCrosshair.clear();\n    }\n\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.clear();\n    }\n\n    // 如果 customContent 不为空，就重新生成 tooltip\n    if (tooltip?.get('customContent')) {\n      this.tooltip.destroy();\n      this.tooltip = null;\n    }\n\n    // title 和 items 需要清空, 否则 tooltip 内容会出现置空的情况\n    // 即：需要走进 !isEqual(lastTitle, title) || !isEqual(lastItems, items) 的逻辑，更新 tooltip 的内容\n    this.title = null;\n    this.items = null;\n  }\n\n  public destroy() {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n    if (this.xCrosshair) {\n      this.xCrosshair.destroy();\n    }\n    if (this.yCrosshair) {\n      this.yCrosshair.destroy();\n    }\n\n    if (this.guideGroup) {\n      this.guideGroup.remove(true);\n    }\n\n    this.reset();\n  }\n\n  public reset() {\n    this.items = null;\n    this.title = null;\n    this.tooltipMarkersGroup = null;\n    this.tooltipCrosshairsGroup = null;\n    this.xCrosshair = null;\n    this.yCrosshair = null;\n    this.tooltip = null;\n    this.guideGroup = null;\n    this.isLocked = false;\n    this.point = null;\n  }\n\n  public changeVisible(visible: boolean) {\n    if (this.visible === visible) {\n      return;\n    }\n    const { tooltip, tooltipMarkersGroup, xCrosshair, yCrosshair } = this;\n    if (visible) {\n      if (tooltip) {\n        tooltip.show();\n      }\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.show();\n      }\n      if (xCrosshair) {\n        xCrosshair.show();\n      }\n      if (yCrosshair) {\n        yCrosshair.show();\n      }\n    } else {\n      if (tooltip) {\n        tooltip.hide();\n      }\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.hide();\n      }\n      if (xCrosshair) {\n        xCrosshair.hide();\n      }\n      if (yCrosshair) {\n        yCrosshair.hide();\n      }\n    }\n    this.visible = visible;\n  }\n\n  public getTooltipItems(point: Point) {\n    let items = this.findItemsFromView(this.view, point);\n    if (items.length) {\n      // 三层\n      items = flatten(items);\n      for (const itemArr of items) {\n        for (const item of itemArr) {\n          const { x, y } = item.mappingData;\n          item.x = isArray(x) ? x[x.length - 1] : x;\n          item.y = isArray(y) ? y[y.length - 1] : y;\n        }\n      }\n\n      const { shared } = this.getTooltipCfg();\n      // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n      if (shared === false && items.length > 1) {\n        let snapItem = items[0];\n        let min = Math.abs(point.y - snapItem[0].y);\n        for (const aItem of items) {\n          const yDistance = Math.abs(point.y - aItem[0].y);\n          if (yDistance <= min) {\n            snapItem = aItem;\n            min = yDistance;\n          }\n        }\n        items = [snapItem];\n      }\n\n      return uniq(flatten(items));\n    }\n\n    return [];\n  }\n\n  public layout() { }\n\n  public update() {\n    if (this.point) {\n      this.showTooltip(this.point);\n    }\n\n    if (this.tooltip) {\n      // #2279 修复resize之后tooltip越界的问题\n      // 确保tooltip已经创建的情况下\n      const canvas = this.view.getCanvas();\n      // TODO 逍为 tooltip 的区域不应该是 canvas，而应该是整个 特别是在图比较小的时候\n      // 更新 region\n      this.tooltip.set('region', {\n        start: { x: 0, y: 0 },\n        end: { x: canvas.get('width'), y: canvas.get('height') },\n      });\n    }\n  }\n\n  /**\n   * 当前鼠标点是在 enter tooltip 中\n   * @param point\n   */\n  public isCursorEntered(point: Point) {\n    // 是可捕获的，并且点在 tooltip dom 上\n    if (this.tooltip) {\n      const el: HTMLElement = this.tooltip.getContainer();\n      const capture = this.tooltip.get('capture');\n\n      if (el && capture) {\n        const { x, y, width, height } = el.getBoundingClientRect();\n        return new BBox(x, y, width, height).isPointIn(point);\n      }\n    }\n\n    return false;\n  }\n\n  // 获取 tooltip 配置，因为用户可能会通过 view.tooltip() 重新配置 tooltip，所以就不做缓存，每次直接读取\n  public getTooltipCfg() {\n    const view = this.view;\n    const option = view.getOptions().tooltip;\n    const processOption = this.processCustomContent(option);\n    const theme = view.getTheme();\n    const defaultCfg = get(theme, ['components', 'tooltip'], {});\n    const enterable = get(processOption, 'enterable', defaultCfg.enterable);\n    return deepMix({}, defaultCfg, processOption, {\n      capture: enterable || this.isLocked ? true : false,\n    });\n  }\n\n  // process customContent\n  protected processCustomContent(option: TooltipOption) {\n    if (isBoolean(option) || !get(option, 'customContent')) {\n      return option;\n    }\n    const currentCustomContent = option.customContent;\n    const customContent = (title: string, items: any[]) => {\n      const content = currentCustomContent(title, items) || '';\n      return isString(content) ? '<div class=\"g2-tooltip\">' + content + '</div>' : content;\n    };\n    return {\n      ...option,\n      customContent,\n    };\n  }\n\n  private getTitle(items) {\n    const title = items[0].title || items[0].name;\n    this.title = title;\n\n    return title;\n  }\n\n  private renderTooltip() {\n    const canvas = this.view.getCanvas();\n    const region = {\n      start: { x: 0, y: 0 },\n      end: { x: canvas.get('width'), y: canvas.get('height') },\n    };\n\n    const cfg = this.getTooltipCfg();\n    const tooltip = new HtmlTooltip({\n      parent: canvas.get('el').parentNode,\n      region,\n      ...cfg,\n      visible: false,\n      crosshairs: null,\n    });\n\n    tooltip.init();\n    this.tooltip = tooltip;\n  }\n\n  private renderTooltipMarkers(items, marker) {\n    const tooltipMarkersGroup = this.getTooltipMarkersGroup();\n    const rootView = this.view.getRootView();\n    const { limitInPlot } = rootView;\n    for (const item of items) {\n      const { x, y } = item;\n\n      // 有裁剪就剪切\n      if (limitInPlot || tooltipMarkersGroup?.getClip()) {\n        const { type, attrs } = getCoordinateClipCfg(rootView.getCoordinate());\n        tooltipMarkersGroup?.setClip({\n          type,\n          attrs,\n        });\n      } else {\n        // 清除已有的 clip\n        tooltipMarkersGroup?.setClip(undefined);\n      }\n\n      const attrs = {\n        fill: item.color,\n        symbol: 'circle',\n        shadowColor: item.color,\n        ...marker,\n        x,\n        y,\n      };\n\n      tooltipMarkersGroup.addShape('marker', {\n        attrs,\n      });\n    }\n  }\n\n  private renderCrosshairs(point: Point, cfg) {\n    const crosshairsType = get(cfg, ['crosshairs', 'type'], 'x'); // 默认展示 x 轴上的辅助线\n    if (crosshairsType === 'x') {\n      if (this.yCrosshair) {\n        this.yCrosshair.hide();\n      }\n      this.renderXCrosshairs(point, cfg);\n    } else if (crosshairsType === 'y') {\n      if (this.xCrosshair) {\n        this.xCrosshair.hide();\n      }\n      this.renderYCrosshairs(point, cfg);\n    } else if (crosshairsType === 'xy') {\n      this.renderXCrosshairs(point, cfg);\n      this.renderYCrosshairs(point, cfg);\n    }\n  }\n\n  // 渲染 x 轴上的 tooltip 辅助线\n  private renderXCrosshairs(point: Point, tooltipCfg) {\n    const coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    let start;\n    let end;\n    if (coordinate.isRect) {\n      if (coordinate.isTransposed) {\n        start = {\n          x: coordinate.start.x,\n          y: point.y,\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y,\n        };\n      } else {\n        start = {\n          x: point.x,\n          y: coordinate.end.y,\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y,\n        };\n      }\n    } else {\n      // 极坐标下 x 轴上的 crosshairs 表现为半径\n      const angle = getAngleByPoint(coordinate, point);\n      const center = coordinate.getCenter();\n      const radius = coordinate.getRadius();\n      end = polarToCartesian(center.x, center.y, radius, angle);\n      start = center;\n    }\n\n    const cfg = deepMix(\n      {\n        start,\n        end,\n        container: this.getTooltipCrosshairsGroup(),\n      },\n      get(tooltipCfg, 'crosshairs', {}),\n      this.getCrosshairsText('x', point, tooltipCfg)\n    );\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    let xCrosshair = this.xCrosshair;\n    if (xCrosshair) {\n      xCrosshair.update(cfg);\n    } else {\n      xCrosshair = new Crosshair.Line(cfg);\n      xCrosshair.init();\n    }\n    xCrosshair.render();\n    xCrosshair.show();\n    this.xCrosshair = xCrosshair;\n  }\n\n  // 渲染 y 轴上的辅助线\n  private renderYCrosshairs(point: Point, tooltipCfg) {\n    const coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    let cfg;\n    let type;\n    if (coordinate.isRect) {\n      let start;\n      let end;\n      if (coordinate.isTransposed) {\n        start = {\n          x: point.x,\n          y: coordinate.end.y,\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y,\n        };\n      } else {\n        start = {\n          x: coordinate.start.x,\n          y: point.y,\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y,\n        };\n      }\n      cfg = {\n        start,\n        end,\n      };\n      type = 'Line';\n    } else {\n      // 极坐标下 y 轴上的 crosshairs 表现为圆弧\n      cfg = {\n        center: coordinate.getCenter(),\n        // @ts-ignore\n        radius: getDistanceToCenter(coordinate, point),\n        startAngle: coordinate.startAngle,\n        endAngle: coordinate.endAngle,\n      };\n      type = 'Circle';\n    }\n\n    cfg = deepMix(\n      {\n        container: this.getTooltipCrosshairsGroup(),\n      },\n      cfg,\n      get(tooltipCfg, 'crosshairs', {}),\n      this.getCrosshairsText('y', point, tooltipCfg)\n    );\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    let yCrosshair = this.yCrosshair;\n    if (yCrosshair) {\n      // 如果坐标系发生直角坐标系与极坐标的切换操作\n      if (\n        (coordinate.isRect && yCrosshair.get('type') === 'circle') ||\n        (!coordinate.isRect && yCrosshair.get('type') === 'line')\n      ) {\n        yCrosshair = new Crosshair[type](cfg);\n        yCrosshair.init();\n      } else {\n        yCrosshair.update(cfg);\n      }\n    } else {\n      yCrosshair = new Crosshair[type](cfg);\n      yCrosshair.init();\n    }\n    yCrosshair.render();\n    yCrosshair.show();\n    this.yCrosshair = yCrosshair;\n  }\n\n  private getCrosshairsText(type, point: Point, tooltipCfg) {\n    let textCfg = get(tooltipCfg, ['crosshairs', 'text']);\n    const follow = get(tooltipCfg, ['crosshairs', 'follow']);\n    const items = this.items;\n\n    if (textCfg) {\n      const view = this.getViewWithGeometry(this.view);\n      // 需要展示文本\n      const firstItem = items[0];\n      const xScale = view.getXScale();\n      const yScale = view.getYScales()[0];\n      let xValue;\n      let yValue;\n      if (follow) {\n        // 如果需要跟随鼠标移动，就需要将当前鼠标坐标点转换为对应的数值\n        const invertPoint = this.view.getCoordinate().invert(point);\n        xValue = xScale.invert(invertPoint.x); // 转换为原始值\n        yValue = yScale.invert(invertPoint.y); // 转换为原始值\n      } else {\n        xValue = firstItem.data[xScale.field];\n        yValue = firstItem.data[yScale.field];\n      }\n\n      const content = type === 'x' ? xValue : yValue;\n      if (isFunction(textCfg)) {\n        textCfg = textCfg(type, content, items, point);\n      } else {\n        textCfg.content = content;\n      }\n\n      return {\n        text: textCfg,\n      };\n    }\n  }\n\n  // 获取存储 tooltipMarkers 和 crosshairs 的容器\n  private getGuideGroup() {\n    if (!this.guideGroup) {\n      const foregroundGroup = this.view.foregroundGroup;\n      this.guideGroup = foregroundGroup.addGroup({\n        name: 'tooltipGuide',\n        capture: false,\n      });\n    }\n\n    return this.guideGroup;\n  }\n\n  // 获取 tooltipMarkers 存储的容器\n  private getTooltipMarkersGroup() {\n    let tooltipMarkersGroup = this.tooltipMarkersGroup;\n    if (tooltipMarkersGroup && !tooltipMarkersGroup.destroyed) {\n      tooltipMarkersGroup.clear();\n      tooltipMarkersGroup.show();\n    } else {\n      tooltipMarkersGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipMarkersGroup',\n      });\n      tooltipMarkersGroup.toFront();\n      this.tooltipMarkersGroup = tooltipMarkersGroup;\n    }\n    return tooltipMarkersGroup;\n  }\n\n  // 获取 tooltip crosshairs 存储的容器\n  private getTooltipCrosshairsGroup() {\n    let tooltipCrosshairsGroup = this.tooltipCrosshairsGroup;\n    if (!tooltipCrosshairsGroup) {\n      tooltipCrosshairsGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipCrosshairsGroup',\n        capture: false,\n      });\n      tooltipCrosshairsGroup.toBack();\n      this.tooltipCrosshairsGroup = tooltipCrosshairsGroup;\n    }\n    return tooltipCrosshairsGroup;\n  }\n\n  private findItemsFromView(view: View, point: Point) {\n    if (view.getOptions().tooltip === false) {\n      // 如果 view 关闭了 tooltip\n      return [];\n    }\n\n    const tooltipCfg = this.getTooltipCfg();\n    let result = findItemsFromView(view, point, tooltipCfg);\n    // 递归查找，并合并结果\n    for (const childView of view.views) {\n      result = result.concat(this.findItemsFromView(childView, point));\n    }\n\n    return result;\n  }\n\n  // FIXME: hack 方法\n  // 因为 tooltip 的交互是挂载在 Chart 上，所以当chart 上没有绘制 Geometry 的时候，就查找不到数据，并且绘图区域同子 View 的区域不同\n  private getViewWithGeometry(view) {\n    if (view.geometries.length) {\n      return view;\n    }\n\n    return find(view.views, (childView) => this.getViewWithGeometry(childView));\n  }\n\n  /**\n   * 根据用户配置的 items 配置，来进行用户自定义的处理，并返回最终的 items\n   * 默认不做任何处理\n   */\n  private getItemsAfterProcess(originalItems: TooltipItem[]): TooltipItem[] {\n    const { customItems } = this.getTooltipCfg();\n    const fn = customItems ? customItems : (v) => v;\n\n    return fn(originalItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}