{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, isEmpty, isEqual, last } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\n\nfunction getPath(points) {\n  var flag = points[0];\n  var i = 1;\n  var path = [['M', flag.x, flag.y]];\n\n  while (i < points.length) {\n    var c = points[i];\n\n    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n      path.push(['L', c.x, c.y]);\n\n      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n        flag = points[i + 1];\n        path.push(['Z']);\n        path.push(['M', flag.x, flag.y]);\n        i++;\n      }\n    }\n\n    i++;\n  }\n\n  if (!isEqual(last(path), flag)) {\n    path.push(['L', flag.x, flag.y]);\n  }\n\n  path.push(['Z']);\n  return path;\n}\n\nvar PolygonShapeFactory = registerShapeFactory('polygon', {\n  defaultShapeType: 'polygon',\n  getDefaultPoints: function (pointInfo) {\n    var points = [];\n    each(pointInfo.x, function (subX, index) {\n      var subY = pointInfo.y[index];\n      points.push({\n        x: subX,\n        y: subY\n      });\n    });\n    return points;\n  }\n});\nregisterShape('polygon', 'polygon', {\n  draw: function (cfg, container) {\n    if (!isEmpty(cfg.points)) {\n      var shapeAttrs = getStyle(cfg, true, true);\n      var path = this.parsePath(getPath(cfg.points));\n      return container.addShape('path', {\n        attrs: __assign(__assign({}, shapeAttrs), {\n          path: path\n        }),\n        name: 'polygon'\n      });\n    }\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default PolygonShapeFactory;","map":{"version":3,"mappings":"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","names":["each","isEmpty","isEqual","last","registerShape","registerShapeFactory","getStyle","getPath","points","flag","i","path","x","y","length","c","push","PolygonShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","subX","index","subY","draw","cfg","container","shapeAttrs","parsePath","addShape","attrs","name","getMarker","markerCfg","symbol","style","r","fill","color"],"sourceRoot":"","sources":["../../../../src/geometry/shape/polygon/index.ts"],"sourcesContent":["import { each, isEmpty, isEqual, last } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\n\nfunction getPath(points: any[]) {\n  let flag: any = points[0];\n  let i = 1;\n\n  const path = [['M', flag.x, flag.y]];\n\n  while (i < points.length) {\n    const c: any = points[i];\n    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n      path.push(['L', c.x, c.y]);\n      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n        flag = points[i + 1];\n        path.push(['Z']);\n        path.push(['M', flag.x, flag.y]);\n        i++;\n      }\n    }\n    i++;\n  }\n\n  if (!isEqual(last(path), flag)) {\n    path.push(['L', flag.x, flag.y]);\n  }\n\n  path.push(['Z']);\n\n  return path;\n}\n\nconst PolygonShapeFactory = registerShapeFactory('polygon', {\n  defaultShapeType: 'polygon',\n  getDefaultPoints(pointInfo: ShapePoint) {\n    const points = [];\n    each(pointInfo.x as number[], (subX, index) => {\n      const subY = pointInfo.y[index];\n      points.push({\n        x: subX,\n        y: subY,\n      });\n    });\n    return points;\n  },\n});\n\nregisterShape('polygon', 'polygon', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    if (!isEmpty(cfg.points)) {\n      const shapeAttrs = getStyle(cfg, true, true);\n      const path = this.parsePath(getPath(cfg.points));\n      return container.addShape('path', {\n        attrs: {\n          ...shapeAttrs,\n          path,\n        },\n        name: 'polygon',\n      });\n    }\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default PolygonShapeFactory;\n"]},"metadata":{},"sourceType":"module"}