{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { __assign, __extends, __read } from \"tslib\";\nimport { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\n\nvar List =\n/** @class */\nfunction (_super) {\n  __extends(List, _super);\n\n  function List() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  List.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'list',\n      cols: null,\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n\n  List.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n\n  List.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n\n  List.prototype.beforeEachView = function (view, facet) {};\n\n  List.prototype.generateFacets = function (data) {\n    var _this = this;\n\n    var fields = this.cfg.fields;\n    var cols = this.cfg.cols;\n\n    var _a = __read(fields, 1),\n        columnField = _a[0];\n\n    if (!columnField) {\n      throw new Error('No `fields` specified!');\n    }\n\n    var colValues = this.getFieldValues(data, columnField);\n    var count = colValues.length;\n    cols = cols || count; // 每行有几列数据\n    // 总共有几行\n\n    var rows = this.getPageCount(count, cols);\n    var rst = [];\n    colValues.forEach(function (val, index) {\n      // 当前 index 在那个行列\n      var _a = _this.getRowCol(index, cols),\n          row = _a.row,\n          col = _a.col;\n\n      var conditions = [{\n        field: columnField,\n        value: val,\n        values: colValues\n      }];\n      var facetData = filter(data, _this.getFacetDataFilter(conditions));\n      var facet = {\n        type: _this.cfg.type,\n        data: facetData,\n        region: _this.getRegion(rows, cols, col, row),\n        columnValue: val,\n        rowValue: val,\n        columnField: columnField,\n        rowField: null,\n        columnIndex: col,\n        rowIndex: row,\n        columnValuesLength: cols,\n        rowValuesLength: rows,\n        total: count\n      };\n      rst.push(facet);\n    });\n    return rst;\n  };\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  List.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 当是最后一行或者下面没有 view 时文本不显示\n    if (facet.rowIndex !== facet.rowValuesLength - 1 && facet.columnValuesLength * facet.rowIndex + facet.columnIndex + 1 + facet.columnValuesLength <= facet.total) {\n      return __assign(__assign({}, option), {\n        label: null,\n        title: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  List.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * facet title\n   */\n\n\n  List.prototype.renderTitle = function () {\n    var _this = this;\n\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n          view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  /**\n   * 计算分页数\n   * @param total\n   * @param pageSize\n   */\n\n\n  List.prototype.getPageCount = function (total, pageSize) {\n    return Math.floor((total + pageSize - 1) / pageSize);\n  };\n  /**\n   * 索引值在哪一页\n   * @param index\n   * @param pageSize\n   */\n\n\n  List.prototype.getRowCol = function (index, pageSize) {\n    var row = Math.floor(index / pageSize);\n    var col = index % pageSize;\n    return {\n      row: row,\n      col: col\n    };\n  };\n\n  return List;\n}(Facet);\n\nexport default List;","map":{"version":3,"mappings":"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","names":["deepMix","each","filter","get","DIRECTION","getFactTitleConfig","Facet","__extends","List","_super","getDefaultCfg","call","type","cols","showTitle","title","getDefaultTitleCfg","render","cfg","renderTitle","view","facet","processAxis","data","fields","columnField","Error","colValues","getFieldValues","count","length","rows","getPageCount","rst","forEach","val","index","_this","getRowCol","row","col","conditions","field","value","values","facetData","getFacetDataFilter","region","getRegion","columnValue","rowValue","rowField","columnIndex","rowIndex","columnValuesLength","rowValuesLength","total","push","x","axes","option","label","y","facets","formatter","config","position","content","TOP","annotation","text","pageSize","Math","floor"],"sourceRoot":"","sources":["../../src/facet/list.ts"],"sourcesContent":["import { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, ListCfg, ListData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class List extends Facet<ListCfg, ListData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'list',\n      cols: null, // 默认显示一列\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  protected afterEachView(view: View, facet: ListData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: ListData) {}\n\n  protected generateFacets(data: Datum[]): ListData[] {\n    const { fields } = this.cfg;\n    let { cols } = this.cfg;\n\n    const [columnField] = fields;\n    if (!columnField) {\n      throw new Error('No `fields` specified!');\n    }\n\n    const colValues = this.getFieldValues(data, columnField);\n\n    const count = colValues.length;\n    cols = cols || count; // 每行有几列数据\n\n    // 总共有几行\n    const rows = this.getPageCount(count, cols);\n    const rst = [];\n\n    colValues.forEach((val, index) => {\n      // 当前 index 在那个行列\n      const { row, col } = this.getRowCol(index, cols);\n\n      const conditions = [{ field: columnField, value: val, values: colValues }];\n\n      const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n      const facet: ListData = {\n        type: this.cfg.type,\n        data: facetData,\n        region: this.getRegion(rows, cols, col, row),\n\n        columnValue: val,\n        rowValue: val,\n        columnField,\n        rowField: null,\n        columnIndex: col,\n        rowIndex: row,\n        columnValuesLength: cols,\n        rowValuesLength: rows,\n\n        total: count,\n      };\n\n      rst.push(facet);\n    });\n\n    return rst;\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: ListData): object {\n    // 当是最后一行或者下面没有 view 时文本不显示\n    if (\n      facet.rowIndex !== facet.rowValuesLength - 1 &&\n      facet.columnValuesLength * facet.rowIndex + facet.columnIndex + 1 + facet.columnValuesLength <= facet.total\n    ) {\n      return {\n        ...option,\n        label: null,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: ListData): object {\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: ListData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  /**\n   * 计算分页数\n   * @param total\n   * @param pageSize\n   */\n  private getPageCount(total: number, pageSize: number): number {\n    return Math.floor((total + pageSize - 1) / pageSize);\n  }\n\n  /**\n   * 索引值在哪一页\n   * @param index\n   * @param pageSize\n   */\n  private getRowCol(index: number, pageSize: number) {\n    const row = Math.floor(index / pageSize);\n    const col = index % pageSize;\n\n    return { row, col };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}