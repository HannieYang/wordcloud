{"ast":null,"code":"import { MIN_CHART_HEIGHT, MIN_CHART_WIDTH } from '../constant';\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\n\nfunction getElementSize(ele) {\n  var style = getComputedStyle(ele);\n  return {\n    width: (ele.clientWidth || parseInt(style.width, 10)) - parseInt(style.paddingLeft, 10) - parseInt(style.paddingRight, 10),\n    height: (ele.clientHeight || parseInt(style.height, 10)) - parseInt(style.paddingTop, 10) - parseInt(style.paddingBottom, 10)\n  };\n}\n/**\n * is value a valid number\n * @param v the input value\n * @returns whether it is a number\n */\n\n\nfunction isNumber(v) {\n  return typeof v === 'number' && !isNaN(v);\n}\n/**\n * @ignore\n * calculate the chart size\n * @param ele DOM element\n * @param autoFit should auto fit\n * @param width chart width which is set by user\n * @param height chart height which is set by user\n * @returns the chart width and height\n */\n\n\nexport function getChartSize(ele, autoFit, width, height) {\n  var w = width;\n  var h = height;\n\n  if (autoFit) {\n    var size = getElementSize(ele);\n    w = size.width ? size.width : w;\n    h = size.height ? size.height : h;\n  }\n\n  return {\n    width: Math.max(isNumber(w) ? w : MIN_CHART_WIDTH, MIN_CHART_WIDTH),\n    height: Math.max(isNumber(h) ? h : MIN_CHART_HEIGHT, MIN_CHART_HEIGHT)\n  };\n}\n/**\n * @ignore\n * remove html element from its parent\n * @param dom\n */\n\nexport function removeDom(dom) {\n  var parent = dom.parentNode;\n\n  if (parent) {\n    parent.removeChild(dom);\n  }\n}\n/** @ignore */\n\nexport { createDom, modifyCSS } from '@antv/dom-util';","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,EAA2BC,eAA3B,QAAkD,aAAlD;AAGA;;;;;;AAKA,SAASC,cAAT,CAAwBC,GAAxB,EAAwC;EACtC,IAAMC,KAAK,GAAGC,gBAAgB,CAACF,GAAD,CAA9B;EAEA,OAAO;IACLG,KAAK,EACH,CAACH,GAAG,CAACI,WAAJ,IAAmBC,QAAQ,CAACJ,KAAK,CAACE,KAAP,EAAc,EAAd,CAA5B,IACAE,QAAQ,CAACJ,KAAK,CAACK,WAAP,EAAoB,EAApB,CADR,GAEAD,QAAQ,CAACJ,KAAK,CAACM,YAAP,EAAqB,EAArB,CAJL;IAKLC,MAAM,EACJ,CAACR,GAAG,CAACS,YAAJ,IAAoBJ,QAAQ,CAACJ,KAAK,CAACO,MAAP,EAAe,EAAf,CAA7B,IACAH,QAAQ,CAACJ,KAAK,CAACS,UAAP,EAAmB,EAAnB,CADR,GAEAL,QAAQ,CAACJ,KAAK,CAACU,aAAP,EAAsB,EAAtB;EARL,CAAP;AAUD;AAED;;;;;;;AAKA,SAASC,QAAT,CAAkBC,CAAlB,EAAwB;EACtB,OAAO,OAAOA,CAAP,KAAa,QAAb,IAAyB,CAACC,KAAK,CAACD,CAAD,CAAtC;AACD;AAED;;;;;;;;;;;AASA,OAAM,SAAUE,YAAV,CAAuBf,GAAvB,EAAyCgB,OAAzC,EAA2Db,KAA3D,EAA0EK,MAA1E,EAAwF;EAC5F,IAAIS,CAAC,GAAGd,KAAR;EACA,IAAIe,CAAC,GAAGV,MAAR;;EAEA,IAAIQ,OAAJ,EAAa;IACX,IAAMG,IAAI,GAAGpB,cAAc,CAACC,GAAD,CAA3B;IAEAiB,CAAC,GAAGE,IAAI,CAAChB,KAAL,GAAagB,IAAI,CAAChB,KAAlB,GAA0Bc,CAA9B;IACAC,CAAC,GAAGC,IAAI,CAACX,MAAL,GAAcW,IAAI,CAACX,MAAnB,GAA4BU,CAAhC;EACD;;EAED,OAAO;IACLf,KAAK,EAAEiB,IAAI,CAACC,GAAL,CAAST,QAAQ,CAACK,CAAD,CAAR,GAAcA,CAAd,GAAkBnB,eAA3B,EAA4CA,eAA5C,CADF;IAELU,MAAM,EAAEY,IAAI,CAACC,GAAL,CAAST,QAAQ,CAACM,CAAD,CAAR,GAAcA,CAAd,GAAkBrB,gBAA3B,EAA6CA,gBAA7C;EAFH,CAAP;AAID;AAED;;;;;;AAKA,OAAM,SAAUyB,SAAV,CAAoBC,GAApB,EAAoC;EACxC,IAAMC,MAAM,GAAGD,GAAG,CAACE,UAAnB;;EAEA,IAAID,MAAJ,EAAY;IACVA,MAAM,CAACE,WAAP,CAAmBH,GAAnB;EACD;AACF;AAED;;AACA,SAASI,SAAT,EAAoBC,SAApB,QAAqC,gBAArC","names":["MIN_CHART_HEIGHT","MIN_CHART_WIDTH","getElementSize","ele","style","getComputedStyle","width","clientWidth","parseInt","paddingLeft","paddingRight","height","clientHeight","paddingTop","paddingBottom","isNumber","v","isNaN","getChartSize","autoFit","w","h","size","Math","max","removeDom","dom","parent","parentNode","removeChild","createDom","modifyCSS"],"sourceRoot":"","sources":["../../src/util/dom.ts"],"sourcesContent":["import { MIN_CHART_HEIGHT, MIN_CHART_WIDTH } from '../constant';\nimport { Size } from '../interface';\n\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\nfunction getElementSize(ele: HTMLElement): Size {\n  const style = getComputedStyle(ele);\n\n  return {\n    width:\n      (ele.clientWidth || parseInt(style.width, 10)) -\n      parseInt(style.paddingLeft, 10) -\n      parseInt(style.paddingRight, 10),\n    height:\n      (ele.clientHeight || parseInt(style.height, 10)) -\n      parseInt(style.paddingTop, 10) -\n      parseInt(style.paddingBottom, 10),\n  };\n}\n\n/**\n * is value a valid number\n * @param v the input value\n * @returns whether it is a number\n */\nfunction isNumber(v: any): boolean {\n  return typeof v === 'number' && !isNaN(v);\n}\n\n/**\n * @ignore\n * calculate the chart size\n * @param ele DOM element\n * @param autoFit should auto fit\n * @param width chart width which is set by user\n * @param height chart height which is set by user\n * @returns the chart width and height\n */\nexport function getChartSize(ele: HTMLElement, autoFit: boolean, width: number, height: number): Size {\n  let w = width;\n  let h = height;\n\n  if (autoFit) {\n    const size = getElementSize(ele);\n\n    w = size.width ? size.width : w;\n    h = size.height ? size.height : h;\n  }\n\n  return {\n    width: Math.max(isNumber(w) ? w : MIN_CHART_WIDTH, MIN_CHART_WIDTH),\n    height: Math.max(isNumber(h) ? h : MIN_CHART_HEIGHT, MIN_CHART_HEIGHT),\n  };\n}\n\n/**\n * @ignore\n * remove html element from its parent\n * @param dom\n */\nexport function removeDom(dom: HTMLElement) {\n  const parent = dom.parentNode;\n\n  if (parent) {\n    parent.removeChild(dom);\n  }\n}\n\n/** @ignore */\nexport { createDom, modifyCSS } from '@antv/dom-util';\n"]},"metadata":{},"sourceType":"module"}