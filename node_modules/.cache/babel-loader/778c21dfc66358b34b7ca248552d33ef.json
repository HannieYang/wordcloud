{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\n\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\n\nvar Path =\n/** @class */\nfunction (_super) {\n  __extends(Path, _super);\n\n  function Path(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.type = 'path';\n    _this.shapeType = 'line';\n    var _a = cfg.connectNulls,\n        connectNulls = _a === void 0 ? false : _a,\n        _b = cfg.showSinglePoint,\n        showSinglePoint = _b === void 0 ? true : _b;\n    _this.connectNulls = connectNulls;\n    _this.showSinglePoint = showSinglePoint;\n    return _this;\n  }\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n\n\n  Path.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    var e_1, _a, e_2, _b, e_3, _c;\n\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    } // Path 的每个 element 对应一组数据\n\n\n    var keyData = new Map();\n    var keyIndex = new Map();\n    var keys = [];\n    var index = 0;\n\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n\n    this.elements = new Array(index);\n\n    var _d = diff(this.lastElementsMap, keys),\n        added = _d.added,\n        updated = _d.updated,\n        removed = _d.removed;\n\n    try {\n      for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n        var key = added_1_1.value;\n        var mappingData = keyData.get(key);\n        var shapeFactory = this.getShapeFactory();\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var i = keyIndex.get(key);\n        var element = new Element({\n          shapeFactory: shapeFactory,\n          container: this.container,\n          offscreenGroup: this.getOffscreenGroup(),\n          elementIndex: i\n        });\n        element.geometry = this;\n        element.animate = this.animateOption;\n        element.draw(shapeCfg, isUpdate); // 绘制 shape\n\n        this.elementsMap[key] = element;\n        this.elements[i] = element;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    try {\n      for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n        var key = updated_1_1.value;\n        var mappingData = keyData.get(key);\n        var element = this.lastElementsMap[key];\n        var i = keyIndex.get(key);\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var preShapeCfg = element.getModel();\n\n        if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n          element.animate = this.animateOption; // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n\n          element.update(shapeCfg); // 更新对应的 element\n        }\n\n        this.elementsMap[key] = element;\n        this.elements[i] = element;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    try {\n      for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n        var key = removed_1_1.value;\n        var element = this.lastElementsMap[key]; // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n\n        element.animate = this.animateOption;\n        element.destroy();\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n\n\n  Path.prototype.getPointsAndData = function (mappingData) {\n    var points = [];\n    var data = [];\n\n    for (var i = 0, len = mappingData.length; i < len; i++) {\n      var obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points: points,\n      data: data\n    };\n  };\n\n  Path.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n\n    var _a = this.getPointsAndData(mappingData),\n        points = _a.points,\n        data = _a.data;\n\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n    return shapeCfg;\n  };\n\n  return Path;\n}(Geometry);\n\nexport default Path;","map":{"version":3,"mappings":"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","names":["FIELD_ORIGIN","Geometry","Element","isModelChange","diff","__extends","cfg","_super","_this","_a","_b","showSinglePoint","connectNulls","Path","mappingDataArray","isUpdate","keyData","Map","keyIndex","keys","index","i","length","mappingData","key","getElementId","push","set","elements","Array","lastElementsMap","added","updated","removed","added_1_1","get","shapeFactory","getShapeFactory","shapeCfg","getShapeInfo","element","container","offscreenGroup","getOffscreenGroup","elementIndex","geometry","animate","animateOption","draw","elementsMap","updated_1_1","preShapeCfg","getModel","isCoordinateChanged","update","removed_1_1","destroy","points","data","len","obj","x","y","getDrawCfg","getPointsAndData","isStack","getAdjust"],"sourceRoot":"","sources":["../../src/geometry/path.ts"],"sourcesContent":["import { FIELD_ORIGIN } from '../constant';\nimport { MappingDatum, ShapeInfo } from '../interface';\nimport Geometry, { GeometryCfg } from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n\n/** Path 构造函数参数类型 */\nexport interface PathCfg extends GeometryCfg {\n  /** 是否连接空值 */\n  connectNulls?: boolean;\n  /** 单个孤立数据点是否展示 */\n  showSinglePoint?: boolean;\n}\n\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nexport default class Path extends Geometry {\n  public readonly type: string = 'path';\n  public readonly shapeType: string = 'line';\n  /** 是否连接空值 */\n  public connectNulls: boolean;\n  /** 单个孤立数据点是否展示 */\n  public showSinglePoint: boolean;\n\n  constructor(cfg: PathCfg) {\n    super(cfg);\n\n    const { connectNulls = false, showSinglePoint = true } = cfg;\n    this.connectNulls = connectNulls;\n    this.showSinglePoint = showSinglePoint;\n  }\n\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  protected updateElements(mappingDataArray: MappingDatum[][], isUpdate: boolean = false) {\n    // Path 的每个 element 对应一组数据\n    const keyData = new Map<string, MappingDatum[]>();\n    const keyIndex = new Map<string, number>();\n    const keys: string[] = [];\n\n    let index = 0;\n    for (let i = 0; i < mappingDataArray.length; i++) {\n      const mappingData = mappingDataArray[i];\n      const key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n\n    this.elements = new Array(index);\n\n    const { added, updated, removed } = diff(this.lastElementsMap, keys);\n\n    for (const key of added) {\n      const mappingData = keyData.get(key);\n      const shapeFactory = this.getShapeFactory();\n      const shapeCfg = this.getShapeInfo(mappingData);\n      const i = keyIndex.get(key);\n      const element = new Element({\n        shapeFactory,\n        container: this.container,\n        offscreenGroup: this.getOffscreenGroup(),\n        elementIndex: i,\n      });\n      element.geometry = this;\n      element.animate = this.animateOption;\n      element.draw(shapeCfg, isUpdate); // 绘制 shape\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (const key of updated) {\n      const mappingData = keyData.get(key);\n      const element = this.lastElementsMap[key];\n      const i = keyIndex.get(key);\n      const shapeCfg = this.getShapeInfo(mappingData);\n      const preShapeCfg = element.getModel();\n      if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n        element.animate = this.animateOption;\n        // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n        element.update(shapeCfg); // 更新对应的 element\n      }\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (const key of removed) {\n      const element = this.lastElementsMap[key];\n      // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n      element.animate = this.animateOption;\n      element.destroy();\n    }\n  }\n\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n  protected getPointsAndData(mappingData: MappingDatum[]) {\n    const points = [];\n    const data = [];\n\n    for (let i = 0, len = mappingData.length; i < len; i++) {\n      const obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y,\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points,\n      data,\n    };\n  }\n\n  private getShapeInfo(mappingData: MappingDatum[]): ShapeInfo {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n    const { points, data } = this.getPointsAndData(mappingData);\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n\n    return shapeCfg;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}