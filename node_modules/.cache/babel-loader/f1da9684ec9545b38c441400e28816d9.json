{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport { deepMix, each, isFunction } from '@antv/util';\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\n\nvar LinkByColor =\n/** @class */\nfunction (_super) {\n  __extends(LinkByColor, _super);\n\n  function LinkByColor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.cache = {};\n    return _this;\n  } // 获取颜色对应的 scale\n\n\n  LinkByColor.prototype.getColorScale = function (view, element) {\n    var colorAttr = element.geometry.getAttribute('color');\n\n    if (!colorAttr) {\n      return null;\n    }\n\n    var scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  }; // 获取连接的 path\n\n\n  LinkByColor.prototype.getLinkPath = function (element, nextElement) {\n    var view = this.context.view;\n    var isTransposed = view.getCoordinate().isTransposed;\n    var bbox = element.shape.getCanvasBBox();\n    var nextBBox = nextElement.shape.getCanvasBBox();\n    var path = isTransposed ? [['M', bbox.minX, bbox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', nextBBox.maxX, nextBBox.maxY], ['L', bbox.maxX, bbox.minY], ['Z']] : [['M', bbox.maxX, bbox.minY], ['L', nextBBox.minX, nextBBox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', bbox.maxX, bbox.maxY], ['Z']];\n    return path;\n  }; // 添加连接的图形\n\n\n  LinkByColor.prototype.addLinkShape = function (group, element, nextElement, activeStyle) {\n    var style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill')\n    };\n    group.addShape({\n      type: 'path',\n      attrs: __assign(__assign({}, deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle)), {\n        path: this.getLinkPath(element, nextElement)\n      })\n    });\n  }; // 使用图形连接\n\n\n  LinkByColor.prototype.linkByElement = function (element, activeStyle) {\n    var _this = this;\n\n    var view = this.context.view;\n    var scale = this.getColorScale(view, element);\n\n    if (!scale) {\n      return;\n    }\n\n    var value = getElementValue(element, scale.field);\n\n    if (!this.cache[value]) {\n      var elements_1 = getElementsByField(view, scale.field, value);\n      var linkGroup = this.linkGroup;\n      var group_1 = linkGroup.addGroup();\n      this.cache[value] = group_1; // 缓存\n\n      var count_1 = elements_1.length;\n      each(elements_1, function (el, index) {\n        if (index < count_1 - 1) {\n          var nextEl = elements_1[index + 1];\n\n          _this.addLinkShape(group_1, el, nextEl, activeStyle);\n        }\n      });\n    }\n  }; // 移除连接\n\n\n  LinkByColor.prototype.removeLink = function (element) {\n    var scale = this.getColorScale(this.context.view, element);\n\n    if (!scale) {\n      return;\n    }\n\n    var value = getElementValue(element, scale.field);\n\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  };\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n\n\n  LinkByColor.prototype.link = function (args) {\n    var context = this.context;\n\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false\n      });\n    }\n\n    var element = getCurrentElement(context);\n\n    if (element) {\n      this.linkByElement(element, args === null || args === void 0 ? void 0 : args.style);\n    }\n  };\n  /**\n   * 取消连接 elements\n   */\n\n\n  LinkByColor.prototype.unlink = function () {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      this.removeLink(element);\n    }\n  };\n  /**\n   * 清除所有连接\n   */\n\n\n  LinkByColor.prototype.clear = function () {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n\n    this.cache = {};\n  };\n  /**\n   * 销毁\n   */\n\n\n  LinkByColor.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  };\n\n  return LinkByColor;\n}(Action);\n\nexport default LinkByColor;","map":{"version":3,"mappings":"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","names":["Action","getCurrentElement","getElementValue","getElementsByField","deepMix","each","isFunction","__extends","_this","LinkByColor","view","element","colorAttr","geometry","getAttribute","scale","getScaleByField","getFields","nextElement","context","getCoordinate","isTransposed","bbox","shape","getCanvasBBox","nextBBox","path","minX","minY","maxY","maxX","group","activeStyle","style","opacity","fill","attr","addShape","type","attrs","getLinkPath","getColorScale","value","field","cache","elements_1","linkGroup","group_1","addGroup","count_1","length","el","index","nextEl","addLinkShape","remove","args","foregroundGroup","id","capture","linkByElement","removeLink","clear","_super","destroy","call"],"sourceRoot":"","sources":["../../../../src/interaction/action/element/link-by-color.ts"],"sourcesContent":["import Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport Element from '../../../geometry/element/';\nimport { deepMix, each, isFunction } from '@antv/util';\nimport { LooseObject } from '../../../interface';\nimport { IGroup, ShapeAttrs } from '../../../dependents';\n\ntype LinkActiveStyle = ShapeAttrs | ((style: ShapeAttrs, Element: Element) => ShapeAttrs);\n\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\nclass LinkByColor extends Action {\n  private linkGroup: IGroup;\n  private cache: LooseObject = {};\n  // 获取颜色对应的 scale\n  private getColorScale(view, element) {\n    const colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    const scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  }\n  // 获取连接的 path\n  private getLinkPath(element: Element, nextElement: Element) {\n    const view = this.context.view;\n    const { isTransposed } = view.getCoordinate();\n    const bbox = element.shape.getCanvasBBox();\n    const nextBBox = nextElement.shape.getCanvasBBox();\n    const path = isTransposed\n      ? [\n          ['M', bbox.minX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', nextBBox.maxX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.minY],\n          ['Z'],\n        ]\n      : [\n          ['M', bbox.maxX, bbox.minY],\n          ['L', nextBBox.minX, nextBBox.minY],\n          ['L', nextBBox.minX, nextBBox.maxY],\n          ['L', bbox.maxX, bbox.maxY],\n          ['Z'],\n        ];\n    return path;\n  }\n  // 添加连接的图形\n  private addLinkShape(group: IGroup, element: Element, nextElement: Element, activeStyle?: LinkActiveStyle) {\n    const style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill'),\n    };\n    group.addShape({\n      type: 'path',\n      attrs: {\n        ...deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle),\n        path: this.getLinkPath(element, nextElement),\n      },\n    });\n  }\n  // 使用图形连接\n  private linkByElement(element: Element, activeStyle?: LinkActiveStyle) {\n    const view = this.context.view;\n    const scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      const elements = getElementsByField(view, scale.field, value);\n      const linkGroup = this.linkGroup;\n      const group = linkGroup.addGroup();\n      this.cache[value] = group; // 缓存\n      const count = elements.length;\n      each(elements, (el, index) => {\n        if (index < count - 1) {\n          const nextEl = elements[index + 1];\n          this.addLinkShape(group, el, nextEl, activeStyle);\n        }\n      });\n    }\n  }\n  // 移除连接\n  private removeLink(element) {\n    const scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    const value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  }\n\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n  public link(args?: { style: LinkActiveStyle }) {\n    const context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false,\n      });\n    }\n    const element = getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element, args?.style);\n    }\n  }\n\n  /**\n   * 取消连接 elements\n   */\n  public unlink() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  }\n\n  /**\n   * 清除所有连接\n   */\n  public clear() {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n    this.cache = {};\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    super.destroy();\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  }\n}\nexport default LinkByColor;\n"]},"metadata":{},"sourceType":"module"}