{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\n/**\n * Sibling filter\n * @ignore\n */\n\nvar SiblingFilter =\n/** @class */\nfunction (_super) {\n  __extends(SiblingFilter, _super);\n\n  function SiblingFilter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.byRecord = false;\n    return _this;\n  }\n  /**\n   * 过滤隐藏图形\n   */\n\n\n  SiblingFilter.prototype.filter = function () {\n    // 仅考虑 mask 导致的过滤\n    if (isMask(this.context)) {\n      if (this.byRecord) {\n        this.filterByRecord();\n      } else {\n        this.filterByBBox();\n      }\n    }\n  }; // 根据框选的记录来做过滤\n\n\n  SiblingFilter.prototype.filterByRecord = function () {\n    var view = this.context.view;\n    var maskElements = getMaskedElements(this.context, 10);\n\n    if (!maskElements) {\n      return;\n    }\n\n    var xFiled = view.getXScale().field;\n    var yField = view.getYScales()[0].field;\n    var records = maskElements.map(function (el) {\n      return el.getModel().data;\n    });\n    var siblings = getSilbings(view);\n    each(siblings, function (sibling) {\n      var elements = getElements(sibling);\n      each(elements, function (el) {\n        var record = el.getModel().data; // records.includes(record) 不生效，应该是数据的引用被改了\n\n        if (isInRecords(records, record, xFiled, yField)) {\n          el.show();\n        } else {\n          el.hide();\n        }\n      });\n    });\n  }; // 根据被框选的包围盒做过滤\n\n\n  SiblingFilter.prototype.filterByBBox = function () {\n    var _this = this;\n\n    var view = this.context.view;\n    var siblings = getSilbings(view);\n    each(siblings, function (sibling) {\n      var maskElements = getSiblingMaskElements(_this.context, sibling, 10);\n      var elements = getElements(sibling);\n\n      if (maskElements) {\n        // mask 过小时返回为 null，不能是空数组，否则同未框选到混淆\n        each(elements, function (el) {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    });\n  };\n  /**\n   * 清理所有隐藏的图形\n   */\n\n\n  SiblingFilter.prototype.reset = function () {\n    var siblings = getSilbings(this.context.view);\n    each(siblings, function (sibling) {\n      var elements = getElements(sibling);\n      each(elements, function (el) {\n        el.show();\n      });\n    });\n  };\n\n  return SiblingFilter;\n}(Action);\n\nexport default SiblingFilter;","map":{"version":3,"mappings":"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","names":["each","Action","getElements","getMaskedElements","getSiblingMaskElements","getSilbings","isInRecords","isMask","__extends","_this","SiblingFilter","context","byRecord","filterByRecord","filterByBBox","view","maskElements","xFiled","getXScale","field","yField","getYScales","records","map","el","getModel","data","siblings","sibling","elements","record","show","hide","includes"],"sourceRoot":"","sources":["../../../../src/interaction/action/element/sibling-filter.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport Action from '../base';\nimport { getElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\n\n/**\n * Sibling filter\n * @ignore\n */\nclass SiblingFilter extends Action {\n  protected byRecord = false;\n  /**\n   * 过滤隐藏图形\n   */\n  public filter() {\n    // 仅考虑 mask 导致的过滤\n    if (isMask(this.context)) {\n      if (this.byRecord) {\n        this.filterByRecord();\n      } else {\n        this.filterByBBox();\n      }\n    }\n  }\n  // 根据框选的记录来做过滤\n  private filterByRecord() {\n    const view = this.context.view;\n    const maskElements = getMaskedElements(this.context, 10);\n    if (!maskElements) {\n      return;\n    }\n    const xFiled = view.getXScale().field;\n    const yField = view.getYScales()[0].field;\n    const records = maskElements.map((el) => {\n      return el.getModel().data;\n    });\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const elements = getElements(sibling);\n      each(elements, (el) => {\n        const record = el.getModel().data;\n        // records.includes(record) 不生效，应该是数据的引用被改了\n        if (isInRecords(records, record, xFiled, yField)) {\n          el.show();\n        } else {\n          el.hide();\n        }\n      });\n    });\n  }\n\n  // 根据被框选的包围盒做过滤\n  private filterByBBox() {\n    const view = this.context.view;\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const maskElements = getSiblingMaskElements(this.context, sibling, 10);\n      const elements = getElements(sibling);\n      if (maskElements) {\n        // mask 过小时返回为 null，不能是空数组，否则同未框选到混淆\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * 清理所有隐藏的图形\n   */\n  public reset() {\n    const siblings = getSilbings(this.context.view);\n    each(siblings, (sibling) => {\n      const elements = getElements(sibling);\n      each(elements, (el) => {\n        el.show();\n      });\n    });\n  }\n}\n\nexport default SiblingFilter;\n"]},"metadata":{},"sourceType":"module"}