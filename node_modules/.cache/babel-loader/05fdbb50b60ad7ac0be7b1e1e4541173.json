{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { deepMix, each, find, get, head, isBoolean, last } from '@antv/util';\nimport { COMPONENT_MAX_VIEW_PERCENTAGE, COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { CategoryLegend, ContinuousLegend } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { omit } from '../../util/helper';\nimport { getCustomLegendItems, getLegendItems, getLegendLayout, getLegendThemeCfg } from '../../util/legend';\nimport { getName } from '../../util/scale';\nimport { Controller } from './base';\n/**\n * 从配置中获取单个字段的 legend 配置\n * @param legends\n * @param field\n * @returns the option of one legend field\n */\n\nfunction getLegendOption(legends, field) {\n  if (isBoolean(legends)) {\n    return legends === false ? false : {};\n  }\n\n  return get(legends, [field], legends);\n}\n\nfunction getDirection(legendOption) {\n  return get(legendOption, 'position', DIRECTION.BOTTOM);\n}\n/**\n * @ignore\n * legend Controller\n */\n\n\nvar Legend =\n/** @class */\nfunction (_super) {\n  __extends(Legend, _super);\n\n  function Legend(view) {\n    var _this = _super.call(this, view) || this;\n\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    return _this;\n  }\n\n  Object.defineProperty(Legend.prototype, \"name\", {\n    get: function () {\n      return 'legend';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Legend.prototype.init = function () {};\n  /**\n   * render the legend component by legend options\n   */\n\n\n  Legend.prototype.render = function () {\n    // 和 update 逻辑保持一致\n    this.update();\n  };\n  /**\n   * layout legend\n   * 计算出 legend 的 direction 位置 x, y\n   */\n\n\n  Legend.prototype.layout = function () {\n    var _this = this;\n\n    this.layoutBBox = this.view.viewBBox;\n    each(this.components, function (co) {\n      var component = co.component,\n          direction = co.direction;\n      var layout = getLegendLayout(direction);\n      var maxWidthRatio = component.get('maxWidthRatio');\n      var maxHeightRatio = component.get('maxHeightRatio');\n\n      var maxSize = _this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n\n      var maxWidth = component.get('maxWidth');\n      var maxHeight = component.get('maxHeight'); // 先更新 maxSize，更新 layoutBBox，以便计算正确的 x y\n\n      component.update({\n        maxWidth: Math.min(maxSize.maxWidth, maxWidth || 0),\n        maxHeight: Math.min(maxSize.maxHeight, maxHeight || 0)\n      });\n      var padding = component.get('padding');\n      var bboxObject = component.getLayoutBBox(); // 这里只需要他的 width、height 信息做位置调整\n\n      var bbox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(padding);\n\n      var _a = __read(directionToPosition(_this.view.viewBBox, bbox, direction), 2),\n          x1 = _a[0],\n          y1 = _a[1];\n\n      var _b = __read(directionToPosition(_this.layoutBBox, bbox, direction), 2),\n          x2 = _b[0],\n          y2 = _b[1];\n\n      var x = 0;\n      var y = 0; // 因为 legend x y 要和 coordinateBBox 对齐，所以要做一个简单的判断\n\n      if (direction.startsWith('top') || direction.startsWith('bottom')) {\n        x = x1;\n        y = y2;\n      } else {\n        x = x2;\n        y = y1;\n      } // 更新位置\n\n\n      component.setLocation({\n        x: x + padding[3],\n        y: y + padding[0]\n      });\n      _this.layoutBBox = _this.layoutBBox.cut(bbox, direction);\n    });\n  };\n  /**\n   * legend 的更新逻辑\n   */\n\n\n  Legend.prototype.update = function () {\n    var _this = this;\n\n    this.option = this.view.getOptions().legends; // 已经处理过的 legend\n\n    var updated = {};\n\n    var eachLegend = function (geometry, attr, scale) {\n      var id = _this.getId(scale.field);\n\n      var existCo = _this.getComponentById(id); // 存在则 update\n\n\n      if (existCo) {\n        var cfg = void 0;\n        var legendOption = getLegendOption(_this.option, scale.field); // if the legend option is not false, means legend should be created.\n\n        if (legendOption !== false) {\n          if (get(legendOption, 'custom')) {\n            cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n          } else {\n            if (scale.isLinear) {\n              // linear field, create continuous legend\n              cfg = _this.getContinuousCfg(geometry, attr, scale, legendOption);\n            } else if (scale.isCategory) {\n              // category field, create category legend\n              cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption);\n            }\n          }\n        } // 如果 cfg 为空，则不在 updated 标记，那么会在后面逻辑中删除\n\n\n        if (cfg) {\n          // omit 掉一些属性，比如 container 等\n          omit(cfg, ['container']);\n          existCo.direction = getDirection(legendOption);\n          existCo.component.update(cfg); // 标记为新的\n\n          updated[id] = true;\n        }\n      } else {\n        // 不存在则 create\n        var legend = _this.createFieldLegend(geometry, attr, scale);\n\n        if (legend) {\n          legend.component.init();\n\n          _this.components.push(legend); // 标记为新的\n\n\n          updated[id] = true;\n        }\n      }\n    }; // 全局自定义图例\n\n\n    if (get(this.option, 'custom')) {\n      var id = 'global-custom';\n      var existCo = this.getComponentById(id);\n\n      if (existCo) {\n        var customCfg = this.getCategoryCfg(undefined, undefined, undefined, this.option, true);\n        omit(customCfg, ['container']);\n        existCo.component.update(customCfg);\n        updated[id] = true;\n      } else {\n        var component = this.createCustomLegend(undefined, undefined, undefined, this.option);\n\n        if (component) {\n          component.init();\n          var layer = LAYER.FORE;\n          var direction = getDirection(this.option);\n          this.components.push({\n            id: id,\n            component: component,\n            layer: layer,\n            direction: direction,\n            type: COMPONENT_TYPE.LEGEND,\n            extra: undefined\n          }); // 标记为更新\n\n          updated[id] = true;\n        }\n      }\n    } else {\n      // 遍历处理每一个创建逻辑\n      this.loopLegends(eachLegend);\n    } // 处理完成之后，销毁删除的\n    // 不在处理中的\n\n\n    var components = [];\n    each(this.getComponents(), function (co) {\n      if (updated[co.id]) {\n        components.push(co);\n      } else {\n        co.component.destroy();\n      }\n    }); // 更新当前已有的 components\n\n    this.components = components;\n  };\n\n  Legend.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this.container.clear();\n  };\n\n  Legend.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.container.remove(true);\n  };\n  /**\n   * 递归获取所有的 Geometry\n   */\n\n\n  Legend.prototype.getGeometries = function (view) {\n    var _this = this;\n\n    var geometries = view.geometries;\n    each(view.views, function (v) {\n      geometries = geometries.concat(_this.getGeometries(v));\n    });\n    return geometries;\n  };\n  /**\n   * 遍历 Geometry，处理 legend 逻辑\n   * @param doEach 每个 loop 中的处理方法\n   */\n\n\n  Legend.prototype.loopLegends = function (doEach) {\n    var isRootView = this.view.getRootView() === this.view; // 非根 view，不处理 legend\n\n    if (!isRootView) {\n      return;\n    } // 递归 view 中所有的 Geometry，进行创建 legend\n\n\n    var geometries = this.getGeometries(this.view);\n    var looped = {}; // 防止一个字段创建两个 legend\n\n    each(geometries, function (geometry) {\n      var attributes = geometry.getGroupAttributes();\n      each(attributes, function (attr) {\n        var scale = attr.getScale(attr.type); // 如果在视觉通道上映射常量值，如 size(2) shape('circle') 不创建 legend\n\n        if (!scale || scale.type === 'identity' || looped[scale.field]) {\n          return;\n        }\n\n        doEach(geometry, attr, scale);\n        looped[scale.field] = true;\n      });\n    });\n  };\n  /**\n   * 创建一个 legend\n   * @param geometry\n   * @param attr\n   * @param scale\n   */\n\n\n  Legend.prototype.createFieldLegend = function (geometry, attr, scale) {\n    var component;\n    var legendOption = getLegendOption(this.option, scale.field);\n    var layer = LAYER.FORE;\n    var direction = getDirection(legendOption); // if the legend option is not false, means legend should be created.\n\n    if (legendOption !== false) {\n      if (get(legendOption, 'custom')) {\n        component = this.createCustomLegend(geometry, attr, scale, legendOption);\n      } else {\n        if (scale.isLinear) {\n          // linear field, create continuous legend\n          component = this.createContinuousLegend(geometry, attr, scale, legendOption);\n        } else if (scale.isCategory) {\n          // category field, create category legend\n          component = this.createCategoryLegend(geometry, attr, scale, legendOption);\n        }\n      }\n    }\n\n    if (component) {\n      component.set('field', scale.field);\n      return {\n        id: this.getId(scale.field),\n        component: component,\n        layer: layer,\n        direction: direction,\n        type: COMPONENT_TYPE.LEGEND,\n        extra: {\n          scale: scale\n        }\n      };\n    }\n  };\n  /**\n   * 自定义图例使用 category 图例去渲染\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n\n\n  Legend.prototype.createCustomLegend = function (geometry, attr, scale, legendOption) {\n    // 直接使用 分类图例渲染\n    var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n    return new CategoryLegend(cfg);\n  };\n  /**\n   * 创建连续图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n\n\n  Legend.prototype.createContinuousLegend = function (geometry, attr, scale, legendOption) {\n    var cfg = this.getContinuousCfg(geometry, attr, scale, omit(legendOption, ['value']));\n    return new ContinuousLegend(cfg);\n  };\n  /**\n   * 创建分类图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n\n\n  Legend.prototype.createCategoryLegend = function (geometry, attr, scale, legendOption) {\n    var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n    return new CategoryLegend(cfg);\n  };\n  /**\n   * 获得连续图例的配置\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n\n\n  Legend.prototype.getContinuousCfg = function (geometry, attr, scale, legendOption) {\n    var ticks = scale.getTicks();\n    var containMin = find(ticks, function (tick) {\n      return tick.value === 0;\n    });\n    var containMax = find(ticks, function (tick) {\n      return tick.value === 1;\n    });\n    var items = ticks.map(function (tick) {\n      var value = tick.value,\n          tickValue = tick.tickValue;\n      var attrValue = attr.mapping(scale.invert(value)).join('');\n      return {\n        value: tickValue,\n        attrValue: attrValue,\n        color: attrValue,\n        scaleValue: value\n      };\n    });\n\n    if (!containMin) {\n      items.push({\n        value: scale.min,\n        attrValue: attr.mapping(scale.invert(0)).join(''),\n        color: attr.mapping(scale.invert(0)).join(''),\n        scaleValue: 0\n      });\n    }\n\n    if (!containMax) {\n      items.push({\n        value: scale.max,\n        attrValue: attr.mapping(scale.invert(1)).join(''),\n        color: attr.mapping(scale.invert(1)).join(''),\n        scaleValue: 1\n      });\n    } // 排序\n\n\n    items.sort(function (a, b) {\n      return a.value - b.value;\n    }); // 跟 attr 相关的配置\n    // size color 区别的配置\n\n    var attrLegendCfg = {\n      min: head(items).value,\n      max: last(items).value,\n      colors: [],\n      rail: {\n        type: attr.type\n      },\n      track: {}\n    };\n\n    if (attr.type === 'size') {\n      attrLegendCfg.track = {\n        style: {\n          // size 的选中前景色，对于 color，则直接使用 color 标识\n          // @ts-ignore\n          fill: attr.type === 'size' ? this.view.getTheme().defaultColor : undefined\n        }\n      };\n    }\n\n    if (attr.type === 'color') {\n      attrLegendCfg.colors = items.map(function (item) {\n        return item.attrValue;\n      });\n    }\n\n    var container = this.container; // if position is not set, use top as default\n\n    var direction = getDirection(legendOption);\n    var layout = getLegendLayout(direction);\n    var title = get(legendOption, 'title');\n\n    if (title) {\n      title = deepMix({\n        text: getName(scale)\n      }, title);\n    } // 基础配置，从当前数据中读到的配置\n\n\n    attrLegendCfg.container = container;\n    attrLegendCfg.layout = layout;\n    attrLegendCfg.title = title;\n    attrLegendCfg.animateOption = DEFAULT_ANIMATE_CFG; // @ts-ignore\n\n    return this.mergeLegendCfg(attrLegendCfg, legendOption, 'continuous');\n  };\n  /**\n   * 获取分类图例的配置项\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param custom\n   * @param legendOption\n   */\n\n\n  Legend.prototype.getCategoryCfg = function (geometry, attr, scale, legendOption, custom) {\n    var container = this.container; // if position is not set, use top as default\n\n    var direction = get(legendOption, 'position', DIRECTION.BOTTOM);\n    var legendTheme = getLegendThemeCfg(this.view.getTheme(), direction); // the default marker style\n\n    var themeMarker = get(legendTheme, ['marker']);\n    var userMarker = get(legendOption, 'marker');\n    var layout = getLegendLayout(direction);\n    var themePageNavigator = get(legendTheme, ['pageNavigator']);\n    var userPageNavigator = get(legendOption, 'pageNavigator');\n    var items = custom ? getCustomLegendItems(themeMarker, userMarker, legendOption.items) : getLegendItems(this.view, geometry, attr, themeMarker, userMarker);\n    var title = get(legendOption, 'title');\n\n    if (title) {\n      title = deepMix({\n        text: scale ? getName(scale) : ''\n      }, title);\n    }\n\n    var maxWidthRatio = get(legendOption, 'maxWidthRatio');\n    var maxHeightRatio = get(legendOption, 'maxHeightRatio');\n    var baseCfg = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n    baseCfg.container = container;\n    baseCfg.layout = layout;\n    baseCfg.items = items;\n    baseCfg.title = title;\n    baseCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    baseCfg.pageNavigator = deepMix({}, themePageNavigator, userPageNavigator);\n    var categoryCfg = this.mergeLegendCfg(baseCfg, legendOption, direction);\n\n    if (categoryCfg.reversed) {\n      // 图例项需要逆序\n      categoryCfg.items.reverse();\n    }\n\n    var maxItemWidth = get(categoryCfg, 'maxItemWidth');\n\n    if (maxItemWidth && maxItemWidth <= 1) {\n      // 转换成像素值\n      categoryCfg.maxItemWidth = this.view.viewBBox.width * maxItemWidth;\n    }\n\n    return categoryCfg;\n  };\n  /**\n   * get legend config, use option > suggestion > theme\n   * @param baseCfg\n   * @param legendOption\n   * @param direction\n   */\n\n\n  Legend.prototype.mergeLegendCfg = function (baseCfg, legendOption, direction) {\n    var position = direction.split('-')[0];\n    var themeObject = getLegendThemeCfg(this.view.getTheme(), position);\n    return deepMix({}, themeObject, baseCfg, legendOption);\n  };\n  /**\n   * 生成 id\n   * @param key\n   */\n\n\n  Legend.prototype.getId = function (key) {\n    return \"\".concat(this.name, \"-\").concat(key);\n  };\n  /**\n   * 根据 id 来获取组件\n   * @param id\n   */\n\n\n  Legend.prototype.getComponentById = function (id) {\n    return find(this.components, function (co) {\n      return co.id === id;\n    });\n  };\n\n  Legend.prototype.getCategoryLegendSizeCfg = function (layout, maxWidthRatio, maxHeightRatio) {\n    if (maxWidthRatio === void 0) {\n      maxWidthRatio = COMPONENT_MAX_VIEW_PERCENTAGE;\n    }\n\n    if (maxHeightRatio === void 0) {\n      maxHeightRatio = COMPONENT_MAX_VIEW_PERCENTAGE;\n    }\n\n    var _a = this.view.viewBBox,\n        vw = _a.width,\n        vh = _a.height; // 目前 legend 的布局是以 viewBBox 为参照\n    // const { width: cw, height: ch } = this.view.coordinateBBox;\n\n    return layout === 'vertical' ? {\n      maxWidth: vw * maxWidthRatio,\n      maxHeight: vh\n    } : {\n      maxWidth: vw,\n      maxHeight: vh * maxHeightRatio\n    };\n  };\n\n  return Legend;\n}(Controller);\n\nexport default Legend;","map":{"version":3,"mappings":"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","names":["deepMix","each","find","get","head","isBoolean","last","COMPONENT_MAX_VIEW_PERCENTAGE","COMPONENT_TYPE","DIRECTION","LAYER","CategoryLegend","ContinuousLegend","DEFAULT_ANIMATE_CFG","BBox","directionToPosition","omit","getCustomLegendItems","getLegendItems","getLegendLayout","getLegendThemeCfg","getName","Controller","getLegendOption","legends","field","getDirection","legendOption","BOTTOM","__extends","view","_super","_this","container","getLayer","FORE","addGroup","Object","Legend","update","layoutBBox","viewBBox","components","co","direction","layout","maxWidthRatio","component","maxHeightRatio","maxSize","getCategoryLegendSizeCfg","maxWidth","maxHeight","Math","min","padding","bboxObject","getLayoutBBox","bbox","x","y","width","height","expand","x1","y1","x2","y2","startsWith","setLocation","cut","option","getOptions","updated","eachLegend","geometry","attr","scale","id","getId","existCo","getComponentById","cfg","getCategoryCfg","isLinear","getContinuousCfg","isCategory","legend","createFieldLegend","init","push","customCfg","undefined","createCustomLegend","layer","type","LEGEND","extra","loopLegends","getComponents","destroy","clear","call","remove","geometries","views","v","concat","getGeometries","doEach","isRootView","getRootView","looped","attributes","getGroupAttributes","getScale","createContinuousLegend","createCategoryLegend","set","ticks","getTicks","containMin","tick","value","containMax","items","map","tickValue","attrValue","mapping","invert","join","color","scaleValue","max","sort","a","b","attrLegendCfg","colors","rail","track","style","fill","getTheme","defaultColor","item","title","text","animateOption","mergeLegendCfg","custom","legendTheme","themeMarker","userMarker","themePageNavigator","userPageNavigator","baseCfg","pageNavigator","categoryCfg","reversed","reverse","maxItemWidth","position","split","themeObject","key","name","vw","vh"],"sourceRoot":"","sources":["../../../src/chart/controller/legend.ts"],"sourcesContent":["import { deepMix, each, find, get, head, isBoolean, last } from '@antv/util';\nimport { COMPONENT_MAX_VIEW_PERCENTAGE, COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { Attribute, CategoryLegend, ContinuousLegend, GroupComponent, IGroup, Scale, Tick } from '../../dependents';\nimport { ComponentOption, LegendCfg, LegendOption, LooseObject, AllLegendsOptions, Padding } from '../../interface';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate';\nimport Geometry from '../../geometry/base';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { omit } from '../../util/helper';\nimport { getCustomLegendItems, getLegendItems, getLegendLayout, getLegendThemeCfg } from '../../util/legend';\nimport { getName } from '../../util/scale';\nimport View from '../view';\nimport { Controller } from './base';\n\ntype DoEach = (geometry: Geometry, attr: Attribute, scale: Scale) => void;\n\n/**\n * 从配置中获取单个字段的 legend 配置\n * @param legends\n * @param field\n * @returns the option of one legend field\n */\nfunction getLegendOption(legends: AllLegendsOptions, field: string) {\n  if (isBoolean(legends)) {\n    return legends === false ? false : {};\n  }\n\n  return get(legends, [field], legends);\n}\n\nfunction getDirection(legendOption: any): DIRECTION {\n  return get(legendOption, 'position', DIRECTION.BOTTOM);\n}\n\n/**\n * @ignore\n * legend Controller\n */\nexport default class Legend extends Controller<AllLegendsOptions> {\n  /** the draw group of axis */\n  private container: IGroup;\n  /** 用于多个 legend 布局的 bbox */\n  private layoutBBox: BBox;\n\n  constructor(view: View) {\n    super(view);\n\n    this.container = this.view.getLayer(LAYER.FORE).addGroup();\n  }\n\n  public get name(): string {\n    return 'legend';\n  }\n\n  public init() {}\n\n  /**\n   * render the legend component by legend options\n   */\n  public render() {\n    // 和 update 逻辑保持一致\n    this.update();\n  }\n\n  /**\n   * layout legend\n   * 计算出 legend 的 direction 位置 x, y\n   */\n  public layout() {\n    this.layoutBBox = this.view.viewBBox;\n\n    each(this.components, (co: ComponentOption) => {\n      const { component, direction } = co;\n      const layout = getLegendLayout(direction);\n      const maxWidthRatio = component.get('maxWidthRatio');\n      const maxHeightRatio = component.get('maxHeightRatio');\n\n      const maxSize = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n\n      const maxWidth = component.get('maxWidth');\n      const maxHeight = component.get('maxHeight');\n\n      // 先更新 maxSize，更新 layoutBBox，以便计算正确的 x y\n      component.update({\n        maxWidth: Math.min(maxSize.maxWidth, maxWidth || 0),\n        maxHeight: Math.min(maxSize.maxHeight, maxHeight || 0),\n      });\n\n      const padding = component.get('padding') as Padding;\n\n      const bboxObject = component.getLayoutBBox(); // 这里只需要他的 width、height 信息做位置调整\n      const bbox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(padding);\n\n      const [x1, y1] = directionToPosition(this.view.viewBBox, bbox, direction);\n      const [x2, y2] = directionToPosition(this.layoutBBox, bbox, direction);\n\n      let x = 0;\n      let y = 0;\n\n      // 因为 legend x y 要和 coordinateBBox 对齐，所以要做一个简单的判断\n      if (direction.startsWith('top') || direction.startsWith('bottom')) {\n        x = x1;\n        y = y2;\n      } else {\n        x = x2;\n        y = y1;\n      }\n\n      // 更新位置\n      component.setLocation({ x: x + padding[3], y: y + padding[0] });\n\n      this.layoutBBox = this.layoutBBox.cut(bbox, direction);\n    });\n  }\n\n  /**\n   * legend 的更新逻辑\n   */\n  public update() {\n    this.option = this.view.getOptions().legends;\n\n    // 已经处理过的 legend\n    const updated: Record<string, true> = {};\n\n    const eachLegend = (geometry: Geometry, attr: Attribute, scale: Scale) => {\n      const id = this.getId(scale.field);\n\n      const existCo = this.getComponentById(id);\n\n      // 存在则 update\n      if (existCo) {\n        let cfg;\n        const legendOption = getLegendOption(this.option, scale.field);\n\n        // if the legend option is not false, means legend should be created.\n        if (legendOption !== false) {\n          if (get(legendOption, 'custom')) {\n            cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n          } else {\n            if (scale.isLinear) {\n              // linear field, create continuous legend\n              cfg = this.getContinuousCfg(geometry, attr, scale, legendOption);\n            } else if (scale.isCategory) {\n              // category field, create category legend\n              cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n            }\n          }\n        }\n\n        // 如果 cfg 为空，则不在 updated 标记，那么会在后面逻辑中删除\n        if (cfg) {\n          // omit 掉一些属性，比如 container 等\n          omit(cfg, ['container']);\n\n          existCo.direction = getDirection(legendOption);\n\n          existCo.component.update(cfg);\n\n          // 标记为新的\n          updated[id] = true;\n        }\n      } else {\n        // 不存在则 create\n        const legend = this.createFieldLegend(geometry, attr, scale);\n\n        if (legend) {\n          (legend.component as GroupComponent).init();\n          this.components.push(legend);\n\n          // 标记为新的\n          updated[id] = true;\n        }\n      }\n    };\n\n    // 全局自定义图例\n    if (get(this.option, 'custom')) {\n      const id = 'global-custom';\n      const existCo = this.getComponentById(id);\n      if (existCo) {\n        const customCfg = this.getCategoryCfg(undefined, undefined, undefined, this.option, true);\n        omit(customCfg, ['container']);\n        existCo.component.update(customCfg);\n\n        updated[id] = true;\n      } else {\n        const component = this.createCustomLegend(undefined, undefined, undefined, this.option as LegendCfg);\n        if (component) {\n          component.init();\n\n          const layer = LAYER.FORE;\n          const direction = getDirection(this.option);\n\n          this.components.push({\n            id,\n            component,\n            layer,\n            direction,\n            type: COMPONENT_TYPE.LEGEND,\n            extra: undefined,\n          });\n\n          // 标记为更新\n          updated[id] = true;\n        }\n      }\n    } else {\n      // 遍历处理每一个创建逻辑\n      this.loopLegends(eachLegend);\n    }\n\n    // 处理完成之后，销毁删除的\n    // 不在处理中的\n    const components = [];\n    each(this.getComponents(), (co: ComponentOption) => {\n      if (updated[co.id]) {\n        components.push(co);\n      } else {\n        co.component.destroy();\n      }\n    });\n\n    // 更新当前已有的 components\n    this.components = components;\n  }\n\n  public clear() {\n    super.clear();\n    this.container.clear();\n  }\n\n  public destroy() {\n    super.destroy();\n\n    this.container.remove(true);\n  }\n\n  /**\n   * 递归获取所有的 Geometry\n   */\n  private getGeometries(view: View): Geometry[] {\n    let geometries = view.geometries;\n\n    each(view.views, (v: View) => {\n      geometries = geometries.concat(this.getGeometries(v));\n    });\n\n    return geometries;\n  }\n\n  /**\n   * 遍历 Geometry，处理 legend 逻辑\n   * @param doEach 每个 loop 中的处理方法\n   */\n  private loopLegends(doEach: DoEach) {\n    const isRootView = this.view.getRootView() === this.view;\n    // 非根 view，不处理 legend\n    if (!isRootView) {\n      return;\n    }\n\n    // 递归 view 中所有的 Geometry，进行创建 legend\n    const geometries = this.getGeometries(this.view);\n\n    const looped: Record<string, true> = {}; // 防止一个字段创建两个 legend\n\n    each(geometries, (geometry: Geometry) => {\n      const attributes = geometry.getGroupAttributes();\n\n      each(attributes, (attr: Attribute) => {\n        const scale = attr.getScale(attr.type);\n        // 如果在视觉通道上映射常量值，如 size(2) shape('circle') 不创建 legend\n        if (!scale || scale.type === 'identity' || looped[scale.field]) {\n          return;\n        }\n\n        doEach(geometry, attr, scale);\n\n        looped[scale.field] = true;\n      });\n    });\n  }\n\n  /**\n   * 创建一个 legend\n   * @param geometry\n   * @param attr\n   * @param scale\n   */\n  private createFieldLegend(geometry: Geometry, attr: Attribute, scale: Scale): ComponentOption {\n    let component;\n\n    const legendOption = getLegendOption(this.option, scale.field);\n    const layer = LAYER.FORE;\n    const direction = getDirection(legendOption);\n\n    // if the legend option is not false, means legend should be created.\n    if (legendOption !== false) {\n      if (get(legendOption, 'custom')) {\n        component = this.createCustomLegend(geometry, attr, scale, legendOption);\n      } else {\n        if (scale.isLinear) {\n          // linear field, create continuous legend\n          component = this.createContinuousLegend(geometry, attr, scale, legendOption);\n        } else if (scale.isCategory) {\n          // category field, create category legend\n          component = this.createCategoryLegend(geometry, attr, scale, legendOption);\n        }\n      }\n    }\n\n    if (component) {\n      component.set('field', scale.field);\n\n      return {\n        id: this.getId(scale.field),\n        component,\n        layer,\n        direction,\n        type: COMPONENT_TYPE.LEGEND,\n        extra: { scale },\n      };\n    }\n  }\n\n  /**\n   * 自定义图例使用 category 图例去渲染\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  private createCustomLegend(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: LegendCfg) {\n    // 直接使用 分类图例渲染\n    const cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n    return new CategoryLegend(cfg);\n  }\n\n  /**\n   * 创建连续图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  private createContinuousLegend(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: any) {\n    const cfg = this.getContinuousCfg(geometry, attr, scale, omit(legendOption, ['value']));\n    return new ContinuousLegend(cfg);\n  }\n\n  /**\n   * 创建分类图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  private createCategoryLegend(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: any) {\n    const cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n    return new CategoryLegend(cfg);\n  }\n\n  /**\n   * 获得连续图例的配置\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  private getContinuousCfg(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: any) {\n    const ticks = scale.getTicks();\n\n    const containMin = find(ticks, (tick: Tick) => tick.value === 0);\n    const containMax = find(ticks, (tick: Tick) => tick.value === 1);\n    const items = ticks.map((tick: Tick) => {\n      const { value, tickValue } = tick;\n      const attrValue = attr.mapping(scale.invert(value)).join('');\n\n      return {\n        value: tickValue,\n        attrValue,\n        color: attrValue,\n        scaleValue: value,\n      };\n    });\n\n    if (!containMin) {\n      items.push({\n        value: scale.min,\n        attrValue: attr.mapping(scale.invert(0)).join(''),\n        color: attr.mapping(scale.invert(0)).join(''),\n        scaleValue: 0,\n      });\n    }\n    if (!containMax) {\n      items.push({\n        value: scale.max,\n        attrValue: attr.mapping(scale.invert(1)).join(''),\n        color: attr.mapping(scale.invert(1)).join(''),\n        scaleValue: 1,\n      });\n    }\n\n    // 排序\n    items.sort((a: any, b: any) => a.value - b.value);\n\n    // 跟 attr 相关的配置\n    // size color 区别的配置\n    const attrLegendCfg: LooseObject = {\n      min: head(items).value,\n      max: last(items).value,\n      colors: [],\n      rail: {\n        type: attr.type,\n      },\n      track: {},\n    };\n\n    if (attr.type === 'size') {\n      attrLegendCfg.track = {\n        style: {\n          // size 的选中前景色，对于 color，则直接使用 color 标识\n          // @ts-ignore\n          fill: attr.type === 'size' ? this.view.getTheme().defaultColor : undefined,\n        },\n      };\n    }\n\n    if (attr.type === 'color') {\n      attrLegendCfg.colors = items.map((item) => item.attrValue);\n    }\n\n    const container = this.container;\n    // if position is not set, use top as default\n    const direction = getDirection(legendOption);\n\n    const layout = getLegendLayout(direction);\n\n    let title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix(\n        {\n          text: getName(scale),\n        },\n        title\n      );\n    }\n\n    // 基础配置，从当前数据中读到的配置\n    attrLegendCfg.container = container;\n    attrLegendCfg.layout = layout;\n    attrLegendCfg.title = title;\n    attrLegendCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    // @ts-ignore\n    return this.mergeLegendCfg(attrLegendCfg, legendOption, 'continuous');\n  }\n\n  /**\n   * 获取分类图例的配置项\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param custom\n   * @param legendOption\n   */\n  private getCategoryCfg(geometry: Geometry, attr: Attribute, scale: Scale, legendOption: any, custom?: boolean) {\n    const container = this.container;\n    // if position is not set, use top as default\n    const direction = get(legendOption, 'position', DIRECTION.BOTTOM);\n\n    const legendTheme = getLegendThemeCfg(this.view.getTheme(), direction);\n\n    // the default marker style\n    const themeMarker = get(legendTheme, ['marker']);\n    const userMarker = get(legendOption, 'marker');\n    const layout = getLegendLayout(direction);\n    const themePageNavigator = get(legendTheme, ['pageNavigator']);\n    const userPageNavigator = get(legendOption, 'pageNavigator');\n\n    const items = custom\n      ? getCustomLegendItems(themeMarker, userMarker, legendOption.items)\n      : getLegendItems(this.view, geometry, attr, themeMarker, userMarker);\n\n    let title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix(\n        {\n          text: scale ? getName(scale) : '',\n        },\n        title\n      );\n    }\n    const maxWidthRatio = get(legendOption, 'maxWidthRatio');\n    const maxHeightRatio = get(legendOption, 'maxHeightRatio');\n\n    const baseCfg: LooseObject = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n    baseCfg.container = container;\n    baseCfg.layout = layout;\n    baseCfg.items = items;\n    baseCfg.title = title;\n    baseCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    baseCfg.pageNavigator = deepMix({}, themePageNavigator, userPageNavigator);\n\n    const categoryCfg = this.mergeLegendCfg(baseCfg, legendOption, direction);\n    if (categoryCfg.reversed) {\n      // 图例项需要逆序\n      categoryCfg.items.reverse();\n    }\n\n    const maxItemWidth = get(categoryCfg, 'maxItemWidth');\n    if (maxItemWidth && maxItemWidth <= 1) {\n      // 转换成像素值\n      categoryCfg.maxItemWidth = this.view.viewBBox.width * maxItemWidth;\n    }\n\n    return categoryCfg;\n  }\n\n  /**\n   * get legend config, use option > suggestion > theme\n   * @param baseCfg\n   * @param legendOption\n   * @param direction\n   */\n  private mergeLegendCfg(baseCfg: object, legendOption: LegendOption, direction: DIRECTION) {\n    const position = direction.split('-')[0];\n    const themeObject = getLegendThemeCfg(this.view.getTheme(), position);\n\n    return deepMix({}, themeObject, baseCfg, legendOption);\n  }\n\n  /**\n   * 生成 id\n   * @param key\n   */\n  private getId(key: string): string {\n    return `${this.name}-${key}`;\n  }\n\n  /**\n   * 根据 id 来获取组件\n   * @param id\n   */\n  private getComponentById(id: string): ComponentOption {\n    return find(this.components, (co) => co.id === id);\n  }\n\n  private getCategoryLegendSizeCfg(\n    layout: 'horizontal' | 'vertical',\n    maxWidthRatio = COMPONENT_MAX_VIEW_PERCENTAGE,\n    maxHeightRatio = COMPONENT_MAX_VIEW_PERCENTAGE\n  ) {\n    const { width: vw, height: vh } = this.view.viewBBox;\n    // 目前 legend 的布局是以 viewBBox 为参照\n    // const { width: cw, height: ch } = this.view.coordinateBBox;\n    return layout === 'vertical'\n      ? {\n          maxWidth: vw * maxWidthRatio,\n          maxHeight: vh,\n        }\n      : {\n          maxWidth: vw,\n          maxHeight: vh * maxHeightRatio,\n        };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}