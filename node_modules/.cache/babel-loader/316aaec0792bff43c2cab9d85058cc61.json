{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray, isFunction, isString } from '@antv/util';\nimport { normalPadding } from '../../utils/padding';\nimport { log, LEVEL, getContainerSize } from '../../utils';\nimport { functor, wordCloud } from '../../utils/transform/word-cloud';\n/**\n * 用 DataSet 转换词云图数据\n * @param params\n */\n\nexport function transform(params) {\n  var rawOptions = params.options,\n      chart = params.chart;\n  var _a = chart,\n      width = _a.width,\n      height = _a.height,\n      chartPadding = _a.padding,\n      appendPadding = _a.appendPadding,\n      ele = _a.ele;\n  var data = rawOptions.data,\n      imageMask = rawOptions.imageMask,\n      wordField = rawOptions.wordField,\n      weightField = rawOptions.weightField,\n      colorField = rawOptions.colorField,\n      wordStyle = rawOptions.wordStyle,\n      timeInterval = rawOptions.timeInterval,\n      random = rawOptions.random,\n      spiral = rawOptions.spiral,\n      _b = rawOptions.autoFit,\n      autoFit = _b === void 0 ? true : _b,\n      placementStrategy = rawOptions.placementStrategy;\n\n  if (!data || !data.length) {\n    return [];\n  }\n\n  var fontFamily = wordStyle.fontFamily,\n      fontWeight = wordStyle.fontWeight,\n      padding = wordStyle.padding,\n      fontSize = wordStyle.fontSize;\n  var arr = getSingleKeyValues(data, weightField);\n  var range = [min(arr), max(arr)]; // 变换出 text 和 value 字段\n\n  var words = data.map(function (datum) {\n    return {\n      text: datum[wordField],\n      value: datum[weightField],\n      color: datum[colorField],\n      datum: datum\n    };\n  });\n  var options = {\n    imageMask: imageMask,\n    font: fontFamily,\n    fontSize: getFontSizeMapping(fontSize, range),\n    fontWeight: fontWeight,\n    // 图表宽高减去 padding 之后的宽高\n    size: getSize({\n      width: width,\n      height: height,\n      padding: chartPadding,\n      appendPadding: appendPadding,\n      autoFit: autoFit,\n      container: ele\n    }),\n    padding: padding,\n    timeInterval: timeInterval,\n    random: random,\n    spiral: spiral,\n    rotate: getRotate(rawOptions)\n  }; // 自定义布局函数\n\n  if (isFunction(placementStrategy)) {\n    var result = words.map(function (word, index, words) {\n      return __assign(__assign(__assign({}, word), {\n        hasText: !!word.text,\n        font: functor(options.font)(word, index, words),\n        weight: functor(options.fontWeight)(word, index, words),\n        rotate: functor(options.rotate)(word, index, words),\n        size: functor(options.fontSize)(word, index, words),\n        style: 'normal'\n      }), placementStrategy.call(chart, word, index, words));\n    }); // 添加两个参照数据，分别表示左上角和右下角\n\n    result.push({\n      text: '',\n      value: 0,\n      x: 0,\n      y: 0,\n      opacity: 0\n    });\n    result.push({\n      text: '',\n      value: 0,\n      x: options.size[0],\n      y: options.size[1],\n      opacity: 0\n    });\n    return result;\n  } // 数据准备在外部做，wordCloud 单纯就是做布局\n\n\n  return wordCloud(words, options);\n}\n/**\n * 获取最终的实际绘图尺寸：[width, height]\n * @param chart\n */\n\nexport function getSize(options) {\n  var width = options.width,\n      height = options.height;\n  var container = options.container,\n      autoFit = options.autoFit,\n      padding = options.padding,\n      appendPadding = options.appendPadding; // 由于词云图每个词语的坐标都是先通过 DataSet 根据图表宽高计算出来的，\n  // 也就是说，如果一开始提供给 DataSet 的宽高信息和最终显示的宽高不相同，\n  // 那么就会出现布局错乱的情况，所以这里处理的目的就是让一开始提供给 DataSet 的\n  // 宽高信息与最终显示的宽高信息相同，避免显示错乱。\n\n  if (autoFit) {\n    var containerSize = getContainerSize(container);\n    width = containerSize.width;\n    height = containerSize.height;\n  } // 宽高不能为 0，否则会造成死循环\n\n\n  width = width || 400;\n  height = height || 400;\n\n  var _a = resolvePadding({\n    padding: padding,\n    appendPadding: appendPadding\n  }),\n      top = _a[0],\n      right = _a[1],\n      bottom = _a[2],\n      left = _a[3];\n\n  var result = [width - (left + right), height - (top + bottom)];\n  return result;\n}\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param chart\n */\n\nfunction resolvePadding(options) {\n  var padding = normalPadding(options.padding);\n  var appendPadding = normalPadding(options.appendPadding);\n  var top = padding[0] + appendPadding[0];\n  var right = padding[1] + appendPadding[1];\n  var bottom = padding[2] + appendPadding[2];\n  var left = padding[3] + appendPadding[3];\n  return [top, right, bottom, left];\n}\n/**\n * 处理 imageMask 可能为 url 字符串的情况\n * @param  {HTMLImageElement | string} img\n * @return {Promise}\n */\n\n\nexport function processImageMask(img) {\n  return new Promise(function (res, rej) {\n    if (img instanceof HTMLImageElement) {\n      res(img);\n      return;\n    }\n\n    if (isString(img)) {\n      var image_1 = new Image();\n      image_1.crossOrigin = 'anonymous';\n      image_1.src = img;\n\n      image_1.onload = function () {\n        res(image_1);\n      };\n\n      image_1.onerror = function () {\n        log(LEVEL.ERROR, false, 'image %s load failed !!!', img);\n        rej();\n      };\n\n      return;\n    }\n\n    log(LEVEL.WARN, img === undefined, 'The type of imageMask option must be String or HTMLImageElement.');\n    rej();\n  });\n}\n/**\n * 把用户提供的 fontSize 值转换成符合 DataSet 要求的值\n * @param options\n * @param range\n */\n\nexport function getFontSizeMapping(fontSize, range) {\n  if (isFunction(fontSize)) {\n    return fontSize;\n  }\n\n  if (isArray(fontSize)) {\n    var fMin_1 = fontSize[0],\n        fMax_1 = fontSize[1];\n\n    if (!range) {\n      return function () {\n        return (fMax_1 + fMin_1) / 2;\n      };\n    }\n\n    var min_1 = range[0],\n        max_1 = range[1];\n\n    if (max_1 === min_1) {\n      return function () {\n        return (fMax_1 + fMin_1) / 2;\n      };\n    }\n\n    return function fontSize(_a) {\n      var value = _a.value;\n      return (fMax_1 - fMin_1) / (max_1 - min_1) * (value - min_1) + fMin_1;\n    };\n  }\n\n  return function () {\n    return fontSize;\n  };\n}\nexport function getSingleKeyValues(data, key) {\n  return data.map(function (v) {\n    return v[key];\n  }).filter(function (v) {\n    // 过滤非 number\n    if (typeof v === 'number' && !isNaN(v)) return true;\n    return false;\n  });\n}\n/**\n * 把用户提供的关于旋转角度的字段值转换成符合 DataSet 要求的值\n * @param options\n */\n\nfunction getRotate(options) {\n  var _a = resolveRotate(options),\n      rotation = _a.rotation,\n      rotationSteps = _a.rotationSteps;\n\n  if (!isArray(rotation)) return rotation;\n  var min = rotation[0];\n  var max = rotation[1]; // 等于 1 时不旋转，所以把每份大小设为 0\n\n  var perSize = rotationSteps === 1 ? 0 : (max - min) / (rotationSteps - 1);\n  return function rotate() {\n    if (max === min) return max;\n    return Math.floor(Math.random() * rotationSteps) * perSize;\n  };\n}\n/**\n * 确保值在要求范围内\n * @param options\n */\n\n\nfunction resolveRotate(options) {\n  var rotationSteps = options.wordStyle.rotationSteps;\n\n  if (rotationSteps < 1) {\n    log(LEVEL.WARN, false, 'The rotationSteps option must be greater than or equal to 1.');\n    rotationSteps = 1;\n  }\n\n  return {\n    rotation: options.wordStyle.rotation,\n    rotationSteps: rotationSteps\n  };\n}\n/**\n * 传入一个元素为数字的数组，\n * 返回该数组中值最小的数字。\n * @param numbers\n */\n\n\nfunction min(numbers) {\n  return Math.min.apply(Math, numbers);\n}\n/**\n * 传入一个元素为数字的数组，\n * 返回该数组中值最大的数字。\n * @param numbers\n */\n\n\nfunction max(numbers) {\n  return Math.max.apply(Math, numbers);\n}","map":{"version":3,"mappings":"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","names":["isArray","isFunction","isString","normalPadding","log","LEVEL","getContainerSize","functor","wordCloud","transform","params","rawOptions","chart","width","height","chartPadding","appendPadding","ele","imageMask","wordField","weightField","colorField","wordStyle","timeInterval","random","spiral","_b","autoFit","placementStrategy","data","length","fontWeight","padding","fontSize","arr","getSingleKeyValues","range","min","max","words","map","datum","text","value","color","options","font","fontFamily","getFontSizeMapping","size","getSize","container","rotate","getRotate","result","word","index","hasText","weight","style","call","push","x","y","opacity","containerSize","resolvePadding","top","right","bottom","left","processImageMask","img","Promise","res","rej","HTMLImageElement","image_1","Image","crossOrigin","src","onload","onerror","ERROR","WARN","undefined","fMax_1","fMin_1","max_1","min_1","_a","key","v","filter","isNaN","resolveRotate","rotation","rotationSteps","perSize","Math","floor","numbers","apply"],"sourceRoot":"","sources":["../../../src/plots/word-cloud/utils.ts"],"sourcesContent":["import { Chart } from '@antv/g2';\r\nimport { Types } from '@antv/g2';\r\nimport { isArray, isFunction, isString } from '@antv/util';\r\nimport { normalPadding } from '../../utils/padding';\r\nimport { Params } from '../../core/adaptor';\r\nimport { Datum } from '../../types';\r\nimport { log, LEVEL, getContainerSize } from '../../utils';\r\nimport { functor, wordCloud } from '../../utils/transform/word-cloud';\r\nimport { Tag, Word, WordCloudOptions, WordStyle } from './types';\r\n\r\n/**\r\n * 用 DataSet 转换词云图数据\r\n * @param params\r\n */\r\nexport function transform(params: Params<WordCloudOptions>): Tag[] {\r\n  const { options: rawOptions, chart } = params;\r\n  const { width, height, padding: chartPadding, appendPadding, ele } = chart as Chart;\r\n  const {\r\n    data,\r\n    imageMask,\r\n    wordField,\r\n    weightField,\r\n    colorField,\r\n    wordStyle,\r\n    timeInterval,\r\n    random,\r\n    spiral,\r\n    autoFit = true,\r\n    placementStrategy,\r\n  } = rawOptions;\r\n  if (!data || !data.length) {\r\n    return [];\r\n  }\r\n  const { fontFamily, fontWeight, padding, fontSize } = wordStyle;\r\n  const arr = getSingleKeyValues(data, weightField);\r\n  const range = [min(arr), max(arr)] as [number, number];\r\n\r\n  // 变换出 text 和 value 字段\r\n  const words = data.map(\r\n    (datum: Datum): Word => ({\r\n      text: datum[wordField],\r\n      value: datum[weightField],\r\n      color: datum[colorField],\r\n      datum, // 存一下原始数据\r\n    })\r\n  );\r\n\r\n  const options = {\r\n    imageMask: imageMask as HTMLImageElement,\r\n    font: fontFamily,\r\n    fontSize: getFontSizeMapping(fontSize, range),\r\n    fontWeight: fontWeight,\r\n    // 图表宽高减去 padding 之后的宽高\r\n    size: getSize({\r\n      width,\r\n      height,\r\n      padding: chartPadding,\r\n      appendPadding,\r\n      autoFit,\r\n      container: ele,\r\n    }),\r\n    padding: padding,\r\n    timeInterval,\r\n    random,\r\n    spiral,\r\n    rotate: getRotate(rawOptions),\r\n  };\r\n\r\n  // 自定义布局函数\r\n  if (isFunction(placementStrategy)) {\r\n    const result = words.map((word: Word, index: number, words: Word[]) => ({\r\n      ...word,\r\n      hasText: !!word.text,\r\n      font: functor(options.font)(word, index, words),\r\n      weight: functor(options.fontWeight)(word, index, words),\r\n      rotate: functor(options.rotate)(word, index, words),\r\n      size: functor(options.fontSize)(word, index, words),\r\n      style: 'normal',\r\n      ...placementStrategy.call(chart, word, index, words),\r\n    }));\r\n\r\n    // 添加两个参照数据，分别表示左上角和右下角\r\n    result.push({\r\n      text: '',\r\n      value: 0,\r\n      x: 0,\r\n      y: 0,\r\n      opacity: 0,\r\n    });\r\n    result.push({\r\n      text: '',\r\n      value: 0,\r\n      x: options.size[0],\r\n      y: options.size[1],\r\n      opacity: 0,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // 数据准备在外部做，wordCloud 单纯就是做布局\r\n  return wordCloud(words, options);\r\n}\r\n\r\n/**\r\n * 获取最终的实际绘图尺寸：[width, height]\r\n * @param chart\r\n */\r\nexport function getSize(options: {\r\n  width: number;\r\n  height: number;\r\n  padding: Types.ViewPadding;\r\n  appendPadding: Types.ViewAppendPadding;\r\n  autoFit: boolean;\r\n  container: HTMLElement;\r\n}): [number, number] {\r\n  let { width, height } = options;\r\n  const { container, autoFit, padding, appendPadding } = options;\r\n\r\n  // 由于词云图每个词语的坐标都是先通过 DataSet 根据图表宽高计算出来的，\r\n  // 也就是说，如果一开始提供给 DataSet 的宽高信息和最终显示的宽高不相同，\r\n  // 那么就会出现布局错乱的情况，所以这里处理的目的就是让一开始提供给 DataSet 的\r\n  // 宽高信息与最终显示的宽高信息相同，避免显示错乱。\r\n  if (autoFit) {\r\n    const containerSize = getContainerSize(container);\r\n    width = containerSize.width;\r\n    height = containerSize.height;\r\n  }\r\n\r\n  // 宽高不能为 0，否则会造成死循环\r\n  width = width || 400;\r\n  height = height || 400;\r\n\r\n  const [top, right, bottom, left] = resolvePadding({ padding, appendPadding });\r\n  const result = [width - (left + right), height - (top + bottom)];\r\n\r\n  return result as [number, number];\r\n}\r\n\r\n/**\r\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\r\n * @param chart\r\n */\r\nfunction resolvePadding(options: { padding: Types.ViewPadding; appendPadding: Types.ViewAppendPadding }) {\r\n  const padding = normalPadding(options.padding);\r\n  const appendPadding = normalPadding(options.appendPadding);\r\n  const top = padding[0] + appendPadding[0];\r\n  const right = padding[1] + appendPadding[1];\r\n  const bottom = padding[2] + appendPadding[2];\r\n  const left = padding[3] + appendPadding[3];\r\n\r\n  return [top, right, bottom, left];\r\n}\r\n\r\n/**\r\n * 处理 imageMask 可能为 url 字符串的情况\r\n * @param  {HTMLImageElement | string} img\r\n * @return {Promise}\r\n */\r\nexport function processImageMask(img: HTMLImageElement | string): Promise<HTMLImageElement> {\r\n  return new Promise((res, rej) => {\r\n    if (img instanceof HTMLImageElement) {\r\n      res(img);\r\n      return;\r\n    }\r\n    if (isString(img)) {\r\n      const image = new Image();\r\n      image.crossOrigin = 'anonymous';\r\n      image.src = img;\r\n      image.onload = () => {\r\n        res(image);\r\n      };\r\n      image.onerror = () => {\r\n        log(LEVEL.ERROR, false, 'image %s load failed !!!', img);\r\n        rej();\r\n      };\r\n      return;\r\n    }\r\n    log(LEVEL.WARN, img === undefined, 'The type of imageMask option must be String or HTMLImageElement.');\r\n    rej();\r\n  });\r\n}\r\n\r\n/**\r\n * 把用户提供的 fontSize 值转换成符合 DataSet 要求的值\r\n * @param options\r\n * @param range\r\n */\r\nexport function getFontSizeMapping(fontSize: WordStyle['fontSize'], range?: [number, number]) {\r\n  if (isFunction(fontSize)) {\r\n    return fontSize;\r\n  }\r\n  if (isArray(fontSize)) {\r\n    const [fMin, fMax] = fontSize;\r\n    if (!range) {\r\n      return () => (fMax + fMin) / 2;\r\n    }\r\n    const [min, max] = range;\r\n    if (max === min) {\r\n      return () => (fMax + fMin) / 2;\r\n    }\r\n    return function fontSize({ value }) {\r\n      return ((fMax - fMin) / (max - min)) * (value - min) + fMin;\r\n    };\r\n  }\r\n  return () => fontSize;\r\n}\r\n\r\nexport function getSingleKeyValues(data: Datum[], key: string) {\r\n  return data\r\n    .map((v) => v[key])\r\n    .filter((v) => {\r\n      // 过滤非 number\r\n      if (typeof v === 'number' && !isNaN(v)) return true;\r\n      return false;\r\n    });\r\n}\r\n\r\n/**\r\n * 把用户提供的关于旋转角度的字段值转换成符合 DataSet 要求的值\r\n * @param options\r\n */\r\nfunction getRotate(options: WordCloudOptions) {\r\n  const { rotation, rotationSteps } = resolveRotate(options);\r\n  if (!isArray(rotation)) return rotation;\r\n  const min = rotation[0];\r\n  const max = rotation[1];\r\n  // 等于 1 时不旋转，所以把每份大小设为 0\r\n  const perSize = rotationSteps === 1 ? 0 : (max - min) / (rotationSteps - 1);\r\n  return function rotate() {\r\n    if (max === min) return max;\r\n    return Math.floor(Math.random() * rotationSteps) * perSize;\r\n  };\r\n}\r\n\r\n/**\r\n * 确保值在要求范围内\r\n * @param options\r\n */\r\nfunction resolveRotate(options: WordCloudOptions) {\r\n  let { rotationSteps } = options.wordStyle;\r\n  if (rotationSteps < 1) {\r\n    log(LEVEL.WARN, false, 'The rotationSteps option must be greater than or equal to 1.');\r\n    rotationSteps = 1;\r\n  }\r\n  return {\r\n    rotation: options.wordStyle.rotation,\r\n    rotationSteps,\r\n  };\r\n}\r\n\r\n/**\r\n * 传入一个元素为数字的数组，\r\n * 返回该数组中值最小的数字。\r\n * @param numbers\r\n */\r\nfunction min(numbers: number[]) {\r\n  return Math.min(...numbers);\r\n}\r\n\r\n/**\r\n * 传入一个元素为数字的数组，\r\n * 返回该数组中值最大的数字。\r\n * @param numbers\r\n */\r\nfunction max(numbers: number[]) {\r\n  return Math.max(...numbers);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}