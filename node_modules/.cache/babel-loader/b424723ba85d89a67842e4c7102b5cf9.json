{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { Plot } from '../../core/plot';\nimport { getAllElementsRecursively } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS, FUNNEL_CONVERSATION as FUNNEL_CONVERSATION_FIELD, FUNNEL_PERCENT, FUNNEL_TOTAL_PERCENT } from './constant';\nexport { FUNNEL_CONVERSATION_FIELD };\n\nvar Funnel =\n/** @class */\nfunction (_super) {\n  __extends(Funnel, _super);\n\n  function Funnel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'funnel';\n    return _this;\n  }\n\n  Funnel.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 获取 漏斗图 默认配置项\n   */\n\n\n  Funnel.prototype.getDefaultOptions = function () {\n    // 由于不同漏斗图 defaultOption 有部分逻辑不同，此处仅处理 core.getDefaultOptions 覆盖范围，funnel 的 defaulOption 为不分散逻辑统一写到 adaptor 的 defaultOption 中\n    return Funnel.getDefaultOptions();\n  };\n  /**\n   * 获取 漏斗图 的适配器\n   */\n\n\n  Funnel.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n\n\n  Funnel.prototype.setState = function (type, condition, status) {\n    if (status === void 0) {\n      status = true;\n    }\n\n    var elements = getAllElementsRecursively(this.chart);\n    each(elements, function (ele) {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  };\n  /**\n   * 获取状态\n   */\n\n\n  Funnel.prototype.getStates = function () {\n    var elements = getAllElementsRecursively(this.chart);\n    var stateObjects = [];\n    each(elements, function (element) {\n      var data = element.getData();\n      var states = element.getStates();\n      each(states, function (state) {\n        stateObjects.push({\n          data: data,\n          state: state,\n          geometry: element.geometry,\n          element: element\n        });\n      });\n    });\n    return stateObjects;\n  }; // 内部变量\n\n  /** 漏斗 转化率 字段 */\n\n\n  Funnel.CONVERSATION_FIELD = FUNNEL_CONVERSATION_FIELD;\n  /** 漏斗 百分比 字段 */\n\n  Funnel.PERCENT_FIELD = FUNNEL_PERCENT;\n  /** 漏斗 总转换率百分比 字段 */\n\n  Funnel.TOTAL_PERCENT_FIELD = FUNNEL_TOTAL_PERCENT;\n  return Funnel;\n}(Plot);\n\nexport { Funnel };","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,QAAqB,YAArB;AAEA,SAASC,IAAT,QAAqB,iBAArB;AAGA,SAASC,yBAAT,QAA0C,aAA1C;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SACEC,eADF,EAEEC,mBAAmB,IAAIC,yBAFzB,EAGEC,cAHF,EAIEC,oBAJF,QAKO,YALP;AASA,SAASF,yBAAT;;AAEA;AAAA;AAAA;EAA4BG;;EAA5B;IAAA;IACE;;;IACOC,aAAe,QAAf;;EA8DR;;EA5DQC,2BAAP;IACE,OAAOP,eAAP;EACD,CAFM;EAYP;;;;;EAGUO,qCAAV;IACE;IACA,OAAOA,MAAM,CAACC,iBAAP,EAAP;EACD,CAHS;EAKV;;;;;EAGUD,oCAAV;IACE,OAAOR,OAAP;EACD,CAFS;EAIV;;;;;;;;EAMOQ,4BAAP,UAAgBE,IAAhB,EAAiCC,SAAjC,EAA4DC,MAA5D,EAAkF;IAAtB;MAAAA;IAAsB;;IAChF,IAAMC,QAAQ,GAAGd,yBAAyB,CAAC,KAAKe,KAAN,CAA1C;IAEAjB,IAAI,CAACgB,QAAD,EAAW,UAACE,GAAD,EAAa;MAC1B,IAAIJ,SAAS,CAACI,GAAG,CAACC,OAAJ,EAAD,CAAb,EAA8B;QAC5BD,GAAG,CAACE,QAAJ,CAAaP,IAAb,EAAmBE,MAAnB;MACD;IACF,CAJG,CAAJ;EAKD,CARM;EAUP;;;;;EAGOJ,6BAAP;IACE,IAAMK,QAAQ,GAAGd,yBAAyB,CAAC,KAAKe,KAAN,CAA1C;IAEA,IAAMI,YAAY,GAAkB,EAApC;IACArB,IAAI,CAACgB,QAAD,EAAW,UAACM,OAAD,EAAiB;MAC9B,IAAMC,IAAI,GAAGD,OAAO,CAACH,OAAR,EAAb;MACA,IAAMK,MAAM,GAAGF,OAAO,CAACG,SAAR,EAAf;MACAzB,IAAI,CAACwB,MAAD,EAAS,UAACE,KAAD,EAAM;QACjBL,YAAY,CAACM,IAAb,CAAkB;UAAEJ,IAAI,MAAN;UAAQG,KAAK,OAAb;UAAeE,QAAQ,EAAEN,OAAO,CAACM,QAAjC;UAA2CN,OAAO;QAAlD,CAAlB;MACD,CAFG,CAAJ;IAGD,CANG,CAAJ;IAQA,OAAOD,YAAP;EACD,CAbM,CAlDT,CAQE;;EACA;;;EACOV,4BAAqBL,yBAArB;EACP;;EACOK,uBAAgBJ,cAAhB;EACP;;EACOI,6BAAsBH,oBAAtB;EAkDT;AAAC,CAhED,CAA4BP,IAA5B;;SAAaU","names":["each","Plot","getAllElementsRecursively","adaptor","DEFAULT_OPTIONS","FUNNEL_CONVERSATION","FUNNEL_CONVERSATION_FIELD","FUNNEL_PERCENT","FUNNEL_TOTAL_PERCENT","__extends","_this","Funnel","getDefaultOptions","type","condition","status","elements","chart","ele","getData","setState","stateObjects","element","data","states","getStates","state","push","geometry"],"sourceRoot":"","sources":["../../../src/plots/funnel/index.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { Element } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { StateName, StateCondition, StateObject } from '../..';\nimport { getAllElementsRecursively } from '../../utils';\nimport { FunnelOptions } from './types';\nimport { adaptor } from './adaptor';\nimport {\n  DEFAULT_OPTIONS,\n  FUNNEL_CONVERSATION as FUNNEL_CONVERSATION_FIELD,\n  FUNNEL_PERCENT,\n  FUNNEL_TOTAL_PERCENT,\n} from './constant';\n\nexport type { FunnelOptions };\n\nexport { FUNNEL_CONVERSATION_FIELD };\n\nexport class Funnel extends Plot<FunnelOptions> {\n  /** 图表类型 */\n  public type: string = 'funnel';\n\n  static getDefaultOptions(): Partial<FunnelOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  // 内部变量\n  /** 漏斗 转化率 字段 */\n  static CONVERSATION_FIELD = FUNNEL_CONVERSATION_FIELD;\n  /** 漏斗 百分比 字段 */\n  static PERCENT_FIELD = FUNNEL_PERCENT;\n  /** 漏斗 总转换率百分比 字段 */\n  static TOTAL_PERCENT_FIELD = FUNNEL_TOTAL_PERCENT;\n\n  /**\n   * 获取 漏斗图 默认配置项\n   */\n  protected getDefaultOptions(): Partial<FunnelOptions> {\n    // 由于不同漏斗图 defaultOption 有部分逻辑不同，此处仅处理 core.getDefaultOptions 覆盖范围，funnel 的 defaulOption 为不分散逻辑统一写到 adaptor 的 defaultOption 中\n    return Funnel.getDefaultOptions();\n  }\n\n  /**\n   * 获取 漏斗图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<FunnelOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  public setState(type: StateName, condition: StateCondition, status: boolean = true) {\n    const elements = getAllElementsRecursively(this.chart);\n\n    each(elements, (ele: Element) => {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  }\n\n  /**\n   * 获取状态\n   */\n  public getStates(): StateObject[] {\n    const elements = getAllElementsRecursively(this.chart);\n\n    const stateObjects: StateObject[] = [];\n    each(elements, (element: Element) => {\n      const data = element.getData();\n      const states = element.getStates();\n      each(states, (state) => {\n        stateObjects.push({ data, state, geometry: element.geometry, element });\n      });\n    });\n\n    return stateObjects;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}