{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __assign, __rest, __spreadArrays } from \"tslib\";\nimport { uniq, isFunction, isObject, isString, isNumber, isEmpty } from '@antv/util';\nimport { transformLabel } from '../../utils';\n/**\n * 获得映射的字段列表\n * @param options\n * @param field\n */\n\nexport function getMappingField(o, field) {\n  var type = o.type,\n      xField = o.xField,\n      yField = o.yField,\n      colorField = o.colorField,\n      shapeField = o.shapeField,\n      sizeField = o.sizeField,\n      styleField = o.styleField,\n      _a = o.rawFields,\n      rawFields = _a === void 0 ? [] : _a;\n  var fields = []; // 因为 color 会影响到数据分组，以及最后的图形映射。所以导致 bar 图中的 widthRatio 设置不生效\n  // 所以对于 color 字段，仅仅保留 colorField 好了！ + rawFields\n  // shape, size 同理\n\n  if (field === 'color') {\n    fields = __spreadArrays([colorField || xField], rawFields);\n  } else if (field === 'shape') {\n    fields = __spreadArrays([shapeField || xField], rawFields);\n  } else if (field === 'size') {\n    fields = __spreadArrays([sizeField || xField], rawFields);\n  } else {\n    fields = __spreadArrays([xField, yField, colorField, shapeField, sizeField, styleField], rawFields); // 一定能找到的！\n\n    var idx = ['x', 'y', 'color', 'shape', 'size', 'style'].indexOf(field);\n    var f = fields[idx]; // 删除当前字段\n\n    fields.splice(idx, 1); // 插入到第一个\n\n    fields.unshift(f);\n  }\n\n  var mappingFields = uniq(fields.filter(function (f) {\n    return !!f;\n  }));\n  /**\n   * 修复 line geometry 无拆分时 color 回调错误\n   * eg:\n   *   geometry.color(xField, ()=> '#f24')\n   */\n\n  var tileMappingField = type === 'line' && [xField, yField].includes(mappingFields.join('*')) ? '' : mappingFields.join('*');\n  return {\n    mappingFields: mappingFields,\n    tileMappingField: tileMappingField\n  };\n}\n/**\n * 获得映射函数\n * @param mappingFields\n * @param func\n */\n\nexport function getMappingFunction(mappingFields, func) {\n  if (!func) return undefined; // 返回函数\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var params = {};\n    mappingFields.forEach(function (f, idx) {\n      params[f] = args[idx];\n    }); // 删除 undefined\n\n    delete params['undefined'];\n    return func(params);\n  };\n}\n/**\n * 通用 geometry 的配置处理的 adaptor\n * @param params\n */\n\nexport function geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var type = options.type,\n      args = options.args,\n      mapping = options.mapping,\n      xField = options.xField,\n      yField = options.yField,\n      colorField = options.colorField,\n      shapeField = options.shapeField,\n      sizeField = options.sizeField,\n      tooltipFields = options.tooltipFields,\n      label = options.label,\n      state = options.state,\n      customInfo = options.customInfo; // 如果没有 mapping 信息，那么直接返回\n\n  if (!mapping) {\n    return params;\n  }\n\n  var color = mapping.color,\n      shape = mapping.shape,\n      size = mapping.size,\n      style = mapping.style,\n      tooltip = mapping.tooltip; // 创建 geometry\n\n  var geometry = chart[type](args).position(xField + \"*\" + yField);\n  /**\n   * color 的几种情况\n   * g.color('red');\n   * g.color('color', ['red', 'blue']);\n   * g.color('x', (x, y) => 'red');\n   * g.color('color', (color, x, y) => 'red');\n   */\n\n  if (isString(color)) {\n    colorField ? geometry.color(colorField, color) : geometry.color(color);\n  } else if (isFunction(color)) {\n    var _a = getMappingField(options, 'color'),\n        mappingFields = _a.mappingFields,\n        tileMappingField = _a.tileMappingField;\n\n    geometry.color(tileMappingField, getMappingFunction(mappingFields, color));\n  } else {\n    colorField && geometry.color(colorField, color);\n  }\n  /**\n   * shape 的几种情况\n   * g.shape('rect');\n   * g.shape('shape', ['rect', 'circle']);\n   * g.shape('x*y', (x, y) => 'rect');\n   * g.shape('shape*x*y', (shape, x, y) => 'rect');\n   */\n\n\n  if (isString(shape)) {\n    shapeField ? geometry.shape(shapeField, [shape]) : geometry.shape(shape); // [shape] 需要在 G2 做掉\n  } else if (isFunction(shape)) {\n    var _b = getMappingField(options, 'shape'),\n        mappingFields = _b.mappingFields,\n        tileMappingField = _b.tileMappingField;\n\n    geometry.shape(tileMappingField, getMappingFunction(mappingFields, shape));\n  } else {\n    shapeField && geometry.shape(shapeField, shape);\n  }\n  /**\n   * size 的几种情况\n   * g.size(10);\n   * g.size('size', [10, 20]);\n   * g.size('x*y', (x, y) => 10);\n   * g.color('size*x*y', (size, x, y) => 1-);\n   */\n\n\n  if (isNumber(size)) {\n    sizeField ? geometry.size(sizeField, size) : geometry.size(size);\n  } else if (isFunction(size)) {\n    var _c = getMappingField(options, 'size'),\n        mappingFields = _c.mappingFields,\n        tileMappingField = _c.tileMappingField;\n\n    geometry.size(tileMappingField, getMappingFunction(mappingFields, size));\n  } else {\n    sizeField && geometry.size(sizeField, size);\n  }\n  /**\n   * style 的几种情况\n   * g.style({ fill: 'red' });\n   * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));\n   */\n\n\n  if (isFunction(style)) {\n    var _d = getMappingField(options, 'style'),\n        mappingFields = _d.mappingFields,\n        tileMappingField = _d.tileMappingField;\n\n    geometry.style(tileMappingField, getMappingFunction(mappingFields, style));\n  } else if (isObject(style)) {\n    geometry.style(style);\n  }\n  /**\n   * tooltip 的 API\n   * g.tooltip('x*y*color', (x, y, color) => ({ name, value }));\n   * g.tooltip(false);\n   */\n\n\n  if (tooltipFields === false) {\n    geometry.tooltip(false);\n  } else if (!isEmpty(tooltipFields)) {\n    geometry.tooltip(tooltipFields.join('*'), getMappingFunction(tooltipFields, tooltip));\n  }\n  /**\n   * label 的映射\n   */\n\n\n  if (label === false) {\n    geometry.label(false);\n  } else if (label) {\n    var callback = label.callback,\n        fields = label.fields,\n        cfg = __rest(label, [\"callback\", \"fields\"]);\n\n    geometry.label({\n      fields: fields || [yField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  /**\n   * state 状态样式\n   */\n\n\n  if (state) {\n    geometry.state(state);\n  }\n  /**\n   * 自定义信息\n   */\n\n\n  if (customInfo) {\n    geometry.customInfo(customInfo);\n  } // 防止因为 x y 字段做了通道映射，导致生成图例\n\n\n  [xField, yField].filter(function (f) {\n    return f !== colorField;\n  }).forEach(function (f) {\n    chart.legend(f, false);\n  });\n  return __assign(__assign({}, params), {\n    // geometry adaptor 额外需要做的事情，就是将创建好的 geometry 返回到下一层 adaptor，防止通过 type 查询的时候容易误判\n    ext: {\n      geometry: geometry\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["uniq","isFunction","isObject","isString","isNumber","isEmpty","transformLabel","getMappingField","o","field","xField","yField","colorField","shapeField","sizeField","styleField","_a","rawFields","fields","idx","indexOf","f","splice","unshift","mappingFields","filter","tileMappingField","type","includes","join","getMappingFunction","func","undefined","args","params","forEach","geometry","options","mapping","tooltipFields","label","state","customInfo","shape","size","style","tooltip","chart","position","color","cfg","callback","legend","ext"],"sourceRoot":"","sources":["../../../src/adaptor/geometries/base.ts"],"sourcesContent":["import { uniq, isFunction, isObject, isString, isNumber, isEmpty } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { ColorAttr, ShapeAttr, SizeAttr, StyleAttr, TooltipAttr, Options, Datum } from '../../types';\nimport { Label } from '../../types/label';\nimport { State } from '../../types/state';\nimport { transformLabel } from '../../utils';\n\n/**\n * 图形映射属性，按照优先级来的\n */\nexport type MappingOptions = {\n  /** color 映射 */\n  readonly color?: ColorAttr;\n  /** shape 映射 */\n  readonly shape?: ShapeAttr;\n  /** 大小映射, 提供回调的方式 */\n  readonly size?: SizeAttr;\n  /** 样式映射 */\n  readonly style?: StyleAttr;\n  /** tooltip 映射 */\n  readonly tooltip?: TooltipAttr;\n};\n\n/**\n * 一个图形映射的逻辑，纯粹的图形语法\n * // TODO 后续需要处理 adjust 的配置，然后通过 field 信息。比如 styleField，labelField 等一定是一个数组形式\n */\nexport type Geometry = {\n  /** geometry 类型, 'line' | 'interval' | 'point' | 'area' | 'polygon' */\n  readonly type?: string;\n  /** x 轴字段 */\n  readonly xField?: string;\n  /** y 轴字段 */\n  readonly yField?: string;\n  /** 分组字段 */\n  readonly colorField?: string;\n  /** shape 的映射字段 */\n  readonly shapeField?: string;\n  /** size 映射字段 */\n  readonly sizeField?: string;\n  /** style 的映射字段 */\n  readonly styleField?: string;\n  /** tooltip 的映射字段 */\n  readonly tooltipFields?: string[] | false;\n  /** 其他原始字段, 用于 mapping 回调参数 */\n  readonly rawFields?: string[];\n  /** 图形映射规则 */\n  readonly mapping?: MappingOptions;\n  /** label 映射通道，因为历史原因导致实现略有区别 */\n  readonly label?: Label;\n  /** 不同状态的样式 */\n  readonly state?: State;\n  /** 自定义信息，一般在 registerShape 中使用 */\n  readonly customInfo?: any;\n  /** geometry params */\n  readonly args?: any;\n};\n\n/**\n * geometry options\n */\nexport type GeometryOptions = Geometry & Partial<Options>;\n\n/**\n * 获得映射的字段列表\n * @param options\n * @param field\n */\nexport function getMappingField(\n  o: GeometryOptions,\n  field: 'color' | 'shape' | 'size' | 'style'\n): {\n  mappingFields: string[];\n  tileMappingField: string;\n} {\n  const { type, xField, yField, colorField, shapeField, sizeField, styleField, rawFields = [] } = o;\n\n  let fields = [];\n\n  // 因为 color 会影响到数据分组，以及最后的图形映射。所以导致 bar 图中的 widthRatio 设置不生效\n  // 所以对于 color 字段，仅仅保留 colorField 好了！ + rawFields\n  // shape, size 同理\n  if (field === 'color') {\n    fields = [colorField || xField, ...rawFields];\n  } else if (field === 'shape') {\n    fields = [shapeField || xField, ...rawFields];\n  } else if (field === 'size') {\n    fields = [sizeField || xField, ...rawFields];\n  } else {\n    fields = [xField, yField, colorField, shapeField, sizeField, styleField, ...rawFields];\n\n    // 一定能找到的！\n    const idx = ['x', 'y', 'color', 'shape', 'size', 'style'].indexOf(field);\n\n    const f = fields[idx];\n    // 删除当前字段\n    fields.splice(idx, 1);\n    // 插入到第一个\n    fields.unshift(f);\n  }\n\n  const mappingFields = uniq(fields.filter((f) => !!f));\n  /**\n   * 修复 line geometry 无拆分时 color 回调错误\n   * eg:\n   *   geometry.color(xField, ()=> '#f24')\n   */\n  const tileMappingField =\n    type === 'line' && [xField, yField].includes(mappingFields.join('*')) ? '' : mappingFields.join('*');\n  return {\n    mappingFields,\n    tileMappingField,\n  };\n}\n\n/**\n * 获得映射函数\n * @param mappingFields\n * @param func\n */\nexport function getMappingFunction(mappingFields: string[], func: (datum: Datum) => any) {\n  if (!func) return undefined;\n  // 返回函数\n  return (...args: any[]) => {\n    const params: Datum = {};\n\n    mappingFields.forEach((f: string, idx: number) => {\n      params[f] = args[idx];\n    });\n\n    // 删除 undefined\n    delete params['undefined'];\n\n    return func(params);\n  };\n}\n\n/**\n * 通用 geometry 的配置处理的 adaptor\n * @param params\n */\nexport function geometry<O extends GeometryOptions>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const {\n    type,\n    args,\n    mapping,\n    xField,\n    yField,\n    colorField,\n    shapeField,\n    sizeField,\n    tooltipFields,\n    label,\n    state,\n    customInfo,\n  } = options;\n\n  // 如果没有 mapping 信息，那么直接返回\n  if (!mapping) {\n    return params;\n  }\n\n  const { color, shape, size, style, tooltip } = mapping;\n\n  // 创建 geometry\n  const geometry = chart[type](args).position(`${xField}*${yField}`);\n\n  /**\n   * color 的几种情况\n   * g.color('red');\n   * g.color('color', ['red', 'blue']);\n   * g.color('x', (x, y) => 'red');\n   * g.color('color', (color, x, y) => 'red');\n   */\n  if (isString(color)) {\n    colorField ? geometry.color(colorField, color) : geometry.color(color);\n  } else if (isFunction(color)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'color');\n    geometry.color(tileMappingField, getMappingFunction(mappingFields, color));\n  } else {\n    colorField && geometry.color(colorField, color);\n  }\n\n  /**\n   * shape 的几种情况\n   * g.shape('rect');\n   * g.shape('shape', ['rect', 'circle']);\n   * g.shape('x*y', (x, y) => 'rect');\n   * g.shape('shape*x*y', (shape, x, y) => 'rect');\n   */\n  if (isString(shape)) {\n    shapeField ? geometry.shape(shapeField, [shape]) : geometry.shape(shape); // [shape] 需要在 G2 做掉\n  } else if (isFunction(shape)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'shape');\n    geometry.shape(tileMappingField, getMappingFunction(mappingFields, shape));\n  } else {\n    shapeField && geometry.shape(shapeField, shape);\n  }\n\n  /**\n   * size 的几种情况\n   * g.size(10);\n   * g.size('size', [10, 20]);\n   * g.size('x*y', (x, y) => 10);\n   * g.color('size*x*y', (size, x, y) => 1-);\n   */\n  if (isNumber(size)) {\n    sizeField ? geometry.size(sizeField, size) : geometry.size(size);\n  } else if (isFunction(size)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'size');\n    geometry.size(tileMappingField, getMappingFunction(mappingFields, size));\n  } else {\n    sizeField && geometry.size(sizeField, size);\n  }\n\n  /**\n   * style 的几种情况\n   * g.style({ fill: 'red' });\n   * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));\n   */\n  if (isFunction(style)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'style');\n    geometry.style(tileMappingField, getMappingFunction(mappingFields, style));\n  } else if (isObject(style)) {\n    geometry.style(style);\n  }\n\n  /**\n   * tooltip 的 API\n   * g.tooltip('x*y*color', (x, y, color) => ({ name, value }));\n   * g.tooltip(false);\n   */\n  if (tooltipFields === false) {\n    geometry.tooltip(false);\n  } else if (!isEmpty(tooltipFields)) {\n    geometry.tooltip(tooltipFields.join('*'), getMappingFunction(tooltipFields, tooltip));\n  }\n\n  /**\n   * label 的映射\n   */\n  if (label === false) {\n    geometry.label(false);\n  } else if (label) {\n    const { callback, fields, ...cfg } = label;\n    geometry.label({\n      fields: fields || [yField],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  /**\n   * state 状态样式\n   */\n  if (state) {\n    geometry.state(state);\n  }\n\n  /**\n   * 自定义信息\n   */\n  if (customInfo) {\n    geometry.customInfo(customInfo);\n  }\n\n  // 防止因为 x y 字段做了通道映射，导致生成图例\n  [xField, yField]\n    .filter((f: string) => f !== colorField)\n    .forEach((f: string) => {\n      chart.legend(f, false);\n    });\n  return {\n    ...params,\n    // geometry adaptor 额外需要做的事情，就是将创建好的 geometry 返回到下一层 adaptor，防止通过 type 查询的时候容易误判\n    ext: { geometry },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}