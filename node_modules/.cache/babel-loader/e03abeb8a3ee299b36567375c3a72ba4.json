{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isArray, isNumber } from '@antv/util';\n/**\n * @ignore\n * 是否是自动 padding\n * @param padding\n */\n\nexport function isAutoPadding(padding) {\n  return !isNumber(padding) && !isArray(padding);\n}\n/**\n * @ignore\n * padding 的解析逻辑\n * @param padding\n * @return [ top, right, bottom, left ]\n */\n\nexport function parsePadding(padding) {\n  if (padding === void 0) {\n    padding = 0;\n  }\n\n  var paddingArray = isArray(padding) ? padding : [padding];\n\n  switch (paddingArray.length) {\n    case 0:\n      paddingArray = [0, 0, 0, 0];\n      break;\n\n    case 1:\n      paddingArray = new Array(4).fill(paddingArray[0]);\n      break;\n\n    case 2:\n      paddingArray = __spreadArray(__spreadArray([], __read(paddingArray), false), __read(paddingArray), false);\n      break;\n\n    case 3:\n      paddingArray = __spreadArray(__spreadArray([], __read(paddingArray), false), [paddingArray[1]], false);\n      break;\n\n    default:\n      // 其他情况，只去四个\n      paddingArray = paddingArray.slice(0, 4);\n      break;\n  }\n\n  return paddingArray;\n}","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,YAAlC;AAGA;;;;;;AAKA,OAAM,SAAUC,aAAV,CAAwBC,OAAxB,EAA4C;EAChD,OAAO,CAACF,QAAQ,CAACE,OAAD,CAAT,IAAsB,CAACH,OAAO,CAACG,OAAD,CAArC;AACD;AAED;;;;;;;AAMA,OAAM,SAAUC,YAAV,CAAuBD,OAAvB,EAAqD;EAA9B;IAAAA;EAA8B;;EACzD,IAAIE,YAAY,GAAGL,OAAO,CAACG,OAAD,CAAP,GAAmBA,OAAnB,GAA6B,CAACA,OAAD,CAAhD;;EAEA,QAAQE,YAAY,CAACC,MAArB;IACE,KAAK,CAAL;MACED,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf;MACA;;IACF,KAAK,CAAL;MACEA,YAAY,GAAG,IAAIE,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkBH,YAAY,CAAC,CAAD,CAA9B,CAAf;MACA;;IACF,KAAK,CAAL;MACEA,YAAY,0CAAOA,YAAP,GAAmB,KAAnB,GAAmBI,OAAKJ,YAAL,CAAnB,EAAoC,KAApC,CAAZ;MACA;;IACF,KAAK,CAAL;MACEA,YAAY,0CAAOA,YAAP,GAAmB,KAAnB,GAAmB,CAAEA,YAAY,CAAC,CAAD,CAAd,CAAnB,EAAoC,KAApC,CAAZ;MACA;;IACF;MACE;MACAA,YAAY,GAAGA,YAAY,CAACK,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAAf;MACA;EAhBJ;;EAmBA,OAAOL,YAAP;AACD","names":["isArray","isNumber","isAutoPadding","padding","parsePadding","paddingArray","length","Array","fill","__read","slice"],"sourceRoot":"","sources":["../../src/util/padding.ts"],"sourcesContent":["import { isArray, isNumber } from '@antv/util';\nimport { Padding, ViewPadding } from '../interface';\n\n/**\n * @ignore\n * 是否是自动 padding\n * @param padding\n */\nexport function isAutoPadding(padding: ViewPadding): padding is 'auto' {\n  return !isNumber(padding) && !isArray(padding);\n}\n\n/**\n * @ignore\n * padding 的解析逻辑\n * @param padding\n * @return [ top, right, bottom, left ]\n */\nexport function parsePadding(padding: number[] | number = 0): Padding {\n  let paddingArray = isArray(padding) ? padding : [padding];\n\n  switch (paddingArray.length) {\n    case 0:\n      paddingArray = [0, 0, 0, 0];\n      break;\n    case 1:\n      paddingArray = new Array(4).fill(paddingArray[0]);\n      break;\n    case 2:\n      paddingArray = [...paddingArray, ...paddingArray];\n      break;\n    case 3:\n      paddingArray = [...paddingArray, paddingArray[1]];\n      break;\n    default:\n      // 其他情况，只去四个\n      paddingArray = paddingArray.slice(0, 4);\n      break;\n  }\n\n  return paddingArray as [number, number, number, number];\n}\n"]},"metadata":{},"sourceType":"module"}