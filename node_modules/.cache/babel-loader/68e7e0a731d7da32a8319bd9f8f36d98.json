{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport { processImageMask, transform } from './utils'; // 注册的shape\n\nimport './shapes/word-cloud';\n\nvar WordCloud =\n/** @class */\nfunction (_super) {\n  __extends(WordCloud, _super);\n\n  function WordCloud() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 词云图 */\n\n\n    _this.type = 'word-cloud';\n    return _this;\n  }\n  /**\n   * 获取 词云图 默认配置项\n   * 供外部使用\n   */\n\n\n  WordCloud.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   * @param data\n   */\n\n\n  WordCloud.prototype.changeData = function (data) {\n    this.updateOption({\n      data: data\n    });\n\n    if (this.options.imageMask) {\n      this.render();\n    } else {\n      this.chart.changeData(transform({\n        chart: this.chart,\n        options: this.options\n      }));\n    }\n  };\n  /**\n   * 获取默认的 options 配置项\n   */\n\n\n  WordCloud.prototype.getDefaultOptions = function () {\n    return WordCloud.getDefaultOptions();\n  };\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n\n\n  WordCloud.prototype.render = function () {\n    var _this = this;\n\n    return new Promise(function (res) {\n      var imageMask = _this.options.imageMask;\n\n      if (!imageMask) {\n        // 调用父类渲染函数\n        _super.prototype.render.call(_this);\n\n        res();\n        return;\n      }\n\n      var handler = function (img) {\n        _this.options = __assign(__assign({}, _this.options), {\n          imageMask: img || null\n        }); // 调用父类渲染函数\n\n        _super.prototype.render.call(_this);\n\n        res();\n      };\n\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  };\n  /**\n   * 获取 词云图 的适配器\n   */\n\n\n  WordCloud.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n\n\n  WordCloud.prototype.triggerResize = function () {\n    var _this = this;\n\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor(); // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n\n      window.setTimeout(function () {\n        // 执行父类的方法\n        _super.prototype.triggerResize.call(_this);\n      });\n    }\n  };\n\n  return WordCloud;\n}(Plot);\n\nexport { WordCloud };","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,QAAqB,iBAArB;AAGA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,SAA5C,C,CACA;;AACA,OAAO,qBAAP;;AAIA;AAAA;AAAA;EAA+BC;;EAA/B;IAAA;IASE;;;IACOC,aAAe,YAAf;;EA4ER;EArFC;;;;;;EAIOC,8BAAP;IACE,OAAOL,eAAP;EACD,CAFM;EAOP;;;;;;EAIOK,iCAAP,UAAkBC,IAAlB,EAAsB;IACpB,KAAKC,YAAL,CAAkB;MAAED,IAAI;IAAN,CAAlB;;IACA,IAAI,KAAKE,OAAL,CAAaC,SAAjB,EAA4B;MAC1B,KAAKC,MAAL;IACD,CAFD,MAEO;MACL,KAAKC,KAAL,CAAWC,UAAX,CAAsBV,SAAS,CAAC;QAAES,KAAK,EAAE,KAAKA,KAAd;QAAqBH,OAAO,EAAE,KAAKA;MAAnC,CAAD,CAA/B;IACD;EACF,CAPM;EASP;;;;;EAGUH,wCAAV;IACE,OAAOA,SAAS,CAACQ,iBAAV,EAAP;EACD,CAFS;EAIV;;;;;EAGOR,6BAAP;IAAA;;IACE,OAAO,IAAIS,OAAJ,CAAkB,UAACC,GAAD,EAAI;MACnB,aAAS,GAAKX,KAAI,CAACI,OAAL,CAAYC,SAA1B;;MAER,IAAI,CAACA,SAAL,EAAgB;QACd;QACAO,iBAAMN,MAAN,CAAYO,IAAZ,CAAYb,KAAZ;;QACAW,GAAG;QACH;MACD;;MAED,IAAMG,OAAO,GAAG,UAACC,GAAD,EAAsB;QACpCf,KAAI,CAACI,OAAL,GAAYY,sBACPhB,KAAI,CAACI,OADE,GACK;UACfC,SAAS,EAAEU,GAAG,IAAI;QADH,CADL,CAAZ,CADoC,CAMpC;;QACAH,iBAAMN,MAAN,CAAYO,IAAZ,CAAYb,KAAZ;;QACAW,GAAG;MACJ,CATD;;MAWAd,gBAAgB,CAACQ,SAAD,CAAhB,CAA4BY,IAA5B,CAAiCH,OAAjC,EAA0CI,KAA1C,CAAgDJ,OAAhD;IACD,CAtBM,CAAP;EAuBD,CAxBM;EA0BP;;;;;EAGUb,uCAAV;IACE,OAAON,OAAP;EACD,CAFS;EAIV;;;;;EAGUM,oCAAV;IAAA;;IACE,IAAI,CAAC,KAAKM,KAAL,CAAWY,SAAhB,EAA2B;MACzB;MACA;MACA;MACA,KAAKC,WAAL,GAJyB,CAMzB;MACA;;MACAC,MAAM,CAACC,UAAP,CAAkB;QAChB;QACAV,iBAAMW,aAAN,CAAmBV,IAAnB,CAAmBb,KAAnB;MACD,CAHD;IAID;EACF,CAdS;;EAeZ;AAAC,CAtFD,CAA+BN,IAA/B","names":["Plot","adaptor","DEFAULT_OPTIONS","processImageMask","transform","__extends","_this","WordCloud","data","updateOption","options","imageMask","render","chart","changeData","getDefaultOptions","Promise","res","_super","call","handler","img","__assign","then","catch","destroyed","execAdaptor","window","setTimeout","triggerResize"],"sourceRoot":"","sources":["../../../src/plots/word-cloud/index.ts"],"sourcesContent":["import { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { WordCloudOptions } from './types';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport { processImageMask, transform } from './utils';\n// 注册的shape\nimport './shapes/word-cloud';\n\nexport type { WordCloudOptions };\n\nexport class WordCloud extends Plot<WordCloudOptions> {\n  /**\n   * 获取 词云图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<WordCloudOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 词云图 */\n  public type: string = 'word-cloud';\n\n  /**\n   * @override\n   * @param data\n   */\n  public changeData(data) {\n    this.updateOption({ data });\n    if (this.options.imageMask) {\n      this.render();\n    } else {\n      this.chart.changeData(transform({ chart: this.chart, options: this.options }));\n    }\n  }\n\n  /**\n   * 获取默认的 options 配置项\n   */\n  protected getDefaultOptions(): Partial<WordCloudOptions> {\n    return WordCloud.getDefaultOptions();\n  }\n\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n  public render() {\n    return new Promise<void>((res) => {\n      const { imageMask } = this.options;\n\n      if (!imageMask) {\n        // 调用父类渲染函数\n        super.render();\n        res();\n        return;\n      }\n\n      const handler = (img: HTMLImageElement) => {\n        this.options = {\n          ...this.options,\n          imageMask: img || null,\n        };\n\n        // 调用父类渲染函数\n        super.render();\n        res();\n      };\n\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  }\n\n  /**\n   * 获取 词云图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<WordCloudOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n  protected triggerResize() {\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor();\n\n      // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n      window.setTimeout(() => {\n        // 执行父类的方法\n        super.triggerResize();\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}