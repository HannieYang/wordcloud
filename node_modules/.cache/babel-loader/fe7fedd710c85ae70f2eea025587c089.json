{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { __assign, __extends, __values } from \"tslib\";\n/**\n * Create By Bruce Too\n * On 2020-02-10\n */\n\nimport { assign, deepMix, each, get } from '@antv/util';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * Tree Facet\n */\n\nvar Tree =\n/** @class */\nfunction (_super) {\n  __extends(Tree, _super);\n\n  function Tree() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.afterChartRender = function () {\n      if (_this.facets && _this.cfg.line) {\n        _this.container.clear();\n\n        _this.drawLines(_this.facets);\n      }\n    };\n\n    return _this;\n  }\n\n  Tree.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n\n  Tree.prototype.beforeEachView = function (view, facet) {};\n\n  Tree.prototype.init = function () {\n    _super.prototype.init.call(this);\n\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  };\n\n  Tree.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd'\n        },\n        smooth: false\n      },\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n\n  Tree.prototype.generateFacets = function (data) {\n    var fields = this.cfg.fields;\n\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n\n    var rst = [];\n    var rootFacet = {\n      type: this.cfg.type,\n      data: data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: ''\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  };\n\n  Tree.prototype.setRegion = function (facets) {\n    var _this = this;\n\n    this.forceColIndex(facets);\n    facets.forEach(function (facet) {\n      // @ts-ignore 允许调整\n      facet.region = _this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  };\n\n  Tree.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    var xWidth = 1 / cols; // x轴方向的每个分面的偏移\n\n    var yWidth = 1 / rows; // y轴方向的每个分面的偏移\n\n    var start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex\n    };\n    var end = {\n      x: start.x + xWidth,\n      y: start.y + yWidth * 2 / 3 // 预留1/3的空隙，方便添加连接线\n\n    };\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  Tree.prototype.forceColIndex = function (facets) {\n    var e_1, _a;\n\n    var _this = this;\n\n    var leafs = [];\n    var index = 0;\n    facets.forEach(function (facet) {\n      if (_this.isLeaf(facet)) {\n        leafs.push(facet); // @ts-ignore 允许调整\n\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n    leafs.forEach(function (facet) {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    var maxLevel = this.cfg.fields.length;\n\n    for (var i = maxLevel - 1; i >= 0; i--) {\n      var levelFacets = this.getFacetsByLevel(facets, i);\n\n      try {\n        // var yIndex = maxLevel - i;\n        for (var levelFacets_1 = (e_1 = void 0, __values(levelFacets)), levelFacets_1_1 = levelFacets_1.next(); !levelFacets_1_1.done; levelFacets_1_1 = levelFacets_1.next()) {\n          var facet = levelFacets_1_1.value;\n\n          if (!this.isLeaf(facet)) {\n            facet.originColIndex = facet.columnIndex; // @ts-ignore\n\n            facet.columnIndex = this.getRegionIndex(facet.children); // @ts-ignore\n\n            facet.columnValuesLength = leafs.length;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (levelFacets_1_1 && !levelFacets_1_1.done && (_a = levelFacets_1.return)) _a.call(levelFacets_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  }; // get facet use level\n\n\n  Tree.prototype.getFacetsByLevel = function (facets, level) {\n    var rst = [];\n    facets.forEach(function (facet) {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  }; // if the facet has children , make it's column index in the middle of it's children\n\n\n  Tree.prototype.getRegionIndex = function (children) {\n    var first = children[0];\n    var last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  }; // is  a leaf without children\n\n\n  Tree.prototype.isLeaf = function (facet) {\n    return !facet.children || !facet.children.length;\n  };\n\n  Tree.prototype.getRows = function () {\n    return this.cfg.fields.length + 1;\n  }; // get child\n\n\n  Tree.prototype.getChildFacets = function (data, level, arr) {\n    var _this = this; // [ 'grade', 'class' ]\n\n\n    var fields = this.cfg.fields;\n    var length = fields.length;\n\n    if (length < level) {\n      return;\n    }\n\n    var rst = []; // get fist level except root node\n\n    var field = fields[level - 1]; // get field value\n\n    var values = this.getFieldValues(data, field);\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var subData = data.filter(_this.getFacetDataFilter(conditions));\n\n      if (subData.length) {\n        var facet = {\n          type: _this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: _this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: _this.getChildFacets(subData, level + 1, arr)\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  };\n\n  Tree.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n\n  Tree.prototype.renderTitle = function () {\n    var _this = this;\n\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n          view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n\n  Tree.prototype.drawLines = function (facets) {\n    var _this = this;\n\n    facets.forEach(function (facet) {\n      if (!_this.isLeaf(facet)) {\n        var children = facet.children;\n\n        _this.addFacetLines(facet, children);\n      }\n    });\n  }; // add lines with it's children\n\n\n  Tree.prototype.addFacetLines = function (facet, children) {\n    var _this = this;\n\n    var view = facet.view;\n    var region = view.coordinateBBox; // top, right, bottom, left\n\n    var start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height\n    };\n    children.forEach(function (subFacet) {\n      var subRegion = subFacet.view.coordinateBBox;\n      var end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y\n      };\n      var middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2\n      };\n      var middle2 = {\n        x: end.x,\n        y: middle1.y\n      };\n\n      _this.drawLine([start, middle1, middle2, end]);\n    });\n  };\n\n  Tree.prototype.getPath = function (points) {\n    var path = [];\n    var smooth = this.cfg.line.smooth;\n\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n\n    return path;\n  }; // draw line width points\n\n\n  Tree.prototype.drawLine = function (points) {\n    var path = this.getPath(points);\n    var line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign({\n        // @ts-ignore\n        path: path\n      }, line)\n    });\n  };\n\n  Tree.prototype.getXAxisOption = function (x, axes, option, facet) {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n\n    return option;\n  };\n\n  Tree.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n\n    return option;\n  };\n\n  return Tree;\n}(Facet);\n\nexport default Tree;","map":{"version":3,"mappings":"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","names":["assign","deepMix","each","get","DIRECTION","VIEW_LIFE_CIRCLE","getFactTitleConfig","Facet","__extends","_this","facets","cfg","line","container","clear","drawLines","Tree","view","facet","processAxis","_super","init","call","on","AFTER_RENDER","afterChartRender","getDefaultCfg","type","style","lineWidth","stroke","smooth","showTitle","title","getDefaultTitleCfg","data","fields","length","Error","rst","rootFacet","region","rowValuesLength","getRows","columnValuesLength","rowIndex","columnIndex","rowField","columnField","rowValue","columnValue","push","children","getChildFacets","setRegion","forceColIndex","forEach","getRegion","rows","cols","xIndex","yIndex","xWidth","yWidth","start","x","y","end","leafs","index","isLeaf","maxLevel","i","levelFacets","getFacetsByLevel","levelFacets_1_1","originColIndex","getRegionIndex","level","first","last","arr","field","values","getFieldValues","value","conditions","subData","filter","getFacetDataFilter","render","renderTitle","formatter","config","position","content","TOP","annotation","text","addFacetLines","coordinateBBox","width","height","subFacet","subRegion","bl","tr","middle1","middle2","drawLine","points","path","point","getPath","addShape","attrs","axes","option","label"],"sourceRoot":"","sources":["../../src/facet/tree.ts"],"sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport View from '../chart/view';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { AxisCfg, Condition, Datum, TreeCfg, TreeData } from '../interface';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * Tree Facet\n */\nexport default class Tree extends Facet<TreeCfg, TreeData> {\n  protected afterEachView(view: View, facet: TreeData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: TreeData) {}\n\n  public init() {\n    super.init();\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  }\n\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd',\n        },\n        smooth: false,\n      },\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  protected generateFacets(data: Datum[]): TreeData[] {\n    const fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    const rst = [];\n    const rootFacet: TreeData = {\n      type: this.cfg.type,\n      data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: '',\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  }\n\n  private setRegion(facets: TreeData[]) {\n    this.forceColIndex(facets);\n    facets.forEach((facet) => {\n      // @ts-ignore 允许调整\n      facet.region = this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  }\n\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number) {\n    const xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    const yWidth = 1 / rows; // y轴方向的每个分面的偏移\n\n    const start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex,\n    };\n\n    const end = {\n      x: start.x + xWidth,\n      y: start.y + (yWidth * 2) / 3, // 预留1/3的空隙，方便添加连接线\n    };\n    return {\n      start,\n      end,\n    };\n  }\n\n  private forceColIndex(facets: TreeData[]) {\n    const leafs: TreeData[] = [];\n    let index = 0;\n    facets.forEach((facet) => {\n      if (this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n\n    leafs.forEach((facet) => {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    const maxLevel = this.cfg.fields.length;\n    for (let i = maxLevel - 1; i >= 0; i--) {\n      const levelFacets = this.getFacetsByLevel(facets, i);\n      // var yIndex = maxLevel - i;\n      for (const facet of levelFacets) {\n        if (!this.isLeaf(facet)) {\n          facet.originColIndex = facet.columnIndex;\n          // @ts-ignore\n          facet.columnIndex = this.getRegionIndex(facet.children);\n          // @ts-ignore\n          facet.columnValuesLength = leafs.length;\n        }\n      }\n    }\n  }\n\n  // get facet use level\n  private getFacetsByLevel(facets: TreeData[], level: number) {\n    const rst: TreeData[] = [];\n    facets.forEach((facet) => {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  // if the facet has children , make it's column index in the middle of it's children\n  private getRegionIndex(children: TreeData[]) {\n    const first = children[0];\n    const last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  }\n\n  // is  a leaf without children\n  private isLeaf(facet: TreeData) {\n    return !facet.children || !facet.children.length;\n  }\n\n  private getRows() {\n    return this.cfg.fields.length + 1;\n  }\n\n  // get child\n  private getChildFacets(data: Datum[], level: number, arr: TreeData[]) {\n    // [ 'grade', 'class' ]\n    const fields = this.cfg.fields;\n    const length = fields.length;\n    if (length < level) {\n      return;\n    }\n    const rst = [];\n    // get fist level except root node\n    const field = fields[level - 1];\n    // get field value\n    const values = this.getFieldValues(data, field);\n    values.forEach((value, index) => {\n      const conditions = [{ field, value, values } as Condition];\n      const subData = data.filter(this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        const facet: TreeData = {\n          type: this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: this.getChildFacets(subData, level + 1, arr),\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  public render() {\n    super.render();\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  private afterChartRender = () => {\n    if (this.facets && this.cfg.line) {\n      this.container.clear();\n      this.drawLines(this.facets);\n    }\n  };\n\n  private renderTitle() {\n    each(this.facets, (facet: TreeData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  private drawLines(facets: TreeData[]) {\n    facets.forEach((facet) => {\n      if (!this.isLeaf(facet)) {\n        const children = facet.children;\n        this.addFacetLines(facet, children);\n      }\n    });\n  }\n\n  // add lines with it's children\n  private addFacetLines(facet: TreeData, children: TreeData[]) {\n    const view = facet.view;\n    const region = view.coordinateBBox;\n    // top, right, bottom, left\n    const start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height,\n    };\n\n    children.forEach((subFacet) => {\n      const subRegion = subFacet.view.coordinateBBox;\n      const end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y,\n      };\n\n      const middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2,\n      };\n      const middle2 = {\n        x: end.x,\n        y: middle1.y,\n      };\n      this.drawLine([start, middle1, middle2, end]);\n    });\n  }\n\n  private getPath(points) {\n    const path = [];\n    const smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach((point, index) => {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n\n    return path;\n  }\n\n  // draw line width points\n  private drawLine(points) {\n    const path = this.getPath(points);\n    const line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign(\n        {\n          // @ts-ignore\n          path,\n        },\n        line\n      ),\n    });\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}