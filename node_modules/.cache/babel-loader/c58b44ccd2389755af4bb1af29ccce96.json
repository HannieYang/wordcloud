{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { convertNormalPath, convertPolarPath } from './util/path';\n/** ShapeFactory 基类 */\n\nvar ShapeFactoryBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n\n  /** 默认绘制的 Shape 类型 */\n  defaultShapeType: null,\n\n  /** 主题样式 */\n  theme: null,\n\n  /**\n   * 获取 shape 绘制需要的关键点\n   * @param shapeType shape 类型\n   * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n   * @returns 图形关键点信息\n   */\n  getShapePoints: function (shapeType, shapePoint) {\n    var shape = this.getShape(shapeType);\n\n    if (shape.getPoints) {\n      return shape.getPoints(shapePoint);\n    }\n\n    return this.getDefaultPoints(shapePoint);\n  },\n\n  /**\n   * 根据 shape 类型获取具体的 shape 实例\n   * @param shapeType string shape 的类型\n   * @returns\n   */\n  getShape: function (shapeType) {\n    var shape = this[shapeType] || this[this.defaultShapeType];\n    shape.coordinate = this.coordinate;\n    return shape;\n  },\n\n  /**\n   * 获取 shape 的默认关键点\n   * @override\n   */\n  getDefaultPoints: function () {\n    return [];\n  },\n\n  /**\n   * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n   */\n  getDefaultStyle: function (geometryTheme) {\n    return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n  },\n\n  /**\n   * 获取 shape 对应的缩略图配置信息。\n   * @param shapeType shape 类型\n   * @param color 颜色\n   * @param isInPolar 是否在极坐标系下\n   * @returns 返回缩略图 marker 配置。\n   */\n  getMarker: function (shapeType, markerCfg) {\n    var shape = this.getShape(shapeType);\n\n    if (!shape.getMarker) {\n      var defaultShapeType = this.defaultShapeType;\n      shape = this.getShape(defaultShapeType);\n    }\n\n    var theme = this.theme;\n    var shapeStyle = get(theme, [shapeType, 'default'], {});\n    var markerStyle = shape.getMarker(markerCfg);\n    return deepMix({}, shapeStyle, markerStyle);\n  },\n\n  /**\n   * 绘制 shape\n   * @override\n   * @param shapeType 绘制的 shape 类型\n   * @param cfg 绘制 shape 需要的信息\n   * @param element Element 实例\n   * @returns\n   */\n  drawShape: function (shapeType, cfg, container) {\n    var shape = this.getShape(shapeType);\n    return shape.draw(cfg, container);\n  }\n};\n/** Shape 基类 */\n\nvar ShapeBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n\n  /**\n   * 将归一化的 path 转换成坐标系下的 path\n   * @param path 归一化的路径\n   * @returns\n   */\n  parsePath: function (path) {\n    var coordinate = this.coordinate;\n    var parsedPath = parsePathString(path);\n\n    if (coordinate.isPolar) {\n      parsedPath = convertPolarPath(coordinate, parsedPath);\n    } else {\n      parsedPath = convertNormalPath(coordinate, parsedPath);\n    }\n\n    return parsedPath;\n  },\n\n  /**\n   * 将归一化的坐标转换成画布坐标\n   * @param point 归一化的坐标点数据\n   * @returns\n   */\n  parsePoint: function (point) {\n    var coordinate = this.coordinate;\n    return coordinate.convert(point);\n  },\n\n  /**\n   * 0～1 points 转 画布 points\n   * @param points 节点集合\n   * @returns\n   */\n  parsePoints: function (points) {\n    var coordinate = this.coordinate;\n    return points.map(function (point) {\n      return coordinate.convert(point);\n    });\n  },\n\n  /**\n   * 绘制 shape\n   * @override\n   */\n  draw: function (cfg, container) {}\n};\nvar ShapeFactoryMap = {};\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\n\nexport function registerShapeFactory(factoryName, cfg) {\n  var className = upperFirst(factoryName);\n\n  var geomObj = __assign(__assign(__assign({}, ShapeFactoryBase), cfg), {\n    geometryType: factoryName\n  });\n\n  ShapeFactoryMap[className] = geomObj;\n  return geomObj;\n}\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\n\nexport function registerShape(factoryName, shapeType, cfg) {\n  var className = upperFirst(factoryName);\n  var factory = ShapeFactoryMap[className];\n\n  var shapeObj = __assign(__assign({}, ShapeBase), cfg);\n\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n}\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\n\nexport function getShapeFactory(factoryName) {\n  var className = upperFirst(factoryName);\n  return ShapeFactoryMap[className];\n}","map":{"version":3,"mappings":"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","names":["parsePathString","deepMix","get","upperFirst","convertNormalPath","convertPolarPath","ShapeFactoryBase","coordinate","defaultShapeType","theme","getShapePoints","shapeType","shapePoint","shape","getShape","getPoints","getDefaultPoints","getDefaultStyle","geometryTheme","getMarker","markerCfg","shapeStyle","markerStyle","drawShape","cfg","container","draw","ShapeBase","parsePath","path","parsedPath","isPolar","parsePoint","point","convert","parsePoints","points","map","ShapeFactoryMap","registerShapeFactory","factoryName","className","geomObj","geometryType","registerShape","factory","shapeObj","getShapeFactory"],"sourceRoot":"","sources":["../../../src/geometry/shape/base.ts"],"sourcesContent":["import { LooseObject } from '@antv/g-svg';\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { IGroup, IShape, PathCommand } from '../../dependents';\nimport {\n  Point,\n  RegisterShape,\n  RegisterShapeFactory,\n  Shape,\n  ShapeFactory,\n  ShapeInfo,\n  ShapeMarkerAttrs,\n  ShapeMarkerCfg,\n  ShapePoint,\n} from '../../interface';\n\nimport { convertNormalPath, convertPolarPath } from './util/path';\n\n/** ShapeFactory 基类 */\nconst ShapeFactoryBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /** 默认绘制的 Shape 类型 */\n  defaultShapeType: null,\n  /** 主题样式 */\n  theme: null,\n  /**\n   * 获取 shape 绘制需要的关键点\n   * @param shapeType shape 类型\n   * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n   * @returns 图形关键点信息\n   */\n  getShapePoints(shapeType: string, shapePoint: ShapePoint) {\n    const shape = this.getShape(shapeType);\n    if (shape.getPoints) {\n      return shape.getPoints(shapePoint);\n    }\n\n    return this.getDefaultPoints(shapePoint);\n  },\n  /**\n   * 根据 shape 类型获取具体的 shape 实例\n   * @param shapeType string shape 的类型\n   * @returns\n   */\n  getShape(shapeType: string): Shape {\n    const shape = this[shapeType] || this[this.defaultShapeType];\n    shape.coordinate = this.coordinate;\n\n    return shape;\n  },\n  /**\n   * 获取 shape 的默认关键点\n   * @override\n   */\n  getDefaultPoints() {\n    return [];\n  },\n  /**\n   * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n   */\n  getDefaultStyle(geometryTheme: LooseObject): LooseObject {\n    return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n  },\n  /**\n   * 获取 shape 对应的缩略图配置信息。\n   * @param shapeType shape 类型\n   * @param color 颜色\n   * @param isInPolar 是否在极坐标系下\n   * @returns 返回缩略图 marker 配置。\n   */\n  getMarker(shapeType: string, markerCfg: ShapeMarkerCfg): ShapeMarkerAttrs {\n    let shape = this.getShape(shapeType);\n\n    if (!shape.getMarker) {\n      const defaultShapeType = this.defaultShapeType;\n      shape = this.getShape(defaultShapeType);\n    }\n\n    const theme = this.theme;\n    const shapeStyle = get(theme, [shapeType, 'default'], {});\n    const markerStyle = shape.getMarker(markerCfg);\n\n    return deepMix({}, shapeStyle, markerStyle);\n  },\n  /**\n   * 绘制 shape\n   * @override\n   * @param shapeType 绘制的 shape 类型\n   * @param cfg 绘制 shape 需要的信息\n   * @param element Element 实例\n   * @returns\n   */\n  drawShape(shapeType: string, cfg: ShapeInfo, container: IGroup): IShape | IGroup {\n    const shape = this.getShape(shapeType);\n    return shape.draw(cfg, container);\n  },\n};\n\n/** Shape 基类 */\nconst ShapeBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /**\n   * 将归一化的 path 转换成坐标系下的 path\n   * @param path 归一化的路径\n   * @returns\n   */\n  parsePath(path: string): PathCommand[] {\n    const coordinate = this.coordinate;\n    let parsedPath = parsePathString(path);\n    if (coordinate.isPolar) {\n      parsedPath = convertPolarPath(coordinate, parsedPath);\n    } else {\n      parsedPath = convertNormalPath(coordinate, parsedPath);\n    }\n    return parsedPath;\n  },\n  /**\n   * 将归一化的坐标转换成画布坐标\n   * @param point 归一化的坐标点数据\n   * @returns\n   */\n  parsePoint(point: Point): Point {\n    const coordinate = this.coordinate;\n    return coordinate.convert(point);\n  },\n  /**\n   * 0～1 points 转 画布 points\n   * @param points 节点集合\n   * @returns\n   */\n  parsePoints(points: Point[]): Point[] {\n    const coordinate = this.coordinate;\n    return points.map((point) => {\n      return coordinate.convert(point);\n    });\n  },\n  /**\n   * 绘制 shape\n   * @override\n   */\n  draw(cfg: ShapeInfo, container: IGroup) {},\n};\n\nconst ShapeFactoryMap = {};\n\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\nexport function registerShapeFactory(factoryName: string, cfg: RegisterShapeFactory): ShapeFactory {\n  const className = upperFirst(factoryName);\n  const geomObj = {\n    ...ShapeFactoryBase,\n    ...cfg,\n    geometryType: factoryName,\n  };\n  ShapeFactoryMap[className] = geomObj;\n  return geomObj;\n}\n\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\nexport function registerShape(factoryName: string, shapeType: string, cfg: RegisterShape): Shape {\n  const className = upperFirst(factoryName);\n  const factory = ShapeFactoryMap[className];\n  const shapeObj = {\n    ...ShapeBase,\n    ...cfg,\n  };\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n}\n\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\nexport function getShapeFactory(factoryName: string): ShapeFactory {\n  const className = upperFirst(factoryName);\n  return ShapeFactoryMap[className];\n}\n"]},"metadata":{},"sourceType":"module"}