{"ast":null,"code":"import { reduce, get, isEmpty, isFunction } from '@antv/util';\nimport { Util } from '@antv/g2';\nimport { deepAssign, findGeometry } from '../../../utils';\nimport { isLine } from './option';\n/**\n * 获取 view 的 legendItem，供存在不含有 seriesField 的图形使用\n * @param params\n */\n\nexport function getViewLegendItems(params) {\n  var view = params.view,\n      geometryOption = params.geometryOption,\n      yField = params.yField,\n      legend = params.legend;\n  var userMarker = get(legend, 'marker');\n  var geometry = findGeometry(view, isLine(geometryOption) ? 'line' : 'interval');\n\n  if (!geometryOption.seriesField) {\n    var legendItemName = get(view, \"options.scales.\" + yField + \".alias\") || yField; // 返回 g2 设置的图例\n\n    var colorAttribute = geometry.getAttribute('color');\n    var color = view.getTheme().defaultColor;\n\n    if (colorAttribute) {\n      color = Util.getMappingValue(colorAttribute, legendItemName, get(colorAttribute, ['values', 0], color));\n    }\n\n    var marker = (isFunction(userMarker) ? userMarker : !isEmpty(userMarker) && deepAssign({}, {\n      style: {\n        stroke: color,\n        fill: color\n      }\n    }, userMarker)) || (isLine(geometryOption) ? {\n      symbol: function (x, y, r) {\n        return [['M', x - r, y], ['L', x + r, y]];\n      },\n      style: {\n        lineWidth: 2,\n        r: 6,\n        stroke: color\n      }\n    } : {\n      symbol: 'square',\n      style: {\n        fill: color\n      }\n    });\n    return [{\n      value: yField,\n      name: legendItemName,\n      marker: marker,\n      isGeometry: true,\n      viewId: view.id\n    }];\n  }\n\n  var attributes = geometry.getGroupAttributes();\n  return reduce(attributes, function (items, attr) {\n    var attrItems = Util.getLegendItems(view, geometry, attr, view.getTheme(), userMarker);\n    return items.concat(attrItems);\n  }, []);\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,OAAtB,EAA+BC,UAA/B,QAAiD,YAAjD;AACA,SAAeC,IAAf,QAA2B,UAA3B;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,gBAAzC;AAGA,SAASC,MAAT,QAAuB,UAAvB;AAEA;;;;;AAIA,OAAM,SAAUC,kBAAV,CAA6BC,MAA7B,EAKL;EACS,QAAI,GAAqCA,MAAM,KAA/C;EAAA,IAAMC,cAAc,GAAqBD,MAAM,eAA/C;EAAA,IAAsBE,MAAM,GAAaF,MAAM,OAA/C;EAAA,IAA8BG,MAAM,GAAKH,MAAM,OAA/C;EACR,IAAMI,UAAU,GAAGZ,GAAG,CAACW,MAAD,EAAS,QAAT,CAAtB;EAEA,IAAME,QAAQ,GAAGR,YAAY,CAACS,IAAD,EAAOR,MAAM,CAACG,cAAD,CAAN,GAAyB,MAAzB,GAAkC,UAAzC,CAA7B;;EACA,IAAI,CAACA,cAAc,CAACM,WAApB,EAAiC;IAC/B,IAAMC,cAAc,GAAGhB,GAAG,CAACc,IAAD,EAAO,oBAAkBJ,MAAlB,GAAwB,QAA/B,CAAH,IAA+CA,MAAtE,CAD+B,CAE/B;;IACA,IAAMO,cAAc,GAAGJ,QAAQ,CAACK,YAAT,CAAsB,OAAtB,CAAvB;IACA,IAAIC,KAAK,GAAGL,IAAI,CAACM,QAAL,GAAgBC,YAA5B;;IACA,IAAIJ,cAAJ,EAAoB;MAClBE,KAAK,GAAGhB,IAAI,CAACmB,eAAL,CAAqBL,cAArB,EAAqCD,cAArC,EAAqDhB,GAAG,CAACiB,cAAD,EAAiB,CAAC,QAAD,EAAW,CAAX,CAAjB,EAAgCE,KAAhC,CAAxD,CAAR;IACD;;IAED,IAAMI,MAAM,GACV,CAACrB,UAAU,CAACU,UAAD,CAAV,GACGA,UADH,GAEG,CAACX,OAAO,CAACW,UAAD,CAAR,IACAR,UAAU,CACR,EADQ,EAER;MACEoB,KAAK,EAAE;QACLC,MAAM,EAAEN,KADH;QAELO,IAAI,EAAEP;MAFD;IADT,CAFQ,EAQRP,UARQ,CAHd,MAaCN,MAAM,CAACG,cAAD,CAAN,GACG;MACEkB,MAAM,EAAE,UAACC,CAAD,EAAYC,CAAZ,EAAuBC,CAAvB,EAAgC;QACtC,OAAO,CACL,CAAC,GAAD,EAAMF,CAAC,GAAGE,CAAV,EAAaD,CAAb,CADK,EAEL,CAAC,GAAD,EAAMD,CAAC,GAAGE,CAAV,EAAaD,CAAb,CAFK,CAAP;MAID,CANH;MAOEL,KAAK,EAAE;QACLO,SAAS,EAAE,CADN;QAELD,CAAC,EAAE,CAFE;QAGLL,MAAM,EAAEN;MAHH;IAPT,CADH,GAcG;MACEQ,MAAM,EAAE,QADV;MAEEH,KAAK,EAAE;QACLE,IAAI,EAAEP;MADD;IAFT,CA3BJ,CADF;IAkCA,OAAO,CACL;MACEa,KAAK,EAAEtB,MADT;MAEEuB,IAAI,EAAEjB,cAFR;MAGEO,MAAM,QAHR;MAIEW,UAAU,EAAE,IAJd;MAKEC,MAAM,EAAErB,IAAI,CAACsB;IALf,CADK,CAAP;EASD;;EAED,IAAMC,UAAU,GAAGxB,QAAQ,CAACyB,kBAAT,EAAnB;EACA,OAAOvC,MAAM,CACXsC,UADW,EAEX,UAACE,KAAD,EAAQC,IAAR,EAAY;IACV,IAAMC,SAAS,GAAGtC,IAAI,CAACuC,cAAL,CAAoB5B,IAApB,EAA0BD,QAA1B,EAAoC2B,IAApC,EAA0C1B,IAAI,CAACM,QAAL,EAA1C,EAA2DR,UAA3D,CAAlB;IACA,OAAO2B,KAAK,CAACI,MAAN,CAAaF,SAAb,CAAP;EACD,CALU,EAMX,EANW,CAAb;AAQD","names":["reduce","get","isEmpty","isFunction","Util","deepAssign","findGeometry","isLine","getViewLegendItems","params","geometryOption","yField","legend","userMarker","geometry","view","seriesField","legendItemName","colorAttribute","getAttribute","color","getTheme","defaultColor","getMappingValue","marker","style","stroke","fill","symbol","x","y","r","lineWidth","value","name","isGeometry","viewId","id","attributes","getGroupAttributes","items","attr","attrItems","getLegendItems","concat"],"sourceRoot":"","sources":["../../../../src/plots/dual-axes/util/legend.ts"],"sourcesContent":["import { reduce, get, isEmpty, isFunction } from '@antv/util';\nimport { View, Util } from '@antv/g2';\nimport { deepAssign, findGeometry } from '../../../utils';\nimport { GeometryOption } from '../types';\nimport { Legend } from '../../../types/legend';\nimport { isLine } from './option';\n\n/**\n * 获取 view 的 legendItem，供存在不含有 seriesField 的图形使用\n * @param params\n */\nexport function getViewLegendItems(params: {\n  view: View;\n  yField: string;\n  geometryOption: GeometryOption;\n  legend: Legend;\n}) {\n  const { view, geometryOption, yField, legend } = params;\n  const userMarker = get(legend, 'marker');\n\n  const geometry = findGeometry(view, isLine(geometryOption) ? 'line' : 'interval');\n  if (!geometryOption.seriesField) {\n    const legendItemName = get(view, `options.scales.${yField}.alias`) || yField;\n    // 返回 g2 设置的图例\n    const colorAttribute = geometry.getAttribute('color');\n    let color = view.getTheme().defaultColor;\n    if (colorAttribute) {\n      color = Util.getMappingValue(colorAttribute, legendItemName, get(colorAttribute, ['values', 0], color));\n    }\n\n    const marker =\n      (isFunction(userMarker)\n        ? userMarker\n        : !isEmpty(userMarker) &&\n          deepAssign(\n            {},\n            {\n              style: {\n                stroke: color,\n                fill: color,\n              },\n            },\n            userMarker\n          )) ||\n      (isLine(geometryOption)\n        ? {\n            symbol: (x: number, y: number, r: number) => {\n              return [\n                ['M', x - r, y],\n                ['L', x + r, y],\n              ];\n            },\n            style: {\n              lineWidth: 2,\n              r: 6,\n              stroke: color,\n            },\n          }\n        : {\n            symbol: 'square',\n            style: {\n              fill: color,\n            },\n          });\n    return [\n      {\n        value: yField,\n        name: legendItemName,\n        marker,\n        isGeometry: true,\n        viewId: view.id,\n      },\n    ];\n  }\n\n  const attributes = geometry.getGroupAttributes();\n  return reduce(\n    attributes,\n    (items, attr) => {\n      const attrItems = Util.getLegendItems(view, geometry, attr, view.getTheme(), userMarker);\n      return items.concat(attrItems);\n    },\n    []\n  );\n}\n"]},"metadata":{},"sourceType":"module"}