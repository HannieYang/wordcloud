{"ast":null,"code":"var LOAD_COMPONENT_CONTROLLERS = {};\n/**\n * 全局注册组件。\n * @param name 组件名称\n * @param plugin 注册的组件类\n * @returns void\n */\n\nexport function registerComponentController(name, plugin) {\n  LOAD_COMPONENT_CONTROLLERS[name] = plugin;\n}\n/**\n * 删除全局组件。\n * @param name 组件名\n * @returns void\n */\n\nexport function unregisterComponentController(name) {\n  delete LOAD_COMPONENT_CONTROLLERS[name];\n}\n/**\n * 获取以注册的组件名。\n * @returns string[] 返回已注册的组件名称\n */\n\nexport function getComponentControllerNames() {\n  return Object.keys(LOAD_COMPONENT_CONTROLLERS);\n}\n/**\n * 根据组件名获取组件类。\n * @param name 组件名\n * @returns 返回组件类\n */\n\nexport function getComponentController(name) {\n  return LOAD_COMPONENT_CONTROLLERS[name];\n}","map":{"version":3,"mappings":"AAEA,IAAMA,0BAA0B,GAAmC,EAAnE;AAEA;;;;;;;AAMA,OAAM,SAAUC,2BAAV,CAAsCC,IAAtC,EAAoDC,MAApD,EAA0E;EAC9EH,0BAA0B,CAACE,IAAD,CAA1B,GAAmCC,MAAnC;AACD;AAED;;;;;;AAKA,OAAM,SAAUC,6BAAV,CAAwCF,IAAxC,EAAoD;EACxD,OAAOF,0BAA0B,CAACE,IAAD,CAAjC;AACD;AAED;;;;;AAIA,OAAM,SAAUG,2BAAV,GAAqC;EACzC,OAAOC,MAAM,CAACC,IAAP,CAAYP,0BAAZ,CAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUQ,sBAAV,CAAiCN,IAAjC,EAA6C;EACjD,OAAOF,0BAA0B,CAACE,IAAD,CAAjC;AACD","names":["LOAD_COMPONENT_CONTROLLERS","registerComponentController","name","plugin","unregisterComponentController","getComponentControllerNames","Object","keys","getComponentController"],"sourceRoot":"","sources":["../../../src/chart/controller/index.ts"],"sourcesContent":["import { ControllerCtor } from './base';\n\nconst LOAD_COMPONENT_CONTROLLERS: Record<string, ControllerCtor> = {};\n\n/**\n * 全局注册组件。\n * @param name 组件名称\n * @param plugin 注册的组件类\n * @returns void\n */\nexport function registerComponentController(name: string, plugin: ControllerCtor) {\n  LOAD_COMPONENT_CONTROLLERS[name] = plugin;\n}\n\n/**\n * 删除全局组件。\n * @param name 组件名\n * @returns void\n */\nexport function unregisterComponentController(name: string) {\n  delete LOAD_COMPONENT_CONTROLLERS[name];\n}\n\n/**\n * 获取以注册的组件名。\n * @returns string[] 返回已注册的组件名称\n */\nexport function getComponentControllerNames(): string[] {\n  return Object.keys(LOAD_COMPONENT_CONTROLLERS);\n}\n\n/**\n * 根据组件名获取组件类。\n * @param name 组件名\n * @returns 返回组件类\n */\nexport function getComponentController(name: string): ControllerCtor {\n  return LOAD_COMPONENT_CONTROLLERS[name];\n}\n"]},"metadata":{},"sourceType":"module"}