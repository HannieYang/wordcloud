{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { initCanvas, drawBackground, transformMatrix, getPixelRatio } from './util';\n/**\n * linePattern 的 默认配置\n */\n\nexport var defaultLinePatternCfg = {\n  rotation: 45,\n  spacing: 5,\n  opacity: 1,\n  backgroundColor: 'transparent',\n  strokeOpacity: 0.5,\n  stroke: '#fff',\n  lineWidth: 2\n};\n/**\n * 绘制line\n *\n * @param context canvasContext\n * @param cfg linePattern 的配置\n * @param d 绘制 path 所需的 d\n */\n\nexport function drawLine(context, cfg, d) {\n  var stroke = cfg.stroke,\n      lineWidth = cfg.lineWidth,\n      strokeOpacity = cfg.strokeOpacity;\n  var path = new Path2D(d);\n  context.globalAlpha = strokeOpacity;\n  context.lineCap = 'square';\n  context.strokeStyle = lineWidth ? stroke : 'transparent';\n  context.lineWidth = lineWidth;\n  context.stroke(path);\n}\n/**\n * 创建 linePattern\n */\n\nexport function createLinePattern(cfg) {\n  var lineCfg = deepAssign({}, defaultLinePatternCfg, cfg);\n  var spacing = lineCfg.spacing,\n      rotation = lineCfg.rotation,\n      lineWidth = lineCfg.lineWidth; // 计算 pattern 画布的大小， path 所需的 d\n\n  var width = spacing + lineWidth || 1;\n  var height = spacing + lineWidth || 1;\n  var d = \"\\n            M 0 0 L \" + width + \" 0\\n            M 0 \" + height + \" L \" + width + \" \" + height + \"\\n            \"; // 初始化 patternCanvas\n\n  var canvas = initCanvas(width, height);\n  var ctx = canvas.getContext('2d'); // 绘制 background，line\n\n  drawBackground(ctx, lineCfg, width, height);\n  drawLine(ctx, lineCfg, d);\n  var pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  } // 返回 Pattern 对象\n\n\n  return pattern;\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,eAArC,EAAsDC,aAAtD,QAA2E,QAA3E;AAEA;;;;AAGA,OAAO,IAAMC,qBAAqB,GAAG;EACnCC,QAAQ,EAAE,EADyB;EAEnCC,OAAO,EAAE,CAF0B;EAGnCC,OAAO,EAAE,CAH0B;EAInCC,eAAe,EAAE,aAJkB;EAKnCC,aAAa,EAAE,GALoB;EAMnCC,MAAM,EAAE,MAN2B;EAOnCC,SAAS,EAAE;AAPwB,CAA9B;AAUP;;;;;;;;AAOA,OAAM,SAAUC,QAAV,CAAmBC,OAAnB,EAAsDC,GAAtD,EAA2EC,CAA3E,EAAoF;EAChF,UAAM,GAA+BD,GAAG,OAAxC;EAAA,IAAQH,SAAS,GAAoBG,GAAG,UAAxC;EAAA,IAAmBL,aAAa,GAAKK,GAAG,cAAxC;EACR,IAAME,IAAI,GAAG,IAAIC,MAAJ,CAAWF,CAAX,CAAb;EAEAF,OAAO,CAACK,WAAR,GAAsBT,aAAtB;EACAI,OAAO,CAACM,OAAR,GAAkB,QAAlB;EACAN,OAAO,CAACO,WAAR,GAAsBT,SAAS,GAAGD,MAAH,GAAY,aAA3C;EACAG,OAAO,CAACF,SAAR,GAAoBA,SAApB;EACAE,OAAO,CAACH,MAAR,CAAeM,IAAf;AACD;AAED;;;;AAGA,OAAM,SAAUK,iBAAV,CAA4BP,GAA5B,EAAgD;EACpD,IAAMQ,OAAO,GAAGvB,UAAU,CAAC,EAAD,EAAKK,qBAAL,EAA4BU,GAA5B,CAA1B;EAEQ,WAAO,GAA0BQ,OAAO,QAAxC;EAAA,IAASjB,QAAQ,GAAgBiB,OAAO,SAAxC;EAAA,IAAmBX,SAAS,GAAKW,OAAO,UAAxC,CAH4C,CAKpD;;EACA,IAAMC,KAAK,GAAGjB,OAAO,GAAGK,SAAV,IAAuB,CAArC;EACA,IAAMa,MAAM,GAAGlB,OAAO,GAAGK,SAAV,IAAuB,CAAtC;EACA,IAAMI,CAAC,GAAG,2BACUQ,KADV,GACe,sBADf,GAEMC,MAFN,GAEY,KAFZ,GAEkBD,KAFlB,GAEuB,GAFvB,GAE2BC,MAF3B,GAEiC,gBAF3C,CARoD,CAapD;;EACA,IAAMC,MAAM,GAAGzB,UAAU,CAACuB,KAAD,EAAQC,MAAR,CAAzB;EACA,IAAME,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ,CAfoD,CAiBpD;;EACA1B,cAAc,CAACyB,GAAD,EAAMJ,OAAN,EAAeC,KAAf,EAAsBC,MAAtB,CAAd;EACAZ,QAAQ,CAACc,GAAD,EAAMJ,OAAN,EAAeP,CAAf,CAAR;EAEA,IAAMa,OAAO,GAAGF,GAAG,CAACG,aAAJ,CAAkBJ,MAAlB,EAA0B,QAA1B,CAAhB;;EAEA,IAAIG,OAAJ,EAAa;IACX,IAAME,GAAG,GAAG3B,aAAa,EAAzB;IACA,IAAM4B,MAAM,GAAG7B,eAAe,CAAC4B,GAAD,EAAMzB,QAAN,CAA9B;IACAuB,OAAO,CAACI,YAAR,CAAqBD,MAArB;EACD,CA3BmD,CA6BpD;;;EACA,OAAOH,OAAP;AACD","names":["deepAssign","initCanvas","drawBackground","transformMatrix","getPixelRatio","defaultLinePatternCfg","rotation","spacing","opacity","backgroundColor","strokeOpacity","stroke","lineWidth","drawLine","context","cfg","d","path","Path2D","globalAlpha","lineCap","strokeStyle","createLinePattern","lineCfg","width","height","canvas","ctx","getContext","pattern","createPattern","dpr","matrix","setTransform"],"sourceRoot":"","sources":["../../../src/utils/pattern/line.ts"],"sourcesContent":["import { LinePatternCfg } from '../../types/pattern';\nimport { deepAssign } from '../../utils';\nimport { initCanvas, drawBackground, transformMatrix, getPixelRatio } from './util';\n\n/**\n * linePattern 的 默认配置\n */\nexport const defaultLinePatternCfg = {\n  rotation: 45,\n  spacing: 5,\n  opacity: 1,\n  backgroundColor: 'transparent',\n  strokeOpacity: 0.5,\n  stroke: '#fff',\n  lineWidth: 2,\n};\n\n/**\n * 绘制line\n *\n * @param context canvasContext\n * @param cfg linePattern 的配置\n * @param d 绘制 path 所需的 d\n */\nexport function drawLine(context: CanvasRenderingContext2D, cfg: LinePatternCfg, d: string) {\n  const { stroke, lineWidth, strokeOpacity } = cfg;\n  const path = new Path2D(d);\n\n  context.globalAlpha = strokeOpacity;\n  context.lineCap = 'square';\n  context.strokeStyle = lineWidth ? stroke : 'transparent';\n  context.lineWidth = lineWidth;\n  context.stroke(path);\n}\n\n/**\n * 创建 linePattern\n */\nexport function createLinePattern(cfg?: LinePatternCfg): CanvasPattern {\n  const lineCfg = deepAssign({}, defaultLinePatternCfg, cfg);\n\n  const { spacing, rotation, lineWidth } = lineCfg;\n\n  // 计算 pattern 画布的大小， path 所需的 d\n  const width = spacing + lineWidth || 1;\n  const height = spacing + lineWidth || 1;\n  const d = `\n            M 0 0 L ${width} 0\n            M 0 ${height} L ${width} ${height}\n            `;\n\n  // 初始化 patternCanvas\n  const canvas = initCanvas(width, height);\n  const ctx = canvas.getContext('2d');\n\n  // 绘制 background，line\n  drawBackground(ctx, lineCfg, width, height);\n  drawLine(ctx, lineCfg, d);\n\n  const pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    const dpr = getPixelRatio();\n    const matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  // 返回 Pattern 对象\n  return pattern;\n}\n"]},"metadata":{},"sourceType":"module"}