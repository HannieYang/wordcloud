{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { __assign, __extends, __read, __rest, __spreadArray } from \"tslib\";\nimport { clone, deepMix, each, filter, find, flatten, get, isBoolean, isFunction, isNil, isObject, isString, isUndefined, mix, remove, set, size, uniqueId, isEqual, isPlainObject, reduce } from '@antv/util';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { getFacet } from '../facet';\nimport { createInteraction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport CoordinateController from './controller/coordinate';\nimport Event from './event';\nimport defaultLayout from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n/**\n * G2 视图 View 类\n */\n\nvar View =\n/** @class */\nfunction (_super) {\n  __extends(View, _super);\n\n  function View(props) {\n    var _this = _super.call(this, {\n      visible: props.visible\n    }) || this;\n    /** 所有的子 view。 */\n\n\n    _this.views = [];\n    /** 所有的 geometry 实例。 */\n\n    _this.geometries = [];\n    /** 所有的组件 controllers。 */\n\n    _this.controllers = [];\n    /** 所有的 Interaction 实例。 */\n\n    _this.interactions = {};\n    /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n\n    _this.limitInPlot = false; // 配置信息存储\n\n    _this.options = {\n      data: [],\n      animate: true // 默认开启动画\n\n    }; // 初始化为空\n\n    /** 配置开启的组件插件，默认为全局配置的组件。 */\n\n    _this.usedControllers = getComponentControllerNames();\n    /** 所有的 scales */\n\n    _this.scalePool = new ScalePool();\n    /** 布局函数 */\n\n    _this.layoutFunc = defaultLayout;\n    /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n\n    _this.isPreMouseInPlot = false;\n    /** 默认标识位，用于判定数据是否更新 */\n\n    _this.isDataChanged = false;\n    /** 用于判断坐标系范围是否发生变化的标志位 */\n\n    _this.isCoordinateChanged = false;\n    /** 从当前这个 view 创建的 scale key */\n\n    _this.createdScaleKeys = new Map();\n\n    _this.onCanvasEvent = function (evt) {\n      var name = evt.name;\n\n      if (!name.includes(':')) {\n        // 非委托事件\n        var e = _this.createViewEvent(evt); // 处理 plot 事件\n\n\n        _this.doPlotEvent(e);\n\n        _this.emit(name, e);\n      }\n    };\n    /**\n     * 触发事件之后\n     * @param evt\n     */\n\n\n    _this.onDelegateEvents = function (evt) {\n      // 阻止继续冒泡，防止重复事件触发\n      // evt.preventDefault();\n      var name = evt.name;\n\n      if (!name.includes(':')) {\n        return;\n      } // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n\n\n      var e = _this.createViewEvent(evt); // 包含有基本事件、组合事件\n\n\n      _this.emit(name, e); // const currentTarget = evt.currentTarget as IShape;\n      // const inheritNames = currentTarget.get('inheritNames');\n      // if (evt.delegateObject || inheritNames) {\n      //   const events = this.getEvents();\n      //   each(inheritNames, (subName) => {\n      //     const eventName = `${subName}:${type}`;\n      //     if (events[eventName]) {\n      //       this.emit(eventName, e);\n      //     }\n      //   });\n      // }\n\n    };\n\n    var _a = props.id,\n        id = _a === void 0 ? uniqueId('view') : _a,\n        parent = props.parent,\n        canvas = props.canvas,\n        backgroundGroup = props.backgroundGroup,\n        middleGroup = props.middleGroup,\n        foregroundGroup = props.foregroundGroup,\n        _b = props.region,\n        region = _b === void 0 ? {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: 1,\n        y: 1\n      }\n    } : _b,\n        padding = props.padding,\n        appendPadding = props.appendPadding,\n        theme = props.theme,\n        options = props.options,\n        limitInPlot = props.limitInPlot,\n        syncViewPadding = props.syncViewPadding;\n    _this.parent = parent;\n    _this.canvas = canvas;\n    _this.backgroundGroup = backgroundGroup;\n    _this.middleGroup = middleGroup;\n    _this.foregroundGroup = foregroundGroup;\n    _this.region = region;\n    _this.padding = padding;\n    _this.appendPadding = appendPadding; // 接受父 view 传入的参数\n\n    _this.options = __assign(__assign({}, _this.options), options);\n    _this.limitInPlot = limitInPlot;\n    _this.id = id;\n    _this.syncViewPadding = syncViewPadding; // 初始化 theme\n\n    _this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n\n    _this.init();\n\n    return _this;\n  }\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n\n\n  View.prototype.setLayout = function (layout) {\n    this.layoutFunc = layout;\n  };\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n\n\n  View.prototype.init = function () {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox(); // 事件委托机制\n\n    this.initEvents(); // 初始化组件 controller\n\n    this.initComponentController();\n    this.initOptions();\n  };\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   * @param params render 事件参数\n   */\n\n\n  View.prototype.render = function (isUpdate, payload) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_RENDER, payload)); // 递归渲染\n\n    this.paint(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_RENDER, payload));\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n\n\n  View.prototype.clear = function () {\n    var _this = this;\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR); // 1. 清空缓存和计算数据\n\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n\n    this.isCoordinateChanged = false; // 复位\n    // 2. 清空 geometries\n\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      geometries[i].clear(); // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n\n      geometries[i].container.remove(true);\n      geometries[i].labelsContainer.remove(true);\n    }\n\n    this.geometries = []; // 3. 清空 controllers\n\n    var controllers = this.controllers;\n\n    for (var i = 0; i < controllers.length; i++) {\n      if (controllers[i].name === 'annotation') {\n        // 需要清空配置项\n        controllers[i].clear(true);\n      } else {\n        controllers[i].clear();\n      }\n    } // 4. 删除 scale 缓存\n\n\n    this.createdScaleKeys.forEach(function (v, k) {\n      _this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear(); // 递归处理子 view\n\n    var views = this.views;\n\n    for (var i = 0; i < views.length; i++) {\n      views[i].clear();\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  };\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n\n\n  View.prototype.destroy = function () {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    var interactions = this.interactions; // 销毁 interactions\n\n    each(interactions, function (interaction) {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n    this.clear(); // 销毁 controller 中的组件\n\n    var controllers = this.controllers;\n\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      controller.destroy();\n    }\n\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n\n    _super.prototype.destroy.call(this);\n  };\n  /* end 生命周期函数 */\n\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n\n\n  View.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n\n    var geometries = this.geometries;\n\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      geometry.changeVisible(visible);\n    }\n\n    var controllers = this.controllers;\n\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      controller.changeVisible(visible);\n    }\n\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible); // group.set('visible', visible) 不会触发自动刷新\n\n    this.getCanvas().draw();\n    return this;\n  };\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n\n\n  View.prototype.data = function (data) {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n\n\n  View.prototype.source = function (data) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  };\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n\n\n  View.prototype.filter = function (field, condition) {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    } // condition 为空，则表示删除过滤条件\n\n\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n\n    return this;\n  };\n\n  View.prototype.axis = function (field, axisOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n\n    return this;\n  };\n\n  View.prototype.legend = function (field, legendOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n\n      if (isPlainObject(legendOption) && (legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected)) {\n        set(this.options, ['filters', field], function (name) {\n          var _a;\n\n          return (_a = legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected[name]) !== null && _a !== void 0 ? _a : true;\n        });\n      }\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n\n    return this;\n  };\n\n  View.prototype.scale = function (field, scaleOption) {\n    var _this = this;\n\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, function (v, k) {\n        set(_this.options, ['scales', k], v);\n      });\n    }\n\n    return this;\n  };\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n   * @returns View\n   */\n\n\n  View.prototype.tooltip = function (cfg) {\n    set(this.options, 'tooltip', cfg);\n    return this;\n  };\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   * 更详细的配置项：https://github.com/antvis/component#annotation\n   * @returns [[Annotation]]\n   */\n\n\n  View.prototype.annotation = function () {\n    return this.getController('annotation');\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n\n\n  View.prototype.guide = function () {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  };\n\n  View.prototype.coordinate = function (type, coordinateCfg) {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', {\n        type: type,\n        cfg: coordinateCfg\n      });\n    } else {\n      set(this.options, 'coordinate', type);\n    } // 更新 coordinate 配置\n\n\n    this.coordinateController.update(this.options.coordinate);\n    return this.coordinateController;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n\n\n  View.prototype.coord = function (type, coordinateCfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.'); // @ts-ignore\n\n    return this.coordinate(type, coordinateCfg);\n  };\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n\n\n  View.prototype.facet = function (type, cfg) {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    } // 创建新的分面\n\n\n    var Ctor = getFacet(type);\n\n    if (!Ctor) {\n      throw new Error(\"facet '\".concat(type, \"' is not exist!\"));\n    }\n\n    this.facetInstance = new Ctor(this, __assign(__assign({}, cfg), {\n      type: type\n    }));\n    return this;\n  };\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n\n\n  View.prototype.animate = function (status) {\n    set(this.options, 'animate', status);\n    return this;\n  };\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n\n\n  View.prototype.updateOptions = function (options) {\n    this.clear(); // 清空\n\n    mix(this.options, options); // 需要把已存在的 view 销毁，否则会重复创建\n    // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n\n    this.views.forEach(function (view) {\n      return view.destroy();\n    });\n    this.views = [];\n    this.initOptions(); // 初始化坐标系大小，保证 padding 计算正确\n\n    this.coordinateBBox = this.viewBBox;\n    return this;\n  };\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n\n\n  View.prototype.option = function (name, opt) {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(\"Can't use built in variable name \\\"\".concat(name, \"\\\", please change another one.\"));\n    } // 存入到 option 中\n\n\n    set(this.options, name, opt);\n    return this;\n  };\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n\n\n  View.prototype.theme = function (theme) {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n    return this;\n  };\n  /* end 一系列传入配置的 API */\n\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n\n\n  View.prototype.interaction = function (name, cfg) {\n    var existInteraction = this.interactions[name]; // 存在则先销毁已有的\n\n    if (existInteraction) {\n      existInteraction.destroy();\n    } // 新建交互实例\n\n\n    var interaction = createInteraction(name, this, cfg);\n\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n\n    return this;\n  };\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n\n\n  View.prototype.removeInteraction = function (name) {\n    var existInteraction = this.interactions[name]; // 存在则先销毁已有的\n\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  };\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n\n\n  View.prototype.changeData = function (data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)); // 1. 保存数据\n\n    this.data(data); // 2. 渲染\n\n    this.paint(true); // 3. 遍历子 view 进行 change data\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i]; // FIXME 子 view 有自己的数据的情况，该如何处理？\n\n      view.changeData(data);\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /* View 管理相关的 API */\n\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n\n\n  View.prototype.createView = function (cfg) {\n    // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n    // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n    if (this.parent && this.parent.parent) {\n      // 存在 3 层 结构了\n      console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n    } // 子 view 共享 options 配置数据\n\n\n    var sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible\n    };\n    var v = new View(__assign(__assign({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: this.middleGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: this.foregroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      theme: this.themeObject,\n      padding: this.padding\n    }, cfg), {\n      options: __assign(__assign({}, sharedOptions), get(cfg, 'options', {}))\n    }));\n    this.views.push(v);\n    return v;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n\n\n  View.prototype.view = function (cfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  };\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n\n\n  View.prototype.removeView = function (view) {\n    var removedView = remove(this.views, function (v) {\n      return v === view;\n    })[0];\n\n    if (removedView) {\n      removedView.destroy();\n    }\n\n    return removedView;\n  };\n  /* end View 管理相关的 API */\n  // 一些 get 方法\n\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n\n\n  View.prototype.getCoordinate = function () {\n    return this.coordinateInstance;\n  };\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n\n\n  View.prototype.getTheme = function () {\n    return this.themeObject;\n  };\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n\n\n  View.prototype.getXScale = function () {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    var g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  };\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n\n\n  View.prototype.getYScales = function () {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    var tmpMap = {};\n    var yScales = [];\n    this.geometries.forEach(function (g) {\n      var yScale = g.getYScale();\n      var field = yScale.field;\n\n      if (!tmpMap[field]) {\n        tmpMap[field] = true;\n        yScales.push(yScale);\n      }\n    });\n    return yScales;\n  };\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n\n\n  View.prototype.getScalesByDim = function (dimType) {\n    var geometries = this.geometries;\n    var scales = {};\n\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      var scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n\n    return scales;\n  };\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n\n\n  View.prototype.getScale = function (field, key) {\n    var defaultKey = key ? key : this.getScaleKey(field); // 调用根节点 view 的方法获取\n\n    return this.getRootView().scalePool.getScale(defaultKey);\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Please use `getScale`.\n   */\n\n\n  View.prototype.getScaleByField = function (field, key) {\n    return this.getScale(field, key);\n  };\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n\n\n  View.prototype.getOptions = function () {\n    return this.options;\n  };\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n\n\n  View.prototype.getData = function () {\n    return this.filteredData;\n  };\n  /**\n   * 获取原始数据\n   * @returns 传入 G2 的原始数据\n   */\n\n\n  View.prototype.getOriginalData = function () {\n    return this.options.data;\n  };\n  /**\n   * 获取布局后的边距 padding\n   * @returns\n   */\n\n\n  View.prototype.getPadding = function () {\n    return this.autoPadding.getPadding();\n  };\n  /**\n   * 获取当前 view 有的 geometries\n   * @returns\n   */\n\n\n  View.prototype.getGeometries = function () {\n    return this.geometries;\n  };\n  /**\n   * 获取 view 中的所有 geome\n   */\n\n\n  View.prototype.getElements = function () {\n    return reduce(this.geometries, function (elements, geometry) {\n      return elements.concat(geometry.getElements());\n    }, []);\n  };\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n\n\n  View.prototype.getElementsBy = function (condition) {\n    return this.getElements().filter(function (el) {\n      return condition(el);\n    });\n  };\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n\n\n  View.prototype.getLayer = function (layer) {\n    return layer === LAYER.BG ? this.backgroundGroup : layer === LAYER.MID ? this.middleGroup : layer === LAYER.FORE ? this.foregroundGroup : this.foregroundGroup;\n  };\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n\n\n  View.prototype.isPointInPlot = function (point) {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  };\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n\n\n  View.prototype.getLegendAttributes = function () {\n    return flatten(this.geometries.map(function (g) {\n      return g.getGroupAttributes();\n    }));\n  };\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n\n\n  View.prototype.getGroupScales = function () {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    var scales = this.geometries.map(function (g) {\n      return g.getGroupScales();\n    });\n    return uniq(flatten(scales));\n  };\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n\n\n  View.prototype.getCanvas = function () {\n    return this.getRootView().canvas;\n  };\n  /**\n   * 获得根节点 view。\n   */\n\n\n  View.prototype.getRootView = function () {\n    var v = this;\n\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n\n      break;\n    }\n\n    return v;\n  };\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n\n\n  View.prototype.getXY = function (data) {\n    var coordinate = this.getCoordinate();\n    var xScales = this.getScalesByDim('x');\n    var yScales = this.getScalesByDim('y');\n    var x;\n    var y;\n    each(data, function (value, key) {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({\n        x: x,\n        y: y\n      });\n    }\n  };\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n\n\n  View.prototype.getController = function (name) {\n    return find(this.controllers, function (c) {\n      return c.name === name;\n    });\n  };\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n\n\n  View.prototype.showTooltip = function (point) {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n\n    return this;\n  };\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n\n\n  View.prototype.hideTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n\n\n  View.prototype.lockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n\n\n  View.prototype.unlockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n\n\n  View.prototype.isTooltipLocked = function () {\n    var tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  };\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n\n\n  View.prototype.getTooltipItems = function (point) {\n    var tooltip = this.getController('tooltip');\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  };\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n\n\n  View.prototype.getSnapRecords = function (point) {\n    var geometries = this.geometries;\n    var rst = [];\n\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geom = geometries[i];\n      var dataArray = geom.dataArray;\n      geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n\n      var record = void 0;\n\n      for (var j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n        var data = dataArray[j];\n        record = findDataByPoint(point, data, geom);\n\n        if (record) {\n          rst.push(record);\n        }\n      }\n    } // 同样递归处理子 views\n\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      var snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    }\n\n    return rst;\n  };\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n\n\n  View.prototype.getComponents = function () {\n    var components = [];\n    var controllers = this.controllers;\n\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      components = components.concat(controller.getComponents());\n    }\n\n    return components;\n  };\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n\n\n  View.prototype.filterData = function (data) {\n    var filters = this.options.filters; // 不存在 filters，则不需要进行数据过滤\n\n    if (size(filters) === 0) {\n      return data;\n    } // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n\n\n    return filter(data, function (datum, idx) {\n      // 所有的 filter 字段\n      var fields = Object.keys(filters); // 所有的条件都通过，才算通过\n\n      return fields.every(function (field) {\n        var condition = filters[field]; // condition 返回 true，则保留\n\n        return condition(datum[field], datum, idx);\n      });\n    });\n  };\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n\n\n  View.prototype.filterFieldData = function (field, data) {\n    var filters = this.options.filters;\n    var condition = get(filters, field);\n\n    if (isUndefined(condition)) {\n      return data;\n    }\n\n    return data.filter(function (datum, idx) {\n      return condition(datum[field], datum, idx);\n    });\n  };\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n\n\n  View.prototype.adjustCoordinate = function () {\n    var _a = this.getCoordinate(),\n        curStart = _a.start,\n        curEnd = _a.end;\n\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr; // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n\n    if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n      this.isCoordinateChanged = false; // 如果大小没有变化则不更新\n\n      return;\n    }\n\n    this.isCoordinateChanged = true;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  };\n\n  View.prototype.paint = function (isUpdate) {\n    this.renderDataRecursive(isUpdate); // 处理 sync scale 的逻辑\n\n    this.syncScale();\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT); // 初始化图形、组件位置，计算 padding\n\n    this.renderPaddingRecursive(isUpdate); // 布局图形、组件\n\n    this.renderLayoutRecursive(isUpdate); // 背景色 shape\n\n    this.renderBackgroundStyleShape(); // 最终的绘制 render\n\n    this.renderPaintRecursive(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n    this.isDataChanged = false; // 渲染完毕复位\n  };\n  /**\n   * 渲染背景样式的 shape。\n   * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n   */\n\n\n  View.prototype.renderBackgroundStyleShape = function () {\n    // 只有根节点才处理\n    if (this.parent) {\n      return;\n    }\n\n    var background = get(this.themeObject, 'background'); // 配置了背景色\n\n    if (background) {\n      // 1. 不存在则创建\n      if (!this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n          attrs: {},\n          zIndex: -1,\n          // 背景色 shape 不设置事件捕获\n          capture: false\n        });\n        this.backgroundStyleRectShape.toBack();\n      } // 2. 有了 shape 之后设置背景，位置（更新的时候）\n\n\n      var _a = this.viewBBox,\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height;\n      this.backgroundStyleRectShape.attr({\n        fill: background,\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    } else {\n      // 没有配置背景色\n      if (this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape.remove(true);\n        this.backgroundStyleRectShape = undefined;\n      }\n    }\n  };\n  /**\n   * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderPaddingRecursive = function (isUpdate) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox(); // 2. 更新 coordinate\n\n    this.adjustCoordinate(); // 3. 初始化组件 component\n\n    this.initComponents(isUpdate); // 4. 布局计算每隔 view 的 padding 值\n    // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n\n    this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding)); // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n    // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n\n    this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n    this.adjustCoordinate(); // 刷新 tooltip (tooltip crosshairs 依赖 coordinate 位置)\n\n    var tooltipController = this.controllers.find(function (c) {\n      return c.name === 'tooltip';\n    });\n    tooltipController.update(); // 同样递归处理子 views\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderPaddingRecursive(isUpdate);\n    }\n  };\n  /**\n   * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderLayoutRecursive = function (isUpdate) {\n    // 1. 同步子 view padding\n    // 根据配置获取 padding\n    var syncViewPaddingFn = this.syncViewPadding === true ? defaultSyncViewPadding : isFunction(this.syncViewPadding) ? this.syncViewPadding : undefined;\n\n    if (syncViewPaddingFn) {\n      syncViewPaddingFn(this, this.views, PaddingCal); // 同步 padding 之后，更新 coordinate\n\n      this.views.forEach(function (v) {\n        v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n        v.adjustCoordinate();\n      });\n    } // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n\n\n    this.doLayout(); // 同样递归处理子 views\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderLayoutRecursive(isUpdate);\n    }\n  };\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderPaintRecursive = function (isUpdate) {\n    var middleGroup = this.middleGroup;\n\n    if (this.limitInPlot) {\n      var _a = getCoordinateClipCfg(this.coordinateInstance),\n          type = _a.type,\n          attrs = _a.attrs;\n\n      middleGroup.setClip({\n        type: type,\n        attrs: attrs\n      });\n    } else {\n      // 清除已有的 clip\n      middleGroup.setClip(undefined);\n    } // 1. 渲染几何标记\n\n\n    this.paintGeometries(isUpdate); // 2. 绘制组件\n\n    this.renderComponents(isUpdate); // 同样递归处理子 views\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderPaintRecursive(isUpdate);\n    }\n  }; // end Get 方法\n\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n\n\n  View.prototype.createScale = function (field, data, scaleDef, key) {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    var currentScaleDef = get(this.options.scales, [field]);\n\n    var mergedScaleDef = __assign(__assign({}, currentScaleDef), scaleDef); // 2. 是否存在父 view，在则递归，否则创建\n\n\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    } // 3. 在根节点 view 通过 scalePool 创建\n\n\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  };\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderDataRecursive = function (isUpdate) {\n    // 1. 处理数据\n    this.doFilterData(); // 2. 创建实例\n\n    this.createCoordinate(); // 3. 初始化 Geometry\n\n    this.initGeometries(isUpdate); // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n\n    this.renderFacet(isUpdate); // 同样递归处理子 views\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderDataRecursive(isUpdate);\n    }\n  };\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n\n\n  View.prototype.calculateViewBBox = function () {\n    var x;\n    var y;\n    var width;\n    var height;\n\n    if (this.parent) {\n      var bbox = this.parent.coordinateBBox; // 存在 parent， 那么就是通过父容器大小计算\n\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n\n    var _a = this.region,\n        start = _a.start,\n        end = _a.end; // 根据 region 计算当前 view 的 bbox 大小。\n\n    var viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n\n    if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n      // viewBBox 发生变化的时候进行更新\n      this.viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n    } // 初始的 coordinate bbox 大小\n\n\n    this.coordinateBBox = this.viewBBox;\n  };\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n\n\n  View.prototype.initEvents = function () {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n    this.canvas.on('*', this.onCanvasEvent);\n  };\n  /**\n   * 初始化插件\n   */\n\n\n  View.prototype.initComponentController = function () {\n    var usedControllers = this.usedControllers;\n\n    for (var i = 0, len = usedControllers.length; i < len; i++) {\n      var controllerName = usedControllers[i];\n      var Ctor = getComponentController(controllerName);\n\n      if (Ctor) {\n        this.controllers.push(new Ctor(this));\n      }\n    }\n  };\n\n  View.prototype.createViewEvent = function (evt) {\n    var shape = evt.shape,\n        name = evt.name;\n    var data = shape ? shape.get('origin') : null; // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n\n    var e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  };\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n\n\n  View.prototype.doPlotEvent = function (e) {\n    var type = e.type,\n        x = e.x,\n        y = e.y;\n    var point = {\n      x: x,\n      y: y\n    };\n    var ALL_EVENTS = ['mousedown', 'mouseup', 'mousemove', 'mouseleave', 'mousewheel', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'click', 'dblclick', 'contextmenu'];\n\n    if (ALL_EVENTS.includes(type)) {\n      var currentInPlot = this.isPointInPlot(point);\n      var newEvent = e.clone();\n\n      if (currentInPlot) {\n        var TYPE = \"plot:\".concat(type); // 组合 plot 事件\n\n        newEvent.type = TYPE;\n        this.emit(TYPE, newEvent);\n\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      } // 对于 mouseenter, mouseleave 的计算处理\n\n\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n          }\n\n          newEvent.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, newEvent);\n        } // 赋新的状态值\n\n\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  }; // view 生命周期 —— 渲染流程\n\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n\n\n  View.prototype.doFilterData = function () {\n    var data = this.options.data;\n    this.filteredData = this.filterData(data);\n  };\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n\n\n  View.prototype.initGeometries = function (isUpdate) {\n    // 初始化图形的之前，先创建 / 更新 scales\n    this.createOrUpdateScales(); // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n\n    var coordinate = this.getCoordinate();\n    var scaleDefs = get(this.options, 'scales', {});\n    var geometries = this.geometries;\n\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i]; // 保持 scales 引用不要变化\n\n      geometry.scales = this.getGeometryScales();\n      var cfg = {\n        coordinate: coordinate,\n        scaleDefs: scaleDefs,\n        data: this.filteredData,\n        theme: this.themeObject,\n        isDataChanged: this.isDataChanged,\n        isCoordinateChanged: this.isCoordinateChanged\n      };\n\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    } // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n\n\n    this.adjustScales();\n  };\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n\n\n  View.prototype.createOrUpdateScales = function () {\n    var fields = this.getScaleFields();\n    var groupedFields = this.getGroupedFields();\n\n    var _a = this.getOptions(),\n        data = _a.data,\n        _b = _a.scales,\n        scales = _b === void 0 ? {} : _b;\n\n    var filteredData = this.filteredData;\n\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var field = fields[i];\n      var scaleDef = scales[field]; // 调用方法，递归去创建\n\n      var key = this.getScaleKey(field);\n      this.createScale(field, // 分组字段的 scale 使用未过滤的数据创建\n      groupedFields.includes(field) ? data : filteredData, scaleDef, key); // 缓存从当前 view 创建的 scale key\n\n      this.createdScaleKeys.set(key, true);\n    }\n  };\n  /**\n   * 处理 scale 同步逻辑\n   */\n\n\n  View.prototype.syncScale = function () {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n  };\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n\n\n  View.prototype.getGeometryScales = function () {\n    var fields = this.getScaleFields();\n    var scales = {};\n\n    for (var i = 0; i < fields.length; i++) {\n      var field = fields[i];\n      scales[field] = this.getScaleByField(field);\n    }\n\n    return scales;\n  };\n\n  View.prototype.getScaleFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      var geometryScales = geometry.getScaleFields();\n      uniq(geometryScales, fields, tmpMap);\n    }\n\n    return fields;\n  };\n\n  View.prototype.getGroupedFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      var groupFields = geometry.getGroupFields();\n      uniq(groupFields, fields, tmpMap);\n    }\n\n    return fields;\n  };\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n\n\n  View.prototype.adjustScales = function () {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  };\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n\n\n  View.prototype.adjustCategoryScaleRange = function () {\n    var _this = this;\n\n    var xyScales = __spreadArray([this.getXScale()], __read(this.getYScales()), false).filter(function (e) {\n      return !!e;\n    });\n\n    var coordinate = this.getCoordinate();\n    var scaleOptions = this.options.scales;\n    each(xyScales, function (scale) {\n      var field = scale.field,\n          values = scale.values,\n          isCategory = scale.isCategory,\n          isIdentity = scale.isIdentity; // 分类或者 identity 的 scale 才进行处理\n\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          // 更新 range\n          scale.range = getDefaultCategoryScaleRange(scale, coordinate, _this.theme);\n        }\n      }\n    });\n  };\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n\n\n  View.prototype.initComponents = function (isUpdate) {\n    // 先全部清空，然后 render\n    var controllers = this.controllers;\n\n    for (var i = 0; i < controllers.length; i++) {\n      var controller = controllers[i]; // 更新则走更新逻辑；否则清空载重绘\n\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    }\n  };\n\n  View.prototype.doLayout = function () {\n    this.layoutFunc(this);\n  };\n  /**\n   * 创建坐标系\n   * @private\n   */\n\n\n  View.prototype.createCoordinate = function () {\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  };\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n\n\n  View.prototype.paintGeometries = function (isUpdate) {\n    var doAnimation = this.options.animate; // geometry 的 paint 阶段\n\n    var coordinate = this.getCoordinate();\n    var canvasRegion = {\n      x: this.viewBBox.x,\n      y: this.viewBBox.y,\n      minX: this.viewBBox.minX,\n      minY: this.viewBBox.minY,\n      maxX: this.viewBBox.maxX,\n      maxY: this.viewBBox.maxY,\n      width: this.viewBBox.width,\n      height: this.viewBBox.height\n    };\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      geometry.coordinate = coordinate;\n      geometry.canvasRegion = canvasRegion;\n\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n\n      geometry.paint(isUpdate);\n    }\n  };\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderComponents = function (isUpdate) {\n    // 先全部清空，然后 render\n    for (var i = 0; i < this.getComponents().length; i++) {\n      var co = this.getComponents()[i];\n      co.component.render();\n    }\n  };\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderFacet = function (isUpdate) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear(); // 计算分面数据\n\n        this.facetInstance.init(); // 渲染组件和 views\n\n        this.facetInstance.render();\n      }\n    }\n  };\n\n  View.prototype.initOptions = function () {\n    var _this = this;\n\n    var _a = this.options,\n        _b = _a.geometries,\n        geometries = _b === void 0 ? [] : _b,\n        _c = _a.interactions,\n        interactions = _c === void 0 ? [] : _c,\n        _d = _a.views,\n        views = _d === void 0 ? [] : _d,\n        _e = _a.annotations,\n        annotations = _e === void 0 ? [] : _e,\n        coordinate = _a.coordinate,\n        events = _a.events,\n        facets = _a.facets; // 设置坐标系\n\n    if (this.coordinateController) {\n      // 更新 coordinate controller\n      coordinate && this.coordinateController.update(coordinate);\n    } else {\n      // 创建 coordinate controller\n      this.coordinateController = new CoordinateController(coordinate);\n    } // 创建 geometry 实例\n\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geometryOption = geometries[i];\n      this.createGeometry(geometryOption);\n    } // 创建 interactions 实例\n\n\n    for (var j = 0; j < interactions.length; j++) {\n      var interactionOption = interactions[j];\n      var type = interactionOption.type,\n          cfg = interactionOption.cfg;\n      this.interaction(type, cfg);\n    } // 创建 view 实例\n\n\n    for (var k = 0; k < views.length; k++) {\n      var viewOption = views[k];\n      this.createView(viewOption);\n    } // 设置 annotation\n\n\n    var annotationComponent = this.getController('annotation');\n\n    for (var l = 0; l < annotations.length; l++) {\n      var annotationOption = annotations[l];\n      annotationComponent.annotation(annotationOption);\n    } // 设置 events\n\n\n    if (events) {\n      each(events, function (eventCallback, eventName) {\n        _this.on(eventName, eventCallback);\n      });\n    }\n\n    if (facets) {\n      each(facets, function (facet) {\n        var type = facet.type,\n            rest = __rest(facet, [\"type\"]);\n\n        _this.facet(type, rest);\n      });\n    }\n  };\n\n  View.prototype.createGeometry = function (geometryOption) {\n    var type = geometryOption.type,\n        _a = geometryOption.cfg,\n        cfg = _a === void 0 ? {} : _a;\n\n    if (this[type]) {\n      var geometry_1 = this[type](cfg);\n      each(geometryOption, function (v, k) {\n        if (isFunction(geometry_1[k])) {\n          geometry_1[k](v);\n        }\n      });\n    }\n  };\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n\n\n  View.prototype.getScaleKey = function (field) {\n    return \"\".concat(this.id, \"-\").concat(field);\n  };\n\n  return View;\n}(Base);\n\nexport { View };\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\n\nexport function registerGeometry(name, Ctor) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    var props = __assign({\n      /** 图形容器 */\n      container: this.middleGroup.addGroup(),\n      labelsContainer: this.foregroundGroup.addGroup()\n    }, cfg);\n\n    var geometry = new Ctor(props);\n    this.geometries.push(geometry);\n    return geometry;\n  };\n}\nexport default View;","map":{"version":3,"mappings":"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","names":["clone","deepMix","each","filter","find","flatten","get","isBoolean","isFunction","isNil","isObject","isString","isUndefined","mix","remove","set","size","uniqueId","isEqual","isPlainObject","reduce","GROUP_Z_INDEX","LAYER","PLOT_EVENTS","VIEW_LIFE_CIRCLE","Base","getFacet","createInteraction","getTheme","BBox","getCoordinateClipCfg","isPointInCoordinate","uniq","findDataByPoint","parsePadding","getDefaultCategoryScaleRange","createTheme","getComponentController","getComponentControllerNames","CoordinateController","Event","defaultLayout","ScalePool","PaddingCal","calculatePadding","defaultSyncViewPadding","__extends","props","_super","visible","_this","data","animate","Map","evt","name","includes","e","createViewEvent","doPlotEvent","emit","_a","parent","canvas","backgroundGroup","middleGroup","foregroundGroup","_b","region","start","x","y","end","padding","appendPadding","theme","options","limitInPlot","syncViewPadding","__assign","id","themeObject","init","View","layout","layoutFunc","calculateViewBBox","initEvents","initComponentController","initOptions","isUpdate","payload","BEFORE_RENDER","fromData","paint","AFTER_RENDER","changeVisible","BEFORE_CLEAR","filteredData","coordinateInstance","undefined","isDataChanged","isCoordinateChanged","geometries","i","length","clear","container","labelsContainer","controllers","createdScaleKeys","forEach","v","k","getRootView","scalePool","deleteScale","views","AFTER_CLEAR","BEFORE_DESTROY","interactions","interaction","destroy","len","controller","call","geometry","getCanvas","draw","console","warn","field","condition","filters","axisOption","legendOption","selected","scaleOption","cfg","getController","annotation","type","coordinateCfg","coordinateController","update","coordinate","facetInstance","Ctor","Error","status","view","coordinateBBox","viewBBox","opt","prototype","existInteraction","BEFORE_CHANGE_DATA","changeData","AFTER_CHANGE_DATA","sharedOptions","scales","axes","getOption","tooltip","legends","addGroup","zIndex","BG","MID","FORE","push","createView","removedView","g","getXScale","tmpMap","yScales","yScale","getYScale","dimType","scale","key","defaultKey","getScaleKey","getScale","autoPadding","getPadding","elements","concat","getElements","el","layer","point","getCoordinate","map","getGroupAttributes","getGroupScales","xScales","getScalesByDim","value","convert","c","showTooltip","hideTooltip","lockTooltip","unlockTooltip","isTooltipLocked","getTooltipItems","rst","geom","dataArray","sort","record","j","dataLen","snapRecords","getSnapRecords","components","getComponents","datum","idx","fields","Object","keys","every","curStart","curEnd","bl","tr","adjust","renderDataRecursive","syncScale","BEFORE_PAINT","renderPaddingRecursive","renderLayoutRecursive","renderBackgroundStyleShape","renderPaintRecursive","AFTER_PAINT","background","backgroundStyleRectShape","addShape","attrs","capture","toBack","width","height","attr","fill","adjustCoordinate","initComponents","shrink","tooltipController","syncViewPaddingFn","doLayout","setClip","paintGeometries","renderComponents","scaleDef","currentScaleDef","mergedScaleDef","createScale","doFilterData","createCoordinate","initGeometries","renderFacet","bbox","on","onDelegateEvents","onCanvasEvent","usedControllers","controllerName","shape","ALL_EVENTS","currentInPlot","isPointInPlot","newEvent","TYPE","isPreMouseInPlot","MOUSE_LEAVE","LEAVE","MOUSE_ENTER","ENTER","filterData","createOrUpdateScales","scaleDefs","getGeometryScales","adjustScales","getScaleFields","groupedFields","getGroupedFields","getOptions","sync","getScaleByField","geometryScales","groupFields","getGroupFields","adjustCategoryScaleRange","xyScales","__spreadArray","__read","getYScales","scaleOptions","values","isCategory","isIdentity","range","render","create","doAnimation","canvasRegion","minX","minY","maxX","maxY","co","component","_c","_d","_e","annotations","events","facets","geometryOption","createGeometry","interactionOption","viewOption","annotationComponent","l","annotationOption","eventCallback","eventName","facet","rest","geometry_1","registerGeometry","toLowerCase"],"sourceRoot":"","sources":["../../src/chart/view.ts"],"sourcesContent":["import {\n  clone,\n  deepMix,\n  each,\n  filter,\n  find,\n  flatten,\n  get,\n  isBoolean,\n  isFunction,\n  isNil,\n  isObject,\n  isString,\n  isUndefined,\n  mix,\n  remove,\n  set,\n  size,\n  uniqueId,\n  isEqual,\n  isPlainObject,\n  reduce,\n} from '@antv/util';\nimport { Attribute, Coordinate, Event as GEvent, GroupComponent, ICanvas, IGroup, IShape, Scale } from '../dependents';\nimport {\n  AxisOption,\n  ComponentOption,\n  CoordinateCfg,\n  CoordinateOption,\n  Data,\n  Datum,\n  FacetCfgMap,\n  FilterCondition,\n  GeometryOption,\n  LegendOption,\n  LooseObject,\n  Options,\n  Point,\n  Region,\n  ScaleOption,\n  TooltipOption,\n  ViewCfg,\n  ViewPadding,\n  ViewAppendPadding,\n  EventPayload,\n  Padding,\n} from '../interface';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { Facet, getFacet } from '../facet';\nimport Geometry from '../geometry/base';\nimport Element from '../geometry/element';\nimport { createInteraction, Interaction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport Chart from './chart';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport Annotation from './controller/annotation';\nimport { Controller } from './controller/base';\nimport CoordinateController from './controller/coordinate';\nimport Tooltip from './controller/tooltip';\nimport Slider from './controller/slider';\nimport Scrollbar from './controller/scrollbar';\nimport Axis from './controller/axis';\nimport Gesture from './controller/gesture';\nimport Legend from './controller/legend';\nimport Event from './event';\nimport defaultLayout, { Layout } from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n\n/**\n * G2 视图 View 类\n */\nexport class View extends Base {\n  /** view id，全局唯一。 */\n  public id: string;\n  /** 父级 view，如果没有父级，则为空。 */\n  public parent: View;\n  /** 所有的子 view。 */\n  public views: View[] = [];\n  /** 所有的 geometry 实例。 */\n  public geometries: Geometry[] = [];\n  /** 所有的组件 controllers。 */\n  public controllers: Controller[] = [];\n  /** 所有的 Interaction 实例。 */\n  public interactions: Record<string, Interaction> = {};\n\n  /** view 区域空间。 */\n  public viewBBox: BBox;\n  /** 坐标系的位置大小，ViewBBox - padding = coordinateBBox。 */\n  public coordinateBBox: BBox;\n  /** view 的 padding 大小，传入的配置（不是解析之后的值）。 */\n  public padding: ViewPadding;\n  /** padding的基础上增加的调整值 */\n  public appendPadding: ViewAppendPadding;\n  /** G.Canvas 实例。 */\n  public canvas: ICanvas;\n  /** 存储最终计算的 padding 结果 */\n  public autoPadding: PaddingCal;\n\n  /** 三层 Group 图形中的背景层。 */\n  public backgroundGroup: IGroup;\n  /** 三层 Group 图形中的中间层。 */\n  public middleGroup: IGroup;\n  /** 三层 Group 图形中的前景层。 */\n  public foregroundGroup: IGroup;\n  /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n  public limitInPlot: boolean = false;\n\n  /**\n   * 标记 view 的大小位置范围，均是 0 ~ 1 范围，便于开发者使用，起始点为左上角。\n   */\n  protected region: Region;\n  /** 主题配置，存储当前主题配置。 */\n  protected themeObject: LooseObject;\n\n  // 配置信息存储\n  protected options: Options = {\n    data: [],\n    animate: true, // 默认开启动画\n  }; // 初始化为空\n\n  /** 过滤之后的数据 */\n  protected filteredData: Data;\n\n  /** 配置开启的组件插件，默认为全局配置的组件。 */\n  private usedControllers: string[] = getComponentControllerNames();\n\n  /** 所有的 scales */\n  private scalePool: ScalePool = new ScalePool();\n\n  /** 布局函数 */\n  protected layoutFunc: Layout = defaultLayout;\n  /** 生成的坐标系实例，{@link https://github.com/antvis/coord/blob/master/src/coord/base.ts|Coordinate} */\n  protected coordinateInstance: Coordinate;\n  /** Coordinate 相关的控制器类，负责坐标系实例的创建、更新、变换等 */\n  protected coordinateController: CoordinateController;\n  /** 分面类实例 */\n  protected facetInstance: Facet;\n\n  /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n  private isPreMouseInPlot: boolean = false;\n  /** 默认标识位，用于判定数据是否更新 */\n  private isDataChanged: boolean = false;\n  /** 用于判断坐标系范围是否发生变化的标志位 */\n  private isCoordinateChanged: boolean = false;\n  /** 从当前这个 view 创建的 scale key */\n  private createdScaleKeys = new Map<string, boolean>();\n  /** 背景色样式的 shape */\n  private backgroundStyleRectShape;\n  /** 是否同步子 view 的 padding */\n  private syncViewPadding;\n\n  constructor(props: ViewCfg) {\n    super({ visible: props.visible });\n\n    const {\n      id = uniqueId('view'),\n      parent,\n      canvas,\n      backgroundGroup,\n      middleGroup,\n      foregroundGroup,\n      region = { start: { x: 0, y: 0 }, end: { x: 1, y: 1 } },\n      padding,\n      appendPadding,\n      theme,\n      options,\n      limitInPlot,\n      syncViewPadding,\n    } = props;\n\n    this.parent = parent;\n    this.canvas = canvas;\n    this.backgroundGroup = backgroundGroup;\n    this.middleGroup = middleGroup;\n    this.foregroundGroup = foregroundGroup;\n    this.region = region;\n    this.padding = padding;\n    this.appendPadding = appendPadding;\n    // 接受父 view 传入的参数\n    this.options = { ...this.options, ...options };\n    this.limitInPlot = limitInPlot;\n    this.id = id;\n    this.syncViewPadding = syncViewPadding;\n\n    // 初始化 theme\n    this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n    this.init();\n  }\n\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n  public setLayout(layout: Layout) {\n    this.layoutFunc = layout;\n  }\n\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n  public init() {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox();\n\n    // 事件委托机制\n    this.initEvents();\n\n    // 初始化组件 controller\n    this.initComponentController();\n\n    this.initOptions();\n  }\n\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   * @param params render 事件参数\n   */\n  public render(isUpdate: boolean = false, payload?: EventPayload) {\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_RENDER, payload));\n    // 递归渲染\n    this.paint(isUpdate);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_RENDER, payload));\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n  public clear() {\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR);\n    // 1. 清空缓存和计算数据\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n    this.isCoordinateChanged = false; // 复位\n\n    // 2. 清空 geometries\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      geometries[i].clear();\n      // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n      geometries[i].container.remove(true);\n      geometries[i].labelsContainer.remove(true);\n    }\n    this.geometries = [];\n\n    // 3. 清空 controllers\n    const controllers = this.controllers;\n    for (let i = 0; i < controllers.length; i++) {\n      if (controllers[i].name === 'annotation') {\n        // 需要清空配置项\n        (controllers[i] as Annotation).clear(true);\n      } else {\n        controllers[i].clear();\n      }\n    }\n\n    // 4. 删除 scale 缓存\n    this.createdScaleKeys.forEach((v: boolean, k: string) => {\n      this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear();\n\n    // 递归处理子 view\n    const views = this.views;\n    for (let i = 0; i < views.length; i++) {\n      views[i].clear();\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  }\n\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n  public destroy() {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    const interactions = this.interactions;\n    // 销毁 interactions\n    each(interactions, (interaction) => {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n\n    this.clear();\n\n    // 销毁 controller 中的组件\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      controller.destroy();\n    }\n\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n\n    super.destroy();\n  }\n  /* end 生命周期函数 */\n\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n  public changeVisible(visible: boolean): View {\n    super.changeVisible(visible);\n\n    const geometries = this.geometries;\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      geometry.changeVisible(visible);\n    }\n\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      controller.changeVisible(visible);\n    }\n\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible);\n\n    // group.set('visible', visible) 不会触发自动刷新\n    this.getCanvas().draw();\n\n    return this;\n  }\n\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n  public data(data: Data): View {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n  public source(data: Data): View {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  }\n\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n  public filter(field: string, condition: FilterCondition | null): View {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    }\n    // condition 为空，则表示删除过滤条件\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n\n    return this;\n  }\n\n  /**\n   * 开启或者关闭坐标轴。\n   *\n   * ```ts\n   *  view.axis(false); // 不展示坐标轴\n   * ```\n   * @param field 坐标轴开关\n   */\n  public axis(field: boolean): View;\n  /**\n   * 对特定的某条坐标轴进行配置。\n   *\n   * @example\n   * ```ts\n   * view.axis('city', false); // 不展示 'city' 字段对应的坐标轴\n   *\n   * // 将 'city' 字段对应的坐标轴的标题隐藏\n   * view.axis('city', {\n   *   title: null,\n   * });\n   * ```\n   *\n   * @param field 要配置的坐标轴对应的字段名称\n   * @param axisOption 坐标轴具体配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\n   */\n  public axis(field: string, axisOption: AxisOption): View;\n  public axis(field: string | boolean, axisOption?: AxisOption): View {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n\n    return this;\n  }\n\n  /**\n   * 对图例进行整体配置。\n   *\n   * ```ts\n   * view.legend(false); // 关闭图例\n   *\n   * view.legend({\n   *   position: 'right',\n   * }); // 图例进行整体配置\n   * ```\n   * @param field\n   * @returns View\n   */\n  public legend(field: LegendOption): View;\n  /**\n   * 对特定的图例进行配置。\n   *\n   * @example\n   * ```ts\n   * view.legend('city', false); // 关闭某个图例，通过数据字段名进行关联\n   *\n   * // 对特定的图例进行配置\n   * view.legend('city', {\n   *   position: 'right',\n   * });\n   * ```\n   *\n   * @param field 图例对应的数据字段名称\n   * @param legendOption 图例配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\n   * @returns View\n   */\n  public legend(field: string, legendOption: LegendOption): View;\n  public legend(field: string | LegendOption, legendOption?: LegendOption): View {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n      if (isPlainObject(legendOption) && legendOption?.selected) {\n        set(this.options, ['filters', field], (name: string) => {\n          return legendOption?.selected[name] ?? true;\n        });\n      }\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n\n    return this;\n  }\n\n  /**\n   * 批量设置 scale 配置。\n   *\n   * ```ts\n   * view.scale({\n   *   sale: {\n   *     min: 0,\n   *     max: 100,\n   *   }\n   * });\n   * ```\n   * Scale 的详细配置项可以参考：https://github.com/antvis/scale#api\n   * @returns View\n   */\n  public scale(field: Record<string, ScaleOption>): View;\n  /**\n   * 为特性的数据字段进行 scale 配置。\n   *\n   * ```ts\n   * view.scale('sale', {\n   *   min: 0,\n   *   max: 100,\n   * });\n   * ```\n   *\n   * @returns View\n   */\n  public scale(field: string, scaleOption: ScaleOption): View;\n  public scale(field: string | Record<string, ScaleOption>, scaleOption?: ScaleOption): View {\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, (v: ScaleOption, k: string) => {\n        set(this.options, ['scales', k], v);\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n   * @returns View\n   */\n  public tooltip(cfg: boolean | TooltipOption): View {\n    set(this.options, 'tooltip', cfg);\n\n    return this;\n  }\n\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   * 更详细的配置项：https://github.com/antvis/component#annotation\n   * @returns [[Annotation]]\n   */\n  public annotation(): Annotation {\n    return this.getController('annotation');\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n  public guide(): Annotation {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  }\n\n  /**\n   * 坐标系配置。\n   *\n   * @example\n   * ```ts\n   * view.coordinate({\n   *   type: 'polar',\n   *   cfg: {\n   *     radius: 0.85,\n   *   },\n   *   actions: [\n   *     [ 'transpose' ],\n   *   ],\n   * });\n   * ```\n   *\n   * @param option\n   * @returns\n   */\n  public coordinate(option?: CoordinateOption): CoordinateController;\n  /**\n   * 声明坐标系类型，并进行配置。\n   *\n   * ```ts\n   * // 直角坐标系，并进行转置变换\n   * view.coordinate('rect').transpose();\n   *\n   * // 默认创建直角坐标系\n   * view.coordinate();\n   * ```\n   *\n   * @param type 坐标系类型\n   * @param [coordinateCfg] 坐标系配置\n   * @returns\n   */\n  public coordinate(type: string, coordinateCfg?: CoordinateCfg): CoordinateController;\n  public coordinate(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', { type, cfg: coordinateCfg } as CoordinateOption);\n    } else {\n      set(this.options, 'coordinate', type);\n    }\n\n    // 更新 coordinate 配置\n    this.coordinateController.update(this.options.coordinate);\n\n    return this.coordinateController;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n  public coord(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.');\n    // @ts-ignore\n    return this.coordinate(type, coordinateCfg);\n  }\n\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n  public facet<T extends keyof FacetCfgMap>(type: T, cfg: FacetCfgMap[T]): View {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    }\n\n    // 创建新的分面\n    const Ctor = getFacet(type);\n\n    if (!Ctor) {\n      throw new Error(`facet '${type}' is not exist!`);\n    }\n\n    this.facetInstance = new Ctor(this, { ...cfg, type });\n\n    return this;\n  }\n\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n  public animate(status: boolean): View {\n    set(this.options, 'animate', status);\n    return this;\n  }\n\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n  public updateOptions(options: Options) {\n    this.clear(); // 清空\n    mix(this.options, options);\n\n    // 需要把已存在的 view 销毁，否则会重复创建\n    // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n    this.views.forEach((view) => view.destroy());\n    this.views = [];\n\n    this.initOptions();\n    // 初始化坐标系大小，保证 padding 计算正确\n    this.coordinateBBox = this.viewBBox;\n    return this;\n  }\n\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n  public option(name: string, opt: any): View {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(`Can't use built in variable name \"${name}\", please change another one.`);\n    }\n\n    // 存入到 option 中\n    set(this.options, name, opt);\n    return this;\n  }\n\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n  public theme(theme: string | LooseObject): View {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n\n    return this;\n  }\n\n  /* end 一系列传入配置的 API */\n\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n  public interaction(name: string, cfg?: LooseObject): View {\n    const existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n    }\n\n    // 新建交互实例\n    const interaction = createInteraction(name, this, cfg);\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n    return this;\n  }\n\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n  public removeInteraction(name: string) {\n    const existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  }\n\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n  public changeData(data: Data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 1. 保存数据\n    this.data(data);\n\n    // 2. 渲染\n    this.paint(true);\n\n    // 3. 遍历子 view 进行 change data\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      // FIXME 子 view 有自己的数据的情况，该如何处理？\n      view.changeData(data);\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  }\n\n  /* View 管理相关的 API */\n\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n  public createView(cfg?: Partial<ViewCfg>): View {\n    // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n    // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n    if (this.parent && this.parent.parent) {\n      // 存在 3 层 结构了\n      console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n    }\n\n    // 子 view 共享 options 配置数据\n    const sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible,\n    };\n\n    const v = new View({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: this.middleGroup.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: this.foregroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      theme: this.themeObject,\n      padding: this.padding,\n      ...cfg,\n      options: {\n        ...sharedOptions,\n        ...get(cfg, 'options', {}),\n      },\n    });\n\n    this.views.push(v);\n\n    return v;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n  public view(cfg?: Partial<ViewCfg>) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  }\n\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n  public removeView(view: View): View {\n    const removedView = remove(this.views, (v: View) => v === view)[0];\n\n    if (removedView) {\n      removedView.destroy();\n    }\n\n    return removedView;\n  }\n  /* end View 管理相关的 API */\n\n  // 一些 get 方法\n\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n  public getCoordinate() {\n    return this.coordinateInstance;\n  }\n\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n  public getTheme(): LooseObject {\n    return this.themeObject;\n  }\n\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n  public getXScale(): Scale {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    const g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  }\n\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n  public getYScales(): Scale[] {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    const tmpMap = {};\n    const yScales = [];\n    this.geometries.forEach((g: Geometry) => {\n      const yScale = g.getYScale();\n      const field = yScale.field;\n      if (!tmpMap[field]) {\n        tmpMap[field] = true;\n        yScales.push(yScale);\n      }\n    });\n    return yScales;\n  }\n\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n  public getScalesByDim(dimType: 'x' | 'y'): Record<string, Scale> {\n    const geometries = this.geometries;\n    const scales = {};\n\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      const scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n\n    return scales;\n  }\n\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n  public getScale(field: string, key?: string): Scale {\n    const defaultKey = key ? key : this.getScaleKey(field);\n    // 调用根节点 view 的方法获取\n    return this.getRootView().scalePool.getScale(defaultKey);\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Please use `getScale`.\n   */\n  public getScaleByField(field: string, key?: string): Scale {\n    return this.getScale(field, key);\n  }\n\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n  public getOptions(): Options {\n    return this.options;\n  }\n\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n  public getData() {\n    return this.filteredData;\n  }\n\n  /**\n   * 获取原始数据\n   * @returns 传入 G2 的原始数据\n   */\n  public getOriginalData() {\n    return this.options.data;\n  }\n\n  /**\n   * 获取布局后的边距 padding\n   * @returns\n   */\n  public getPadding(): Padding {\n    return this.autoPadding.getPadding();\n  }\n\n  /**\n   * 获取当前 view 有的 geometries\n   * @returns\n   */\n  public getGeometries() {\n    return this.geometries;\n  }\n\n  /**\n   * 获取 view 中的所有 geome\n   */\n  public getElements(): Element[] {\n    return reduce(\n      this.geometries,\n      (elements: Element[], geometry: Geometry) => {\n        return elements.concat(geometry.getElements());\n      },\n      []\n    );\n  }\n\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  public getElementsBy(condition: (element: Element) => boolean): Element[] {\n    return this.getElements().filter((el) => condition(el));\n  }\n\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n  public getLayer(layer: LAYER): IGroup {\n    return layer === LAYER.BG\n      ? this.backgroundGroup\n      : layer === LAYER.MID\n      ? this.middleGroup\n      : layer === LAYER.FORE\n      ? this.foregroundGroup\n      : this.foregroundGroup;\n  }\n\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n  public isPointInPlot(point: Point): boolean {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  }\n\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n  public getLegendAttributes(): Attribute[] {\n    return flatten(this.geometries.map((g: Geometry) => g.getGroupAttributes())) as unknown as Attribute[];\n  }\n\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n  public getGroupScales(): Scale[] {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    const scales = this.geometries.map((g: Geometry) => g.getGroupScales());\n    return uniq(flatten(scales));\n  }\n\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n  public getCanvas(): ICanvas {\n    return (this.getRootView() as unknown as Chart).canvas;\n  }\n\n  /**\n   * 获得根节点 view。\n   */\n  public getRootView(): View {\n    let v = this as View;\n\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n      break;\n    }\n    return v;\n  }\n\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n  public getXY(data: Datum): Point {\n    const coordinate = this.getCoordinate();\n    const xScales = this.getScalesByDim('x');\n    const yScales = this.getScalesByDim('y');\n    let x;\n    let y;\n\n    each(data, (value, key) => {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({ x, y });\n    }\n  }\n\n  public getController(name: 'tooltip'): Tooltip;\n  public getController(name: 'axis'): Axis;\n  public getController(name: 'legend'): Legend;\n  public getController(name: 'scrollbar'): Scrollbar;\n  public getController(name: 'slider'): Slider;\n  public getController(name: 'annotation'): Annotation;\n  public getController(name: 'gestucre'): Gesture;\n  public getController(name: string): Controller;\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n  public getController(name: string): Controller {\n    return find(this.controllers, (c: Controller) => c.name === name);\n  }\n\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n  public showTooltip(point: Point): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n    return this;\n  }\n\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n  public hideTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n  public lockTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n  public unlockTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n  public isTooltipLocked() {\n    const tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  }\n\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n  public getTooltipItems(point: Point) {\n    const tooltip = this.getController('tooltip');\n\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  }\n\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n  public getSnapRecords(point: Point) {\n    const geometries = this.geometries;\n    let rst = [];\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geom = geometries[i];\n      const dataArray = geom.dataArray;\n      geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n      let record;\n      for (let j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n        const data = dataArray[j];\n        record = findDataByPoint(point, data, geom);\n        if (record) {\n          rst.push(record);\n        }\n      }\n    }\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      const snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    }\n\n    return rst;\n  }\n\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n  public getComponents(): ComponentOption[] {\n    let components = [];\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      components = components.concat(controller.getComponents());\n    }\n\n    return components;\n  }\n\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n  public filterData(data: Data): Data {\n    const { filters } = this.options;\n    // 不存在 filters，则不需要进行数据过滤\n    if (size(filters) === 0) {\n      return data;\n    }\n\n    // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n    return filter(data, (datum: Datum, idx: number) => {\n      // 所有的 filter 字段\n      const fields = Object.keys(filters);\n\n      // 所有的条件都通过，才算通过\n      return fields.every((field: string) => {\n        const condition = filters[field];\n\n        // condition 返回 true，则保留\n        return condition(datum[field], datum, idx);\n      });\n    });\n  }\n\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n  public filterFieldData(field: string, data: Data): Data {\n    const { filters } = this.options;\n    const condition = get(filters, field);\n\n    if (isUndefined(condition)) {\n      return data;\n    }\n    return data.filter((datum: Datum, idx: number) => condition(datum[field], datum, idx));\n  }\n\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n  public adjustCoordinate() {\n    const { start: curStart, end: curEnd } = this.getCoordinate();\n    const start = this.coordinateBBox.bl;\n    const end = this.coordinateBBox.tr;\n\n    // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n    if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n      this.isCoordinateChanged = false;\n      // 如果大小没有变化则不更新\n      return;\n    }\n    this.isCoordinateChanged = true;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  }\n\n  protected paint(isUpdate: boolean) {\n    this.renderDataRecursive(isUpdate);\n\n    // 处理 sync scale 的逻辑\n    this.syncScale();\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n\n    // 初始化图形、组件位置，计算 padding\n    this.renderPaddingRecursive(isUpdate);\n    // 布局图形、组件\n    this.renderLayoutRecursive(isUpdate);\n    // 背景色 shape\n    this.renderBackgroundStyleShape();\n    // 最终的绘制 render\n    this.renderPaintRecursive(isUpdate);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n\n    this.isDataChanged = false; // 渲染完毕复位\n  }\n\n  /**\n   * 渲染背景样式的 shape。\n   * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n   */\n  private renderBackgroundStyleShape() {\n    // 只有根节点才处理\n    if (this.parent) {\n      return;\n    }\n    const background = get(this.themeObject, 'background');\n    // 配置了背景色\n    if (background) {\n      // 1. 不存在则创建\n      if (!this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n          attrs: {},\n          zIndex: -1,\n          // 背景色 shape 不设置事件捕获\n          capture: false,\n        });\n        this.backgroundStyleRectShape.toBack();\n      }\n\n      // 2. 有了 shape 之后设置背景，位置（更新的时候）\n      const { x, y, width, height } = this.viewBBox;\n      this.backgroundStyleRectShape.attr({\n        fill: background,\n        x,\n        y,\n        width,\n        height,\n      });\n    } else {\n      // 没有配置背景色\n      if (this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape.remove(true);\n        this.backgroundStyleRectShape = undefined;\n      }\n    }\n  }\n\n  /**\n   * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  protected renderPaddingRecursive(isUpdate: boolean) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox();\n    // 2. 更新 coordinate\n    this.adjustCoordinate();\n    // 3. 初始化组件 component\n    this.initComponents(isUpdate);\n    // 4. 布局计算每隔 view 的 padding 值\n    // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n    this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding));\n    // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n    // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n    this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n    this.adjustCoordinate();\n\n    // 刷新 tooltip (tooltip crosshairs 依赖 coordinate 位置)\n    const tooltipController = this.controllers.find((c) => c.name === 'tooltip');\n    tooltipController.update();\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderPaddingRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  protected renderLayoutRecursive(isUpdate: boolean) {\n    // 1. 同步子 view padding\n    // 根据配置获取 padding\n    const syncViewPaddingFn =\n      this.syncViewPadding === true\n        ? defaultSyncViewPadding\n        : isFunction(this.syncViewPadding)\n        ? this.syncViewPadding\n        : undefined;\n\n    if (syncViewPaddingFn) {\n      syncViewPaddingFn(this, this.views, PaddingCal);\n      // 同步 padding 之后，更新 coordinate\n      this.views.forEach((v: View) => {\n        v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n        v.adjustCoordinate();\n      });\n    }\n\n    // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n    this.doLayout();\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderLayoutRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n  protected renderPaintRecursive(isUpdate: boolean) {\n    const middleGroup = this.middleGroup;\n    if (this.limitInPlot) {\n      const { type, attrs } = getCoordinateClipCfg(this.coordinateInstance);\n      middleGroup.setClip({\n        type,\n        attrs,\n      });\n    } else {\n      // 清除已有的 clip\n      middleGroup.setClip(undefined);\n    }\n\n    // 1. 渲染几何标记\n    this.paintGeometries(isUpdate);\n    // 2. 绘制组件\n    this.renderComponents(isUpdate);\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderPaintRecursive(isUpdate);\n    }\n  }\n\n  // end Get 方法\n\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  protected createScale(field: string, data: Data, scaleDef: ScaleOption, key: string): Scale {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    const currentScaleDef = get(this.options.scales, [field]);\n    const mergedScaleDef = { ...currentScaleDef, ...scaleDef };\n\n    // 2. 是否存在父 view，在则递归，否则创建\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    }\n\n    // 3. 在根节点 view 通过 scalePool 创建\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  }\n\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n  private renderDataRecursive(isUpdate: boolean) {\n    // 1. 处理数据\n    this.doFilterData();\n    // 2. 创建实例\n    this.createCoordinate();\n    // 3. 初始化 Geometry\n    this.initGeometries(isUpdate);\n    // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n    this.renderFacet(isUpdate);\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderDataRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n  private calculateViewBBox() {\n    let x;\n    let y;\n    let width;\n    let height;\n\n    if (this.parent) {\n      const bbox = this.parent.coordinateBBox;\n      // 存在 parent， 那么就是通过父容器大小计算\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n\n    const { start, end } = this.region;\n\n    // 根据 region 计算当前 view 的 bbox 大小。\n    const viewBBox = new BBox(\n      x + width * start.x,\n      y + height * start.y,\n      width * (end.x - start.x),\n      height * (end.y - start.y)\n    );\n\n    if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n      // viewBBox 发生变化的时候进行更新\n      this.viewBBox = new BBox(\n        x + width * start.x,\n        y + height * start.y,\n        width * (end.x - start.x),\n        height * (end.y - start.y)\n      );\n    }\n\n    // 初始的 coordinate bbox 大小\n    this.coordinateBBox = this.viewBBox;\n  }\n\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n  private initEvents() {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n\n    this.canvas.on('*', this.onCanvasEvent);\n  }\n\n  private onCanvasEvent = (evt: GEvent): void => {\n    const name = evt.name;\n    if (!name.includes(':')) {\n      // 非委托事件\n      const e = this.createViewEvent(evt);\n      // 处理 plot 事件\n      this.doPlotEvent(e);\n      this.emit(name, e);\n    }\n  };\n\n  /**\n   * 初始化插件\n   */\n  private initComponentController() {\n    const usedControllers = this.usedControllers;\n    for (let i = 0, len = usedControllers.length; i < len; i++) {\n      const controllerName = usedControllers[i];\n      const Ctor = getComponentController(controllerName);\n      if (Ctor) {\n        this.controllers.push(new Ctor(this));\n      }\n    }\n  }\n\n  private createViewEvent(evt: GEvent) {\n    const { shape, name } = evt;\n\n    const data = shape ? shape.get('origin') : null;\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    const e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  }\n  /**\n   * 触发事件之后\n   * @param evt\n   */\n  private onDelegateEvents = (evt: GEvent): void => {\n    // 阻止继续冒泡，防止重复事件触发\n    // evt.preventDefault();\n    const { name } = evt;\n    if (!name.includes(':')) {\n      return;\n    }\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    const e = this.createViewEvent(evt);\n\n    // 包含有基本事件、组合事件\n    this.emit(name, e);\n    // const currentTarget = evt.currentTarget as IShape;\n    // const inheritNames = currentTarget.get('inheritNames');\n    // if (evt.delegateObject || inheritNames) {\n    //   const events = this.getEvents();\n    //   each(inheritNames, (subName) => {\n    //     const eventName = `${subName}:${type}`;\n    //     if (events[eventName]) {\n    //       this.emit(eventName, e);\n    //     }\n    //   });\n    // }\n  };\n\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n  private doPlotEvent(e: Event) {\n    const { type, x, y } = e;\n\n    const point = { x, y };\n\n    const ALL_EVENTS = [\n      'mousedown',\n      'mouseup',\n      'mousemove',\n      'mouseleave',\n      'mousewheel',\n      'touchstart',\n      'touchmove',\n      'touchend',\n      'touchcancel',\n      'click',\n      'dblclick',\n      'contextmenu',\n    ];\n\n    if (ALL_EVENTS.includes(type)) {\n      const currentInPlot = this.isPointInPlot(point);\n      const newEvent = e.clone();\n\n      if (currentInPlot) {\n        const TYPE = `plot:${type}`; // 组合 plot 事件\n        newEvent.type = TYPE;\n        this.emit(TYPE, newEvent);\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      }\n\n      // 对于 mouseenter, mouseleave 的计算处理\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, newEvent);\n        }\n        // 赋新的状态值\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  }\n\n  // view 生命周期 —— 渲染流程\n\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n  private doFilterData() {\n    const { data } = this.options;\n    this.filteredData = this.filterData(data);\n  }\n\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n  private initGeometries(isUpdate: boolean) {\n    // 初始化图形的之前，先创建 / 更新 scales\n    this.createOrUpdateScales();\n    // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n    const coordinate = this.getCoordinate();\n    const scaleDefs = get(this.options, 'scales', {});\n    const geometries = this.geometries;\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      // 保持 scales 引用不要变化\n      geometry.scales = this.getGeometryScales();\n      const cfg = {\n        coordinate, // 使用 coordinate 引用，可以保持 coordinate 的同步更新\n        scaleDefs,\n        data: this.filteredData,\n        theme: this.themeObject,\n        isDataChanged: this.isDataChanged,\n        isCoordinateChanged: this.isCoordinateChanged,\n      };\n\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    }\n\n    // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n    this.adjustScales();\n  }\n\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n  private createOrUpdateScales() {\n    const fields = this.getScaleFields();\n    const groupedFields = this.getGroupedFields();\n\n    const { data, scales = {} } = this.getOptions();\n    const filteredData = this.filteredData;\n\n    for (let i = 0, len = fields.length; i < len; i++) {\n      const field = fields[i];\n      const scaleDef = scales[field];\n\n      // 调用方法，递归去创建\n      const key = this.getScaleKey(field);\n      this.createScale(\n        field,\n        // 分组字段的 scale 使用未过滤的数据创建\n        groupedFields.includes(field) ? data : filteredData,\n        scaleDef,\n        key\n      );\n\n      // 缓存从当前 view 创建的 scale key\n      this.createdScaleKeys.set(key, true);\n    }\n  }\n\n  /**\n   * 处理 scale 同步逻辑\n   */\n  private syncScale() {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n  }\n\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n  private getGeometryScales(): Record<string, Scale> {\n    const fields = this.getScaleFields();\n\n    const scales = {};\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      scales[field] = this.getScaleByField(field);\n    }\n\n    return scales;\n  }\n\n  private getScaleFields() {\n    const fields = [];\n    const tmpMap = new Map();\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      const geometryScales = geometry.getScaleFields();\n      uniq(geometryScales, fields, tmpMap);\n    }\n    return fields;\n  }\n\n  private getGroupedFields() {\n    const fields = [];\n    const tmpMap = new Map();\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      const groupFields = geometry.getGroupFields();\n      uniq(groupFields, fields, tmpMap);\n    }\n    return fields;\n  }\n\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n  private adjustScales() {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  }\n\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n  private adjustCategoryScaleRange() {\n    const xyScales = [this.getXScale(), ...this.getYScales()].filter((e) => !!e);\n    const coordinate = this.getCoordinate();\n    const scaleOptions = this.options.scales;\n\n    each(xyScales, (scale: Scale) => {\n      const { field, values, isCategory, isIdentity } = scale;\n\n      // 分类或者 identity 的 scale 才进行处理\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          // 更新 range\n          scale.range = getDefaultCategoryScaleRange(scale, coordinate, this.theme);\n        }\n      }\n    });\n  }\n\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n  private initComponents(isUpdate: boolean) {\n    // 先全部清空，然后 render\n    const controllers = this.controllers;\n    for (let i = 0; i < controllers.length; i++) {\n      const controller = controllers[i];\n      // 更新则走更新逻辑；否则清空载重绘\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    }\n  }\n\n  private doLayout() {\n    this.layoutFunc(this);\n  }\n\n  /**\n   * 创建坐标系\n   * @private\n   */\n  private createCoordinate() {\n    const start = this.coordinateBBox.bl;\n    const end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  }\n\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n  private paintGeometries(isUpdate: boolean) {\n    const doAnimation = this.options.animate;\n    // geometry 的 paint 阶段\n    const coordinate = this.getCoordinate();\n    const canvasRegion = {\n      x: this.viewBBox.x,\n      y: this.viewBBox.y,\n      minX: this.viewBBox.minX,\n      minY: this.viewBBox.minY,\n      maxX: this.viewBBox.maxX,\n      maxY: this.viewBBox.maxY,\n      width: this.viewBBox.width,\n      height: this.viewBBox.height,\n    };\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      geometry.coordinate = coordinate;\n      geometry.canvasRegion = canvasRegion;\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n      geometry.paint(isUpdate);\n    }\n  }\n\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n  private renderComponents(isUpdate: boolean) {\n    // 先全部清空，然后 render\n    for (let i = 0; i < this.getComponents().length; i++) {\n      const co = this.getComponents()[i];\n      (co.component as GroupComponent).render();\n    }\n  }\n\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n  private renderFacet(isUpdate: boolean) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear();\n        // 计算分面数据\n        this.facetInstance.init();\n        // 渲染组件和 views\n        this.facetInstance.render();\n      }\n    }\n  }\n\n  private initOptions() {\n    const {\n      geometries = [],\n      interactions = [],\n      views = [],\n      annotations = [],\n      coordinate,\n      events,\n      facets,\n    } = this.options;\n\n    // 设置坐标系\n    if (this.coordinateController) {\n      // 更新 coordinate controller\n      coordinate && this.coordinateController.update(coordinate);\n    } else {\n      // 创建 coordinate controller\n      this.coordinateController = new CoordinateController(coordinate);\n    }\n\n    // 创建 geometry 实例\n    for (let i = 0; i < geometries.length; i++) {\n      const geometryOption = geometries[i];\n      this.createGeometry(geometryOption);\n    }\n\n    // 创建 interactions 实例\n    for (let j = 0; j < interactions.length; j++) {\n      const interactionOption = interactions[j];\n      const { type, cfg } = interactionOption;\n      this.interaction(type, cfg);\n    }\n\n    // 创建 view 实例\n    for (let k = 0; k < views.length; k++) {\n      const viewOption = views[k];\n      this.createView(viewOption);\n    }\n\n    // 设置 annotation\n    const annotationComponent = this.getController('annotation');\n    for (let l = 0; l < annotations.length; l++) {\n      const annotationOption = annotations[l];\n      annotationComponent.annotation(annotationOption);\n    }\n\n    // 设置 events\n    if (events) {\n      each(events, (eventCallback, eventName) => {\n        this.on(eventName, eventCallback);\n      });\n    }\n\n    if (facets) {\n      each(facets, (facet) => {\n        const { type, ...rest } = facet;\n\n        this.facet(type, rest);\n      });\n    }\n  }\n\n  private createGeometry(geometryOption: GeometryOption) {\n    const { type, cfg = {} } = geometryOption;\n    if (this[type]) {\n      const geometry = this[type](cfg);\n      each(geometryOption, (v, k) => {\n        if (isFunction(geometry[k])) {\n          geometry[k](v);\n        }\n      });\n    }\n  }\n\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n  private getScaleKey(field: string): string {\n    return `${this.id}-${field}`;\n  }\n}\n\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\nexport function registerGeometry(name: string, Ctor: any) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg: any = {}) {\n    const props = {\n      /** 图形容器 */\n      container: this.middleGroup.addGroup(),\n      labelsContainer: this.foregroundGroup.addGroup(),\n      ...cfg,\n    };\n\n    const geometry = new Ctor(props);\n    this.geometries.push(geometry);\n\n    return geometry;\n  };\n}\n\nexport default View;\n"]},"metadata":{},"sourceType":"module"}