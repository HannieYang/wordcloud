{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __extends, __read } from \"tslib\";\nimport { Event } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util'; // 获取对应的 scale\n\nfunction getFilter(scale, dim, point1, point2) {\n  var min = Math.min(point1[dim], point2[dim]);\n  var max = Math.max(point1[dim], point2[dim]);\n\n  var _a = __read(scale.range, 2),\n      rangeMin = _a[0],\n      rangeMax = _a[1]; // 约束值在 scale 的 range 之间\n\n\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n\n  if (max > rangeMax) {\n    max = rangeMax;\n  } // 范围大于整个 view 的范围，则返回 null\n\n\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n\n  var minValue = scale.invert(min);\n  var maxValue = scale.invert(max);\n\n  if (scale.isCategory) {\n    var minIndex = scale.values.indexOf(minValue);\n    var maxIndex = scale.values.indexOf(maxValue);\n    var arr_1 = scale.values.slice(minIndex, maxIndex + 1);\n    return function (value) {\n      return arr_1.includes(value);\n    };\n  } else {\n    return function (value) {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n/** range-filter 只用于：brush-filter, brush-x-filter, brush-y-filter */\n\n\nvar EVENTS;\n\n(function (EVENTS) {\n  EVENTS[\"FILTER\"] = \"brush-filter-processing\";\n  EVENTS[\"RESET\"] = \"brush-filter-reset\";\n  EVENTS[\"BEFORE_FILTER\"] = \"brush-filter:beforefilter\";\n  EVENTS[\"AFTER_FILTER\"] = \"brush-filter:afterfilter\";\n  EVENTS[\"BEFORE_RESET\"] = \"brush-filter:beforereset\";\n  EVENTS[\"AFTER_RESET\"] = \"brush-filter:afterreset\";\n})(EVENTS || (EVENTS = {}));\n\nexport { EVENTS as BRUSH_FILTER_EVENTS };\n/**\n * 范围过滤的 Action\n * @ignore\n */\n\nvar RangeFilter =\n/** @class */\nfunction (_super) {\n  __extends(RangeFilter, _super);\n\n  function RangeFilter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 范围过滤生效的字段/维度，可以是 x, y\n     */\n\n\n    _this.dims = ['x', 'y'];\n    /** 起始点 */\n\n    _this.startPoint = null;\n    _this.isStarted = false;\n    return _this;\n  } // x,y 是否生效\n\n\n  RangeFilter.prototype.hasDim = function (dim) {\n    return this.dims.includes(dim);\n  };\n  /**\n   * 开始范围过滤，记录范围过滤的起点\n   */\n\n\n  RangeFilter.prototype.start = function () {\n    var context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  };\n  /**\n   * 过滤，以开始的点和当前点对数据进行过滤\n   */\n\n\n  RangeFilter.prototype.filter = function () {\n    var startPoint;\n    var currentPoint;\n\n    if (isMask(this.context)) {\n      var maskShape = this.context.event.target;\n      var bbox = maskShape.getCanvasBBox();\n      startPoint = {\n        x: bbox.x,\n        y: bbox.y\n      };\n      currentPoint = {\n        x: bbox.maxX,\n        y: bbox.maxY\n      };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n\n    var _a = this.context,\n        view = _a.view,\n        event = _a.event;\n    var payload = {\n      view: view,\n      event: event,\n      dims: this.dims\n    };\n    view.emit(EVENTS.BEFORE_FILTER, Event.fromData(view, EVENTS.BEFORE_FILTER, payload));\n    var coord = view.getCoordinate();\n    var normalCurrent = coord.invert(currentPoint);\n    var normalStart = coord.invert(startPoint); // 设置 x 方向的 filter\n\n    if (this.hasDim('x')) {\n      var xScale = view.getXScale();\n      var filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    } // 设置 y 方向的 filter\n\n\n    if (this.hasDim('y')) {\n      var yScale = view.getYScales()[0];\n      var filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n\n    this.reRender(view, {\n      source: EVENTS.FILTER\n    });\n    view.emit(EVENTS.AFTER_FILTER, Event.fromData(view, EVENTS.AFTER_FILTER, payload));\n  };\n  /**\n   * 结束\n   */\n\n\n  RangeFilter.prototype.end = function () {\n    this.isStarted = false;\n  };\n  /**\n   * 取消同当前 Action 相关的过滤，指定的 x,y\n   */\n\n\n  RangeFilter.prototype.reset = function () {\n    var view = this.context.view;\n    view.emit(EVENTS.BEFORE_RESET, Event.fromData(view, EVENTS.BEFORE_RESET, {}));\n    this.isStarted = false;\n\n    if (this.hasDim('x')) {\n      var xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      var yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n\n    this.reRender(view, {\n      source: EVENTS.RESET\n    });\n    view.emit(EVENTS.AFTER_RESET, Event.fromData(view, EVENTS.AFTER_RESET, {}));\n  };\n  /**\n   * 对 view 进行过滤\n   */\n\n\n  RangeFilter.prototype.filterView = function (view, field, filter) {\n    view.filter(field, filter);\n  };\n  /**\n   * 重新渲染\n   * @param view\n   */\n\n\n  RangeFilter.prototype.reRender = function (view, payload) {\n    view.render(true, payload);\n  };\n\n  return RangeFilter;\n}(Action);\n\nexport default RangeFilter;","map":{"version":3,"mappings":"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","names":["Event","Action","isMask","getFilter","scale","dim","point1","point2","min","Math","max","range","rangeMin","rangeMax","minValue","invert","maxValue","isCategory","minIndex","values","indexOf","maxIndex","arr_1","slice","value","includes","EVENTS","BRUSH_FILTER_EVENTS","__extends","_this","RangeFilter","dims","context","isStarted","startPoint","getCurrentPoint","currentPoint","maskShape","event","target","bbox","getCanvasBBox","x","y","maxX","maxY","abs","view","payload","emit","BEFORE_FILTER","fromData","coord","getCoordinate","normalCurrent","normalStart","hasDim","xScale","getXScale","filter","filterView","field","yScale","getYScales","reRender","source","FILTER","AFTER_FILTER","BEFORE_RESET","RESET","AFTER_RESET","render"],"sourceRoot":"","sources":["../../../../src/interaction/action/data/range-filter.ts"],"sourcesContent":["import { Point, Scale } from '../../../dependents';\nimport { FilterCondition, EventPayload } from '../../../interface';\nimport { View, Event } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util';\n\n// 获取对应的 scale\nfunction getFilter(scale: Scale, dim: string, point1: Point, point2: Point): FilterCondition {\n  let min = Math.min(point1[dim], point2[dim]);\n  let max = Math.max(point1[dim], point2[dim]);\n  const [rangeMin, rangeMax] = scale.range;\n  // 约束值在 scale 的 range 之间\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n  if (max > rangeMax) {\n    max = rangeMax;\n  }\n  // 范围大于整个 view 的范围，则返回 null\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n  const minValue = scale.invert(min);\n  const maxValue = scale.invert(max);\n  if (scale.isCategory) {\n    const minIndex = scale.values.indexOf(minValue);\n    const maxIndex = scale.values.indexOf(maxValue);\n    const arr = scale.values.slice(minIndex, maxIndex + 1);\n    return (value) => {\n      return arr.includes(value);\n    };\n  } else {\n    return (value) => {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n\n/** range-filter 只用于：brush-filter, brush-x-filter, brush-y-filter */\nenum EVENTS {\n  FILTER = 'brush-filter-processing',\n  RESET = 'brush-filter-reset',\n  BEFORE_FILTER = 'brush-filter:beforefilter',\n  AFTER_FILTER = 'brush-filter:afterfilter',\n  BEFORE_RESET = 'brush-filter:beforereset',\n  AFTER_RESET = 'brush-filter:afterreset',\n}\n\nexport { EVENTS as BRUSH_FILTER_EVENTS };\n\n/**\n * 范围过滤的 Action\n * @ignore\n */\nclass RangeFilter extends Action {\n  /** 允许外部传入 dims */\n  protected cfgFields: ['dims'];\n  /**\n   * 范围过滤生效的字段/维度，可以是 x, y\n   */\n  protected dims: string[] = ['x', 'y'];\n  /** 起始点 */\n  protected startPoint: Point = null;\n\n  private isStarted: boolean = false;\n\n  // x,y 是否生效\n  private hasDim(dim: string) {\n    return this.dims.includes(dim);\n  }\n\n  /**\n   * 开始范围过滤，记录范围过滤的起点\n   */\n  public start() {\n    const context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  }\n\n  /**\n   * 过滤，以开始的点和当前点对数据进行过滤\n   */\n  public filter() {\n    let startPoint;\n    let currentPoint;\n    if (isMask(this.context)) {\n      const maskShape = this.context.event.target;\n      const bbox = maskShape.getCanvasBBox();\n      startPoint = { x: bbox.x, y: bbox.y };\n      currentPoint = { x: bbox.maxX, y: bbox.maxY };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n    const { view, event } = this.context;\n    const payload = { view, event, dims: this.dims };\n    view.emit(EVENTS.BEFORE_FILTER, Event.fromData(view, EVENTS.BEFORE_FILTER, payload));\n\n    const coord = view.getCoordinate();\n    const normalCurrent = coord.invert(currentPoint);\n    const normalStart = coord.invert(startPoint);\n    // 设置 x 方向的 filter\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      const filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    }\n    // 设置 y 方向的 filter\n    if (this.hasDim('y')) {\n      const yScale = view.getYScales()[0];\n      const filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n    this.reRender(view, { source: EVENTS.FILTER });\n\n    view.emit(EVENTS.AFTER_FILTER, Event.fromData(view, EVENTS.AFTER_FILTER, payload));\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.isStarted = false;\n  }\n\n  /**\n   * 取消同当前 Action 相关的过滤，指定的 x,y\n   */\n  public reset() {\n    const view = this.context.view;\n    view.emit(EVENTS.BEFORE_RESET, Event.fromData(view, EVENTS.BEFORE_RESET, {}));\n\n    this.isStarted = false;\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      const yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n    this.reRender(view, { source: EVENTS.RESET });\n\n    view.emit(EVENTS.AFTER_RESET, Event.fromData(view, EVENTS.AFTER_RESET, {}));\n  }\n\n  /**\n   * 对 view 进行过滤\n   */\n  protected filterView(view: View, field: string, filter: FilterCondition) {\n    view.filter(field, filter);\n  }\n\n  /**\n   * 重新渲染\n   * @param view\n   */\n  protected reRender(view: View, payload?: EventPayload) {\n    view.render(true, payload);\n  }\n}\n\nexport default RangeFilter;\n"]},"metadata":{},"sourceType":"module"}