{"ast":null,"code":"import { clone, sortBy, valuesOfKey, getRange, each, hasKey, groupBy, isEmpty } from '@antv/util'; // 进行转换得到值所在的 range\n\nfunction getBinKey(value, binWidth, binNumber) {\n  // 做一点特殊处理\n  if (binNumber === 1) {\n    return [0, binWidth];\n  }\n\n  var index = Math.floor(value / binWidth);\n  return [binWidth * index, binWidth * (index + 1)];\n} // 默认 sturges 转换\n\n\nfunction sturges(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n/**\n * 对数据进行百分比化\n * @param data\n * @param binField\n * @param binWidth\n * @param binNumber\n * @param stackField\n */\n\n\nexport function binHistogram(data, binField, binWidth, binNumber, stackField) {\n  var originData_copy = clone(data); // 根据 binField 对源数据进行排序\n\n  sortBy(originData_copy, binField); // 获取源数据 binField 的 range\n\n  var values = valuesOfKey(originData_copy, binField);\n  var range = getRange(values);\n  var rangeWidth = range.max - range.min; // 计算分箱，直方图分箱的计算基于 binWidth，如配置了 binNumber 则将其转为 binWidth 进行计算\n\n  var _binWidth = binWidth;\n\n  if (!binWidth && binNumber) {\n    _binWidth = binNumber > 1 ? rangeWidth / (binNumber - 1) : range.max;\n  } // 当 binWidth 和 binNumber 都没有指定的情况，采用 Sturges formula 自动生成 binWidth\n\n\n  if (!binWidth && !binNumber) {\n    var _defaultBinNumber = sturges(values);\n\n    _binWidth = rangeWidth / _defaultBinNumber;\n  } // 构建 key - StatisticData 结构\n\n\n  var bins = {};\n  var groups = groupBy(originData_copy, stackField); // 判断分组是否为空，如果为空，说明没有 stackField 字段\n\n  if (isEmpty(groups)) {\n    each(originData_copy, function (data) {\n      var value = data[binField];\n      var bin = getBinKey(value, _binWidth, binNumber);\n      var binKey = bin[0] + \"-\" + bin[1];\n\n      if (!hasKey(bins, binKey)) {\n        bins[binKey] = {\n          range: bin,\n          count: 0\n        };\n      }\n\n      bins[binKey].count += 1;\n    });\n  } else {\n    Object.keys(groups).forEach(function (groupKey) {\n      each(groups[groupKey], function (data) {\n        var value = data[binField];\n        var bin = getBinKey(value, _binWidth, binNumber);\n        var binKey = bin[0] + \"-\" + bin[1];\n        var groupKeyBinKey = binKey + \"-\" + groupKey;\n\n        if (!hasKey(bins, groupKeyBinKey)) {\n          bins[groupKeyBinKey] = {\n            range: bin,\n            count: 0\n          };\n          bins[groupKeyBinKey][stackField] = groupKey;\n        }\n\n        bins[groupKeyBinKey].count += 1;\n      });\n    });\n  } // 将分箱数据转换为 plotData 才是图表所需要的\n\n\n  var plotData = [];\n  each(bins, function (bin) {\n    plotData.push(bin);\n  });\n  return plotData;\n}","map":{"version":3,"mappings":"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","names":["clone","sortBy","valuesOfKey","getRange","each","hasKey","groupBy","isEmpty","getBinKey","value","binWidth","binNumber","index","Math","floor","sturges","values","ceil","log","length","LN2","binHistogram","data","binField","stackField","originData_copy","range","rangeWidth","max","min","_binWidth","_defaultBinNumber","bins","groups","bin","binKey","count","Object","keys","forEach","groupKey","groupKeyBinKey","plotData","push"],"sourceRoot":"","sources":["../../../src/utils/transform/histogram.ts"],"sourcesContent":["import { clone, sortBy, valuesOfKey, getRange, each, hasKey, groupBy, isEmpty } from '@antv/util';\nimport { Data } from '../../types';\n\ntype StatisticData = {\n  range: Array<number>;\n  count: number;\n};\ntype StatisticBin = {\n  [key: string]: StatisticData;\n};\n\n// 进行转换得到值所在的 range\nfunction getBinKey(value: number, binWidth: number, binNumber?: number): [number, number] {\n  // 做一点特殊处理\n  if (binNumber === 1) {\n    return [0, binWidth];\n  }\n  const index = Math.floor(value / binWidth);\n  return [binWidth * index, binWidth * (index + 1)];\n}\n\n// 默认 sturges 转换\nfunction sturges(values: Array<number>): number {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n/**\n * 对数据进行百分比化\n * @param data\n * @param binField\n * @param binWidth\n * @param binNumber\n * @param stackField\n */\nexport function binHistogram(data: Data, binField: string, binWidth: number, binNumber?: number, stackField?: string) {\n  const originData_copy = clone(data);\n\n  // 根据 binField 对源数据进行排序\n  sortBy(originData_copy, binField);\n\n  // 获取源数据 binField 的 range\n  const values = valuesOfKey(originData_copy, binField);\n  const range = getRange(values);\n  const rangeWidth = range.max - range.min;\n\n  // 计算分箱，直方图分箱的计算基于 binWidth，如配置了 binNumber 则将其转为 binWidth 进行计算\n  let _binWidth = binWidth;\n  if (!binWidth && binNumber) {\n    _binWidth = binNumber > 1 ? rangeWidth / (binNumber - 1) : range.max;\n  }\n  // 当 binWidth 和 binNumber 都没有指定的情况，采用 Sturges formula 自动生成 binWidth\n  if (!binWidth && !binNumber) {\n    const _defaultBinNumber = sturges(values);\n    _binWidth = rangeWidth / _defaultBinNumber;\n  }\n  // 构建 key - StatisticData 结构\n  const bins: StatisticBin = {};\n  const groups = groupBy(originData_copy, stackField);\n  // 判断分组是否为空，如果为空，说明没有 stackField 字段\n  if (isEmpty(groups)) {\n    each(originData_copy, (data: any) => {\n      const value = data[binField];\n      const bin = getBinKey(value, _binWidth, binNumber);\n      const binKey = `${bin[0]}-${bin[1]}`;\n      if (!hasKey(bins, binKey)) {\n        bins[binKey] = { range: bin, count: 0 };\n      }\n      bins[binKey].count += 1;\n    });\n  } else {\n    Object.keys(groups).forEach((groupKey: string) => {\n      each(groups[groupKey], (data: any) => {\n        const value = data[binField];\n        const bin = getBinKey(value, _binWidth, binNumber);\n        const binKey = `${bin[0]}-${bin[1]}`;\n        const groupKeyBinKey = `${binKey}-${groupKey}`;\n        if (!hasKey(bins, groupKeyBinKey)) {\n          bins[groupKeyBinKey] = { range: bin, count: 0 };\n          bins[groupKeyBinKey][stackField] = groupKey;\n        }\n        bins[groupKeyBinKey].count += 1;\n      });\n    });\n  }\n  // 将分箱数据转换为 plotData 才是图表所需要的\n  const plotData: Array<StatisticData> = [];\n  each(bins, (bin: StatisticData) => {\n    plotData.push(bin);\n  });\n  return plotData;\n}\n"]},"metadata":{},"sourceType":"module"}