{"ast":null,"code":"/**\n * 获取分类字段 key 值 一个分类值的时候， 返回非索引 key 值，在 tooltip 不做索引区分\n * @param values 数据量\n * @param field 指标字段\n * @param index 索引\n * @returns string\n */\nfunction getSeriesFieldKey(values, field, index) {\n  return values.length > 1 ? field + \"_\" + index : \"\" + field;\n}\n/**\n * bullet 处理数据\n * @param options\n */\n\n\nexport function transformData(options) {\n  var data = options.data,\n      xField = options.xField,\n      measureField = options.measureField,\n      rangeField = options.rangeField,\n      targetField = options.targetField,\n      layout = options.layout;\n  var ds = [];\n  var scales = [];\n  data.forEach(function (item, index) {\n    // 构建 title * range\n    var rangeValues = [item[rangeField]].flat();\n    rangeValues.sort(function (a, b) {\n      return a - b;\n    });\n    rangeValues.forEach(function (d, i) {\n      var _a;\n\n      var range = i === 0 ? d : rangeValues[i] - rangeValues[i - 1];\n      ds.push((_a = {\n        rKey: rangeField + \"_\" + i\n      }, _a[xField] = xField ? item[xField] : String(index), _a[rangeField] = range, _a));\n    }); // 构建 title * measure\n\n    var measureValues = [item[measureField]].flat();\n    measureValues.forEach(function (d, i) {\n      var _a;\n\n      ds.push((_a = {\n        mKey: getSeriesFieldKey(measureValues, measureField, i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[measureField] = d, _a));\n    }); // 构建 title * target\n\n    var targetValues = [item[targetField]].flat();\n    targetValues.forEach(function (d, i) {\n      var _a;\n\n      ds.push((_a = {\n        tKey: getSeriesFieldKey(targetValues, targetField, i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[targetField] = d, _a));\n    }); // 为了取最大值和最小值，先存储\n\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  }); // scales 是嵌套的需要拍平\n\n  var min = Math.min.apply(Math, scales.flat(Infinity));\n  var max = Math.max.apply(Math, scales.flat(Infinity)); // min 大于 0 从 0 开始\n\n  min = min > 0 ? 0 : min; // 垂直情况，需要反转数据\n\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n\n  return {\n    min: min,\n    max: max,\n    ds: ds\n  };\n}","map":{"version":3,"mappings":"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","names":["getSeriesFieldKey","values","field","index","length","transformData","options","xField","measureField","rangeField","targetField","layout","ds","scales","data","forEach","item","rangeValues","flat","sort","a","b","d","i","range","push","_a","rKey","String","measureValues","mKey","targetValues","tKey","min","Math","apply","Infinity","max","reverse"],"sourceRoot":"","sources":["../../../src/plots/bullet/utils.ts"],"sourcesContent":["import { BulletOptions } from './types';\n\ntype TransformData = {\n  min: number;\n  max: number;\n  ds: any[];\n};\n\n/**\n * 获取分类字段 key 值 一个分类值的时候， 返回非索引 key 值，在 tooltip 不做索引区分\n * @param values 数据量\n * @param field 指标字段\n * @param index 索引\n * @returns string\n */\nfunction getSeriesFieldKey(values: number[], field: string, index: number): string {\n  return values.length > 1 ? `${field}_${index}` : `${field}`;\n}\n\n/**\n * bullet 处理数据\n * @param options\n */\nexport function transformData(options: BulletOptions): TransformData {\n  const { data, xField, measureField, rangeField, targetField, layout } = options;\n  const ds: any[] = [];\n  const scales: number[] = [];\n  data.forEach((item: any, index: number) => {\n    // 构建 title * range\n    const rangeValues = [item[rangeField]].flat();\n    rangeValues.sort((a: number, b: number) => a - b);\n    rangeValues.forEach((d: number, i: number) => {\n      const range = i === 0 ? d : rangeValues[i] - rangeValues[i - 1];\n      ds.push({\n        rKey: `${rangeField}_${i}`,\n        [xField]: xField ? item[xField] : String(index), // 没有xField就用索引\n        [rangeField]: range,\n      });\n    });\n\n    // 构建 title * measure\n    const measureValues = [item[measureField]].flat();\n    measureValues.forEach((d: number, i: number) => {\n      ds.push({\n        mKey: getSeriesFieldKey(measureValues, measureField, i),\n        [xField]: xField ? item[xField] : String(index),\n        [measureField]: d,\n      });\n    });\n\n    // 构建 title * target\n    const targetValues = [item[targetField]].flat();\n    targetValues.forEach((d: number, i: number) => {\n      ds.push({\n        tKey: getSeriesFieldKey(targetValues, targetField, i),\n        [xField]: xField ? item[xField] : String(index),\n        [targetField]: d,\n      });\n    });\n\n    // 为了取最大值和最小值，先存储\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  });\n  // scales 是嵌套的需要拍平\n  let min = Math.min(...scales.flat(Infinity));\n  const max = Math.max(...scales.flat(Infinity));\n  // min 大于 0 从 0 开始\n  min = min > 0 ? 0 : min;\n\n  // 垂直情况，需要反转数据\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n  return { min, max, ds };\n}\n"]},"metadata":{},"sourceType":"module"}