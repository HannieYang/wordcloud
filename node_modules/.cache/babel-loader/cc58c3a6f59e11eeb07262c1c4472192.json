{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isString, memoize, values, toString } from '@antv/util';\nimport { getCanvasContext } from './context';\n/**\n * 计算文本在画布中的宽度\n */\n\nexport var measureTextWidth = memoize(function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n\n  var fontSize = font.fontSize,\n      fontFamily = font.fontFamily,\n      fontWeight = font.fontWeight,\n      fontStyle = font.fontStyle,\n      fontVariant = font.fontVariant;\n  var ctx = getCanvasContext();\n  ctx.font = [fontStyle, fontVariant, fontWeight, \"\".concat(fontSize, \"px\"), fontFamily].join(' ');\n  return ctx.measureText(isString(text) ? text : '').width;\n}, function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n\n  return __spreadArray([text], __read(values(font)), false).join('');\n});\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\n\nexport var getEllipsisText = function (text, maxWidth, font) {\n  var STEP = 16; // 每次 16，调参工程师\n\n  var DOT_WIDTH = measureTextWidth('...', font);\n  var leftText;\n\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n\n  var currentText;\n  var currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  } // 首先通过 step 计算，找出最大的未超出长度的\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP); // 字符串整体没有超出\n\n    if (!leftText) {\n      return r.join('');\n    }\n  } // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return \"\".concat(r.join(''), \"...\");\n};","map":{"version":3,"mappings":"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","names":["isString","memoize","values","toString","getCanvasContext","measureTextWidth","text","font","fontFamily","fontWeight","fontStyle","fontVariant","ctx","fontSize","join","measureText","width","__read","getEllipsisText","maxWidth","STEP","DOT_WIDTH","leftText","leftWidth","r","currentText","currentWidth","substr","push"],"sourceRoot":"","sources":["../../src/util/text.ts"],"sourcesContent":["import { isString, memoize, values, toString } from '@antv/util';\nimport * as CSS from 'csstype';\nimport { getCanvasContext } from './context';\n\ntype FontFace = CSS.Properties;\n\ntype Font = Pick<FontFace, 'fontFamily' | 'fontWeight' | 'fontStyle' | 'fontVariant'> & {\n  fontSize?: number;\n};\n\n/**\n * 计算文本在画布中的宽度\n */\nexport const measureTextWidth = memoize(\n  (text: any, font: Font = {}): number => {\n    const { fontSize, fontFamily, fontWeight, fontStyle, fontVariant } = font;\n    const ctx = getCanvasContext();\n    ctx!.font = [fontStyle, fontVariant, fontWeight, `${fontSize}px`, fontFamily].join(' ');\n    return ctx!.measureText(isString(text) ? text : '').width;\n  },\n  (text: any, font: Font = {}) => [text, ...values(font)].join('')\n);\n\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\nexport const getEllipsisText = (text: any, maxWidth: number, font?: Font) => {\n  const STEP = 16; // 每次 16，调参工程师\n  const DOT_WIDTH = measureTextWidth('...', font);\n\n  let leftText;\n\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n\n  let leftWidth = maxWidth;\n\n  const r = []; // 最终的分段字符串\n  let currentText;\n  let currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  }\n\n  // 首先通过 step 计算，找出最大的未超出长度的\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP);\n\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText);\n\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP);\n\n    // 字符串整体没有超出\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1);\n\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return `${r.join('')}...`;\n};\n"]},"metadata":{},"sourceType":"module"}