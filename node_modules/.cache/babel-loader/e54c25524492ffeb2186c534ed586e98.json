{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\nimport ColorUtil from '@antv/color-util';\nimport { get, isNumber } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\n/**\n * 用于绘制热力图。\n */\n\nvar Heatmap =\n/** @class */\nfunction (_super) {\n  __extends(Heatmap, _super);\n\n  function Heatmap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'heatmap';\n    _this.paletteCache = {};\n    return _this;\n  }\n\n  Heatmap.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var range = this.prepareRange(mappingData);\n      var radius = this.prepareSize();\n      var blur_1 = get(this.styleOption, ['cfg', 'shadowBlur']);\n\n      if (!isNumber(blur_1)) {\n        blur_1 = radius / 2;\n      }\n\n      this.prepareGreyScaleBlurredCircle(radius, blur_1);\n      this.drawWithRange(mappingData, range, radius, blur_1);\n    }\n  };\n  /** 热力图暂时不支持 callback 回调（文档需要说明下） */\n\n\n  Heatmap.prototype.color = function (field, cfg) {\n    this.createAttrOption('color', field, typeof cfg !== 'function' ? cfg : '');\n    return this;\n  };\n  /**\n   * clear\n   */\n\n\n  Heatmap.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this.clearShadowCanvasCtx();\n    this.paletteCache = {};\n  };\n\n  Heatmap.prototype.prepareRange = function (data) {\n    var colorAttr = this.getAttribute('color');\n    var colorField = colorAttr.getFields()[0];\n    var min = Infinity;\n    var max = -Infinity;\n    data.forEach(function (row) {\n      var value = row[FIELD_ORIGIN][colorField];\n\n      if (value > max) {\n        max = value;\n      }\n\n      if (value < min) {\n        min = value;\n      }\n    });\n\n    if (min === max) {\n      min = max - 1;\n    }\n\n    return [min, max];\n  };\n\n  Heatmap.prototype.prepareSize = function () {\n    var radius = this.getDefaultValue('size');\n\n    if (!isNumber(radius)) {\n      radius = this.getDefaultSize();\n    }\n\n    return radius;\n  };\n\n  Heatmap.prototype.prepareGreyScaleBlurredCircle = function (radius, blur) {\n    var grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    var r2 = radius + blur;\n    var ctx = grayScaleBlurredCanvas.getContext('2d');\n    grayScaleBlurredCanvas.width = grayScaleBlurredCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, grayScaleBlurredCanvas.width, grayScaleBlurredCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, radius, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  };\n\n  Heatmap.prototype.drawWithRange = function (data, range, radius, blur) {\n    var e_1, _a; // canvas size\n\n\n    var _b = this.coordinate,\n        start = _b.start,\n        end = _b.end;\n    var width = this.coordinate.getWidth();\n    var height = this.coordinate.getHeight(); // value, range, etc\n\n    var colorAttr = this.getAttribute('color');\n    var valueField = colorAttr.getFields()[0]; // prepare shadow canvas context\n\n    this.clearShadowCanvasCtx();\n    var ctx = this.getShadowCanvasCtx(); // filter data\n\n    if (range) {\n      data = data.filter(function (row) {\n        return row[FIELD_ORIGIN][valueField] <= range[1] && row[FIELD_ORIGIN][valueField] >= range[0];\n      });\n    } // step1. draw points with shadow\n\n\n    var scale = this.scales[valueField];\n\n    try {\n      for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n        var obj = data_1_1.value;\n\n        var _c = this.getDrawCfg(obj),\n            x = _c.x,\n            y = _c.y;\n\n        var alpha = scale.scale(obj[FIELD_ORIGIN][valueField]);\n        this.drawGrayScaleBlurredCircle(x - start.x, y - end.y, radius + blur, alpha, ctx);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    } // step2. convert pixels\n\n\n    var colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    var imageShape = this.getImageShape();\n    imageShape.attr('x', start.x);\n    imageShape.attr('y', end.y);\n    imageShape.attr('width', width);\n    imageShape.attr('height', height);\n    imageShape.attr('img', ctx.canvas);\n    imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  };\n\n  Heatmap.prototype.getDefaultSize = function () {\n    var position = this.getAttribute('position');\n    var coordinate = this.coordinate;\n    return Math.min(coordinate.getWidth() / (position.scales[0].ticks.length * 4), coordinate.getHeight() / (position.scales[1].ticks.length * 4));\n  };\n\n  Heatmap.prototype.clearShadowCanvasCtx = function () {\n    var ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n\n  Heatmap.prototype.getShadowCanvasCtx = function () {\n    var canvas = this.shadowCanvas;\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    return canvas.getContext('2d');\n  };\n\n  Heatmap.prototype.getGrayScaleBlurredCanvas = function () {\n    if (!this.grayScaleBlurredCanvas) {\n      this.grayScaleBlurredCanvas = document.createElement('canvas');\n    }\n\n    return this.grayScaleBlurredCanvas;\n  };\n\n  Heatmap.prototype.drawGrayScaleBlurredCircle = function (x, y, r, alpha, ctx) {\n    var grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(grayScaleBlurredCanvas, x - r, y - r);\n  };\n\n  Heatmap.prototype.colorize = function (img) {\n    var colorAttr = this.getAttribute('color');\n    var pixels = img.data;\n    var paletteCache = this.paletteCache;\n\n    for (var i = 3; i < pixels.length; i += 4) {\n      var alpha = pixels[i]; // get gradient color from opacity value\n\n      if (isNumber(alpha)) {\n        var palette = paletteCache[alpha] ? paletteCache[alpha] : ColorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  };\n\n  Heatmap.prototype.getImageShape = function () {\n    var imageShape = this.imageShape;\n\n    if (imageShape) {\n      return imageShape;\n    }\n\n    var container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {}\n    });\n    this.imageShape = imageShape;\n    return imageShape;\n  };\n\n  Heatmap.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    var data = mappingData.map(function (obj) {\n      return obj[FIELD_ORIGIN];\n    });\n    return __assign(__assign({}, shapeCfg), {\n      mappingData: mappingData,\n      data: data\n    });\n  };\n\n  return Heatmap;\n}(Geometry);\n\nexport default Heatmap;","map":{"version":3,"mappings":";AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,YAA9B;AACA,SAASC,YAAT,QAA6B,aAA7B;AAGA,OAAOC,QAAP,MAAqB,QAArB;AAEA;;;;AAGA;AAAA;AAAA;EAAqCC;;EAArC;IAAA;;IACkBC,aAAe,SAAf;IAERA,qBAAuC,EAAvC;;EAiNT;;EA5MWC,mCAAV,UAAyBC,gBAAzB,EAA6DC,QAA7D,EAAsF;IAAzB;MAAAA;IAAyB;;IACpF,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAAgB,CAACG,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;MAChD,IAAME,WAAW,GAAGJ,gBAAgB,CAACE,CAAD,CAApC;MACA,IAAMG,KAAK,GAAG,KAAKC,YAAL,CAAkBF,WAAlB,CAAd;MACA,IAAMG,MAAM,GAAG,KAAKC,WAAL,EAAf;MAEA,IAAIC,MAAI,GAAGhB,GAAG,CAAC,KAAKiB,WAAN,EAAmB,CAAC,KAAD,EAAQ,YAAR,CAAnB,CAAd;;MACA,IAAI,CAAChB,QAAQ,CAACe,MAAD,CAAb,EAAqB;QACnBA,MAAI,GAAGF,MAAM,GAAG,CAAhB;MACD;;MAED,KAAKI,6BAAL,CAAmCJ,MAAnC,EAA2CE,MAA3C;MACA,KAAKG,aAAL,CAAmBR,WAAnB,EAAgCC,KAAhC,EAAuCE,MAAvC,EAA+CE,MAA/C;IACD;EACF,CAdS;EAgBV;;;EACOV,0BAAP,UAAac,KAAb,EAA8CC,GAA9C,EAAyF;IACvF,KAAKC,gBAAL,CAAsB,OAAtB,EAA+BF,KAA/B,EAAsC,OAAOC,GAAP,KAAe,UAAf,GAA4BA,GAA5B,GAAkC,EAAxE;IAEA,OAAO,IAAP;EACD,CAJM;EAMP;;;;;EAGOf,0BAAP;IACEiB,iBAAMC,KAAN,CAAWC,IAAX,CAAW,IAAX;;IACA,KAAKC,oBAAL;IACA,KAAKC,YAAL,GAAoB,EAApB;EACD,CAJM;;EAMCrB,iCAAR,UAAqBsB,IAArB,EAAyC;IACvC,IAAMC,SAAS,GAAG,KAAKC,YAAL,CAAkB,OAAlB,CAAlB;IACA,IAAMC,UAAU,GAAGF,SAAS,CAACG,SAAV,GAAsB,CAAtB,CAAnB;IAEA,IAAIC,GAAG,GAAGC,QAAV;IACA,IAAIC,GAAG,GAAG,CAACD,QAAX;IACAN,IAAI,CAACQ,OAAL,CAAa,UAACC,GAAD,EAAI;MACf,IAAMC,KAAK,GAAGD,GAAG,CAACnC,YAAD,CAAH,CAAkB6B,UAAlB,CAAd;;MACA,IAAIO,KAAK,GAAGH,GAAZ,EAAiB;QACfA,GAAG,GAAGG,KAAN;MACD;;MACD,IAAIA,KAAK,GAAGL,GAAZ,EAAiB;QACfA,GAAG,GAAGK,KAAN;MACD;IACF,CARD;;IAUA,IAAIL,GAAG,KAAKE,GAAZ,EAAiB;MACfF,GAAG,GAAGE,GAAG,GAAG,CAAZ;IACD;;IAED,OAAO,CAACF,GAAD,EAAME,GAAN,CAAP;EACD,CArBO;;EAuBA7B,gCAAR;IACE,IAAIQ,MAAM,GAAG,KAAKyB,eAAL,CAAqB,MAArB,CAAb;;IACA,IAAI,CAACtC,QAAQ,CAACa,MAAD,CAAb,EAAuB;MACrBA,MAAM,GAAG,KAAK0B,cAAL,EAAT;IACD;;IAED,OAAO1B,MAAP;EACD,CAPO;;EASAR,kDAAR,UAAsCQ,MAAtC,EAAsD2B,IAAtD,EAAkE;IAChE,IAAMC,sBAAsB,GAAG,KAAKC,yBAAL,EAA/B;IACA,IAAMC,EAAE,GAAG9B,MAAM,GAAG2B,IAApB;IACA,IAAMI,GAAG,GAAGH,sBAAsB,CAACI,UAAvB,CAAkC,IAAlC,CAAZ;IACAJ,sBAAsB,CAACK,KAAvB,GAA+BL,sBAAsB,CAACM,MAAvB,GAAgCJ,EAAE,GAAG,CAApE;IACAC,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBP,sBAAsB,CAACK,KAA3C,EAAkDL,sBAAsB,CAACM,MAAzE;IACAH,GAAG,CAACK,aAAJ,GAAoBL,GAAG,CAACM,aAAJ,GAAoBP,EAAE,GAAG,CAA7C;IACAC,GAAG,CAACO,UAAJ,GAAiBX,IAAjB;IACAI,GAAG,CAACQ,WAAJ,GAAkB,OAAlB;IAEAR,GAAG,CAACS,SAAJ;IACAT,GAAG,CAACU,GAAJ,CAAQ,CAACX,EAAT,EAAa,CAACA,EAAd,EAAkB9B,MAAlB,EAA0B,CAA1B,EAA6B0C,IAAI,CAACC,EAAL,GAAU,CAAvC,EAA0C,IAA1C;IACAZ,GAAG,CAACa,SAAJ;IACAb,GAAG,CAACc,IAAJ;EACD,CAdO;;EAgBArD,kCAAR,UAAsBsB,IAAtB,EAA4ChB,KAA5C,EAA6DE,MAA7D,EAA6E2B,IAA7E,EAAyF;gBAAA,CACvF;;;IACM,SAAiB,KAAKmB,UAAtB;IAAA,IAAEC,KAAK,WAAP;IAAA,IAASC,GAAG,SAAZ;IACN,IAAMf,KAAK,GAAG,KAAKa,UAAL,CAAgBG,QAAhB,EAAd;IACA,IAAMf,MAAM,GAAG,KAAKY,UAAL,CAAgBI,SAAhB,EAAf,CAJuF,CAMvF;;IACA,IAAMnC,SAAS,GAAG,KAAKC,YAAL,CAAkB,OAAlB,CAAlB;IACA,IAAMmC,UAAU,GAAGpC,SAAS,CAACG,SAAV,GAAsB,CAAtB,CAAnB,CARuF,CAUvF;;IACA,KAAKN,oBAAL;IACA,IAAMmB,GAAG,GAAG,KAAKqB,kBAAL,EAAZ,CAZuF,CAavF;;IACA,IAAItD,KAAJ,EAAW;MACTgB,IAAI,GAAGA,IAAI,CAACuC,MAAL,CAAY,UAAC9B,GAAD,EAAI;QACrB,OAAOA,GAAG,CAACnC,YAAD,CAAH,CAAkB+D,UAAlB,KAAiCrD,KAAK,CAAC,CAAD,CAAtC,IAA6CyB,GAAG,CAACnC,YAAD,CAAH,CAAkB+D,UAAlB,KAAiCrD,KAAK,CAAC,CAAD,CAA1F;MACD,CAFM,CAAP;IAGD,CAlBsF,CAoBvF;;;IACA,IAAMwD,KAAK,GAAG,KAAKC,MAAL,CAAYJ,UAAZ,CAAd;;;MACA,KAAkB,6BAAIK,wBAAtB,EAAsB,cAAtB,EAAsBA,wBAAtB,EAAwB;QAAnB,IAAMC,GAAG,iBAAT;;QACG,SAAW,KAAKC,UAAL,CAAgBD,GAAhB,CAAX;QAAA,IAAEE,CAAC,OAAH;QAAA,IAAKC,CAAC,OAAN;;QACN,IAAMC,KAAK,GAAGP,KAAK,CAACA,KAAN,CAAYG,GAAG,CAACrE,YAAD,CAAH,CAAkB+D,UAAlB,CAAZ,CAAd;QACA,KAAKW,0BAAL,CAAiCH,CAAY,GAAGZ,KAAK,CAACY,CAAtD,EAA0DC,CAAY,GAAGZ,GAAG,CAACY,CAA7E,EAAgF5D,MAAM,GAAG2B,IAAzF,EAA+FkC,KAA/F,EAAsG9B,GAAtG;MACD;;;;;;;;;;;KA1BsF,CA4BvF;;;IACA,IAAMgC,OAAO,GAAGhC,GAAG,CAACiC,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB/B,KAAvB,EAA8BC,MAA9B,CAAhB;IACA,KAAKtB,oBAAL;IACA,KAAKqD,QAAL,CAAcF,OAAd;IACAhC,GAAG,CAACmC,YAAJ,CAAiBH,OAAjB,EAA0B,CAA1B,EAA6B,CAA7B;IACA,IAAMI,UAAU,GAAG,KAAKC,aAAL,EAAnB;IACAD,UAAU,CAACE,IAAX,CAAgB,GAAhB,EAAqBtB,KAAK,CAACY,CAA3B;IACAQ,UAAU,CAACE,IAAX,CAAgB,GAAhB,EAAqBrB,GAAG,CAACY,CAAzB;IACAO,UAAU,CAACE,IAAX,CAAgB,OAAhB,EAAyBpC,KAAzB;IACAkC,UAAU,CAACE,IAAX,CAAgB,QAAhB,EAA0BnC,MAA1B;IACAiC,UAAU,CAACE,IAAX,CAAgB,KAAhB,EAAuBtC,GAAG,CAACuC,MAA3B;IACAH,UAAU,CAACI,GAAX,CAAe,QAAf,EAAyB,KAAKC,YAAL,CAAkB1D,IAAlB,CAAzB,EAvCuF,CAuCpC;EACpD,CAxCO;;EA0CAtB,mCAAR;IACE,IAAMiF,QAAQ,GAAG,KAAKzD,YAAL,CAAkB,UAAlB,CAAjB;IACA,IAAM8B,UAAU,GAAG,KAAKA,UAAxB;IACA,OAAOJ,IAAI,CAACvB,GAAL,CACL2B,UAAU,CAACG,QAAX,MAAyBwB,QAAQ,CAAClB,MAAT,CAAgB,CAAhB,EAAmBmB,KAAnB,CAAyB9E,MAAzB,GAAkC,CAA3D,CADK,EAELkD,UAAU,CAACI,SAAX,MAA0BuB,QAAQ,CAAClB,MAAT,CAAgB,CAAhB,EAAmBmB,KAAnB,CAAyB9E,MAAzB,GAAkC,CAA5D,CAFK,CAAP;EAID,CAPO;;EASAJ,yCAAR;IACE,IAAMuC,GAAG,GAAG,KAAKqB,kBAAL,EAAZ;IACArB,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBJ,GAAG,CAACuC,MAAJ,CAAWrC,KAA/B,EAAsCF,GAAG,CAACuC,MAAJ,CAAWpC,MAAjD;EACD,CAHO;;EAKA1C,uCAAR;IACE,IAAI8E,MAAM,GAAG,KAAKK,YAAlB;;IACA,IAAI,CAACL,MAAL,EAAa;MACXA,MAAM,GAAGM,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAT;MACA,KAAKF,YAAL,GAAoBL,MAApB;IACD;;IACDA,MAAM,CAACrC,KAAP,GAAe,KAAKa,UAAL,CAAgBG,QAAhB,EAAf;IACAqB,MAAM,CAACpC,MAAP,GAAgB,KAAKY,UAAL,CAAgBI,SAAhB,EAAhB;IACA,OAAOoB,MAAM,CAACtC,UAAP,CAAkB,IAAlB,CAAP;EACD,CATO;;EAWAxC,8CAAR;IACE,IAAI,CAAC,KAAKoC,sBAAV,EAAkC;MAChC,KAAKA,sBAAL,GAA8BgD,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA9B;IACD;;IAED,OAAO,KAAKjD,sBAAZ;EACD,CANO;;EAQApC,+CAAR,UAAmCmE,CAAnC,EAA8CC,CAA9C,EAAyDkB,CAAzD,EAAoEjB,KAApE,EAAmF9B,GAAnF,EAAgH;IAC9G,IAAMH,sBAAsB,GAAG,KAAKC,yBAAL,EAA/B;IACAE,GAAG,CAACgD,WAAJ,GAAkBlB,KAAlB;IACA9B,GAAG,CAACiD,SAAJ,CAAcpD,sBAAd,EAAsC+B,CAAC,GAAGmB,CAA1C,EAA6ClB,CAAC,GAAGkB,CAAjD;EACD,CAJO;;EAMAtF,6BAAR,UAAiByF,GAAjB,EAA+B;IAC7B,IAAMlE,SAAS,GAAG,KAAKC,YAAL,CAAkB,OAAlB,CAAlB;IACA,IAAMkE,MAAM,GAAGD,GAAG,CAACnE,IAAnB;IACA,IAAMD,YAAY,GAAG,KAAKA,YAA1B;;IACA,KAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuF,MAAM,CAACtF,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;MACzC,IAAMkE,KAAK,GAAGqB,MAAM,CAACvF,CAAD,CAApB,CADyC,CAChB;;MACzB,IAAIR,QAAQ,CAAC0E,KAAD,CAAZ,EAAqB;QACnB,IAAMsB,OAAO,GAAGtE,YAAY,CAACgD,KAAD,CAAZ,GAAsBhD,YAAY,CAACgD,KAAD,CAAlC,GAA4C5E,SAAS,CAACmG,OAAV,CAAkBrE,SAAS,CAACsE,QAAV,CAAmBxB,KAAK,GAAG,GAA3B,CAAlB,CAA5D;QACAqB,MAAM,CAACvF,CAAC,GAAG,CAAL,CAAN,GAAgBwF,OAAO,CAAC,CAAD,CAAvB;QACAD,MAAM,CAACvF,CAAC,GAAG,CAAL,CAAN,GAAgBwF,OAAO,CAAC,CAAD,CAAvB;QACAD,MAAM,CAACvF,CAAC,GAAG,CAAL,CAAN,GAAgBwF,OAAO,CAAC,CAAD,CAAvB;QACAD,MAAM,CAACvF,CAAD,CAAN,GAAYkE,KAAZ;MACD;IACF;EACF,CAdO;;EAgBArE,kCAAR;IACE,IAAI2E,UAAU,GAAG,KAAKA,UAAtB;;IACA,IAAIA,UAAJ,EAAgB;MACd,OAAOA,UAAP;IACD;;IACD,IAAMmB,SAAS,GAAG,KAAKA,SAAvB;IACAnB,UAAU,GAAGmB,SAAS,CAACC,QAAV,CAAmB;MAC9BC,IAAI,EAAE,OADwB;MAE9BC,KAAK,EAAE;IAFuB,CAAnB,CAAb;IAIA,KAAKtB,UAAL,GAAkBA,UAAlB;IACA,OAAOA,UAAP;EACD,CAZO;;EAcA3E,iCAAR,UAAqBK,WAArB,EAAgD;IAC9C,IAAM6F,QAAQ,GAAG,KAAKhC,UAAL,CAAgB7D,WAAW,CAAC,CAAD,CAA3B,CAAjB;IAEA,IAAMiB,IAAI,GAAGjB,WAAW,CAAC8F,GAAZ,CAAgB,UAAClC,GAAD,EAAW;MACtC,OAAOA,GAAG,CAACrE,YAAD,CAAV;IACD,CAFY,CAAb;IAIA,6BACKsG,QADL,GACa;MACX7F,WAAW,aADA;MAEXiB,IAAI;IAFO,CADb;EAKD,CAZO;;EAaV;AAAC,CApND,CAAqCzB,QAArC","names":["ColorUtil","get","isNumber","FIELD_ORIGIN","Geometry","__extends","_this","Heatmap","mappingDataArray","isUpdate","i","length","mappingData","range","prepareRange","radius","prepareSize","blur_1","styleOption","prepareGreyScaleBlurredCircle","drawWithRange","field","cfg","createAttrOption","_super","clear","call","clearShadowCanvasCtx","paletteCache","data","colorAttr","getAttribute","colorField","getFields","min","Infinity","max","forEach","row","value","getDefaultValue","getDefaultSize","blur","grayScaleBlurredCanvas","getGrayScaleBlurredCanvas","r2","ctx","getContext","width","height","clearRect","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","beginPath","arc","Math","PI","closePath","fill","coordinate","start","end","getWidth","getHeight","valueField","getShadowCanvasCtx","filter","scale","scales","data_1_1","obj","getDrawCfg","x","y","alpha","drawGrayScaleBlurredCircle","colored","getImageData","colorize","putImageData","imageShape","getImageShape","attr","canvas","set","getShapeInfo","position","ticks","shadowCanvas","document","createElement","r","globalAlpha","drawImage","img","pixels","palette","rgb2arr","gradient","container","addShape","type","attrs","shapeCfg","map"],"sourceRoot":"","sources":["../../src/geometry/heatmap.ts"],"sourcesContent":["import ColorUtil from '@antv/color-util';\nimport { get, isNumber } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport { Color, IShape } from '../dependents';\nimport { Data, Datum, MappingDatum, ShapeInfo, AttributeOption, ColorAttrCallback } from '../interface';\nimport Geometry from './base';\n\n/**\n * 用于绘制热力图。\n */\nexport default class Heatmap extends Geometry {\n  public readonly type: string = 'heatmap';\n\n  private paletteCache: Record<number, number> = {};\n  private grayScaleBlurredCanvas: HTMLCanvasElement;\n  private shadowCanvas: HTMLCanvasElement;\n  private imageShape: IShape;\n\n  protected updateElements(mappingDataArray: MappingDatum[][], isUpdate: boolean = false) {\n    for (let i = 0; i < mappingDataArray.length; i++) {\n      const mappingData = mappingDataArray[i];\n      const range = this.prepareRange(mappingData);\n      const radius = this.prepareSize();\n\n      let blur = get(this.styleOption, ['cfg', 'shadowBlur']);\n      if (!isNumber(blur)) {\n        blur = radius / 2;\n      }\n\n      this.prepareGreyScaleBlurredCircle(radius, blur);\n      this.drawWithRange(mappingData, range, radius, blur);\n    }\n  }\n\n  /** 热力图暂时不支持 callback 回调（文档需要说明下） */\n  public color(field: AttributeOption | string, cfg?: string | string[] | ColorAttrCallback): Geometry {\n    this.createAttrOption('color', field, typeof cfg !== 'function' ? cfg : '');\n\n    return this;\n  }\n\n  /**\n   * clear\n   */\n  public clear() {\n    super.clear();\n    this.clearShadowCanvasCtx();\n    this.paletteCache = {};\n  }\n\n  private prepareRange(data: MappingDatum[]) {\n    const colorAttr = this.getAttribute('color');\n    const colorField = colorAttr.getFields()[0];\n\n    let min = Infinity;\n    let max = -Infinity;\n    data.forEach((row) => {\n      const value = row[FIELD_ORIGIN][colorField];\n      if (value > max) {\n        max = value;\n      }\n      if (value < min) {\n        min = value;\n      }\n    });\n\n    if (min === max) {\n      min = max - 1;\n    }\n\n    return [min, max];\n  }\n\n  private prepareSize() {\n    let radius = this.getDefaultValue('size');\n    if (!isNumber(radius)) {\n      radius = this.getDefaultSize();\n    }\n\n    return radius;\n  }\n\n  private prepareGreyScaleBlurredCircle(radius: number, blur: number) {\n    const grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    const r2 = radius + blur;\n    const ctx = grayScaleBlurredCanvas.getContext('2d');\n    grayScaleBlurredCanvas.width = grayScaleBlurredCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, grayScaleBlurredCanvas.width, grayScaleBlurredCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, radius, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  private drawWithRange(data: MappingDatum[], range: number[], radius: number, blur: number) {\n    // canvas size\n    const { start, end } = this.coordinate;\n    const width = this.coordinate.getWidth();\n    const height = this.coordinate.getHeight();\n\n    // value, range, etc\n    const colorAttr = this.getAttribute('color');\n    const valueField = colorAttr.getFields()[0];\n\n    // prepare shadow canvas context\n    this.clearShadowCanvasCtx();\n    const ctx = this.getShadowCanvasCtx();\n    // filter data\n    if (range) {\n      data = data.filter((row) => {\n        return row[FIELD_ORIGIN][valueField] <= range[1] && row[FIELD_ORIGIN][valueField] >= range[0];\n      });\n    }\n\n    // step1. draw points with shadow\n    const scale = this.scales[valueField];\n    for (const obj of data) {\n      const { x, y } = this.getDrawCfg(obj);\n      const alpha = scale.scale(obj[FIELD_ORIGIN][valueField]);\n      this.drawGrayScaleBlurredCircle((x as number) - start.x, (y as number) - end.y, radius + blur, alpha, ctx);\n    }\n\n    // step2. convert pixels\n    const colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    const imageShape = this.getImageShape();\n    imageShape.attr('x', start.x);\n    imageShape.attr('y', end.y);\n    imageShape.attr('width', width);\n    imageShape.attr('height', height);\n    imageShape.attr('img', ctx.canvas);\n    imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  }\n\n  private getDefaultSize() {\n    const position = this.getAttribute('position');\n    const coordinate = this.coordinate;\n    return Math.min(\n      coordinate.getWidth() / (position.scales[0].ticks.length * 4),\n      coordinate.getHeight() / (position.scales[1].ticks.length * 4)\n    );\n  }\n\n  private clearShadowCanvasCtx() {\n    const ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n\n  private getShadowCanvasCtx() {\n    let canvas = this.shadowCanvas;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    return canvas.getContext('2d');\n  }\n\n  private getGrayScaleBlurredCanvas() {\n    if (!this.grayScaleBlurredCanvas) {\n      this.grayScaleBlurredCanvas = document.createElement('canvas');\n    }\n\n    return this.grayScaleBlurredCanvas;\n  }\n\n  private drawGrayScaleBlurredCircle(x: number, y: number, r: number, alpha: number, ctx: CanvasRenderingContext2D) {\n    const grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(grayScaleBlurredCanvas, x - r, y - r);\n  }\n\n  private colorize(img: ImageData) {\n    const colorAttr = this.getAttribute('color') as Color;\n    const pixels = img.data;\n    const paletteCache = this.paletteCache;\n    for (let i = 3; i < pixels.length; i += 4) {\n      const alpha = pixels[i]; // get gradient color from opacity value\n      if (isNumber(alpha)) {\n        const palette = paletteCache[alpha] ? paletteCache[alpha] : ColorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  }\n\n  private getImageShape() {\n    let imageShape = this.imageShape;\n    if (imageShape) {\n      return imageShape;\n    }\n    const container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {},\n    });\n    this.imageShape = imageShape;\n    return imageShape;\n  }\n\n  private getShapeInfo(mappingData: MappingDatum[]): ShapeInfo {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n\n    const data = mappingData.map((obj: Datum) => {\n      return obj[FIELD_ORIGIN];\n    });\n\n    return {\n      ...shapeCfg,\n      mappingData,\n      data,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}