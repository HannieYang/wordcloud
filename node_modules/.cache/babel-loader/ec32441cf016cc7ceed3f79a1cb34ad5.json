{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { groupBy, keys, map } from '@antv/util';\nimport { findLabelTextShape } from '../../util';\n/**\n * 对同一组(相同 xField )的 Label 进行排序：第一个、最后一个、其他...\n * @param geometry\n * @param labels\n */\n\nfunction sortLabels(geometry, labels) {\n  var yField = geometry.getXYFields()[1];\n  var result = [];\n  var sortedLabels = labels.sort(function (left, right) {\n    return left.get('data')[yField] - left.get('data')[yField];\n  });\n\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.shift());\n  }\n\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.pop());\n  }\n\n  result.push.apply(result, __spreadArray([], __read(sortedLabels), false));\n  return result;\n}\n\nfunction hasSome(dones, current, compare) {\n  return dones.some(function (done) {\n    return compare(done, current);\n  });\n}\n/**\n * 计算两个矩形之间的堆叠区域面积\n */\n\n\nfunction getOverlapArea(a, b, margin) {\n  if (margin === void 0) {\n    margin = 0;\n  }\n\n  var xOverlap = Math.max(0, Math.min(a.x + a.width + margin, b.x + b.width + margin) - Math.max(a.x - margin, b.x - margin));\n  var yOverlap = Math.max(0, Math.min(a.y + a.height + margin, b.y + b.height + margin) - Math.max(a.y - margin, b.y - margin));\n  return xOverlap * yOverlap;\n}\n/**\n * 判断新添加的 Label 是否和已存在的发生重叠\n * @param dones\n * @param current\n */\n\n\nfunction checkShapeOverlap(dones, current) {\n  return hasSome(dones, current, function (left, right) {\n    var leftText = findLabelTextShape(left);\n    var rightText = findLabelTextShape(right);\n    return getOverlapArea(leftText.getCanvasBBox(), rightText.getCanvasBBox(), 2) > 0;\n  });\n}\n/**\n * 适用于 point geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n * @param region\n * @param cfg\n */\n\n\nexport function pathAdjustPosition(items, labels, shapes, region, cfg) {\n  var _a, _b;\n\n  if (shapes.length === 0) {\n    return;\n  }\n\n  var element = (_a = shapes[0]) === null || _a === void 0 ? void 0 : _a.get('element');\n  var geometry = element === null || element === void 0 ? void 0 : element.geometry;\n\n  if (!geometry || ['path', 'line', 'area'].indexOf(geometry.type) < 0) {\n    return;\n  }\n\n  var _c = __read(geometry.getXYFields(), 2),\n      xField = _c[0],\n      yField = _c[1];\n\n  var groupedLabels = groupBy(labels, function (label) {\n    return label.get('data')[xField];\n  });\n  var dones = [];\n  var offset = cfg && cfg.offset || ((_b = items[0]) === null || _b === void 0 ? void 0 : _b.offset) || 12;\n  map(keys(groupedLabels).reverse(), function (xValue) {\n    var sortedCollections = sortLabels(geometry, groupedLabels[xValue]);\n\n    while (sortedCollections.length) {\n      var current = sortedCollections.shift();\n      var textShape = findLabelTextShape(current);\n\n      if (hasSome(dones, current, function (left, right) {\n        return left.get('data')[xField] === right.get('data')[xField] && left.get('data')[yField] === right.get('data')[yField];\n      })) {\n        // 重复位置，直接隐藏\n        textShape.set('visible', false);\n        continue;\n      }\n\n      var upFail = checkShapeOverlap(dones, current);\n      var downFail = false;\n\n      if (upFail) {\n        textShape.attr('y', textShape.attr('y') + 2 * offset);\n        downFail = checkShapeOverlap(dones, current);\n      }\n\n      if (downFail) {\n        textShape.set('visible', false);\n        continue;\n      }\n\n      dones.push(current);\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["groupBy","keys","map","findLabelTextShape","sortLabels","geometry","labels","yField","getXYFields","result","sortedLabels","sort","left","right","get","length","push","shift","pop","apply","__spreadArray","hasSome","dones","current","compare","some","done","getOverlapArea","a","b","margin","xOverlap","Math","max","min","x","width","yOverlap","y","height","checkShapeOverlap","leftText","rightText","getCanvasBBox","pathAdjustPosition","items","shapes","region","cfg","element","_a","indexOf","type","xField","groupedLabels","label","offset","_b","reverse","xValue","sortedCollections","textShape","set","upFail","downFail","attr"],"sourceRoot":"","sources":["../../../../../src/geometry/label/layout/path/adjust-position.ts"],"sourcesContent":["import { groupBy, keys, map } from '@antv/util';\nimport { IGroup, IShape, BBox } from '../../../../dependents';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { findLabelTextShape } from '../../util';\n\n/**\n * point-adjust-position layout 的配置类型\n */\nexport interface PointAdjustPositionLayoutCfg {\n  offset?: number;\n}\n\n/**\n * 对同一组(相同 xField )的 Label 进行排序：第一个、最后一个、其他...\n * @param geometry\n * @param labels\n */\nfunction sortLabels(geometry: Geometry, labels: IGroup[]) {\n  const yField = geometry.getXYFields()[1];\n  const result: IGroup[] = [];\n  const sortedLabels = labels.sort((left, right) => left.get('data')[yField] - left.get('data')[yField]);\n\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.shift());\n  }\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.pop());\n  }\n  result.push(...sortedLabels);\n\n  return result;\n}\n\nfunction hasSome(dones: IGroup[], current: IGroup, compare: (left: IGroup, right: IGroup) => boolean): boolean {\n  return dones.some((done) => compare(done, current));\n}\n\n/**\n * 计算两个矩形之间的堆叠区域面积\n */\nfunction getOverlapArea(a: BBox, b: BBox, margin = 0) {\n  const xOverlap = Math.max(\n    0,\n    Math.min(a.x + a.width + margin, b.x + b.width + margin) - Math.max(a.x - margin, b.x - margin)\n  );\n  const yOverlap = Math.max(\n    0,\n    Math.min(a.y + a.height + margin, b.y + b.height + margin) - Math.max(a.y - margin, b.y - margin)\n  );\n\n  return xOverlap * yOverlap;\n}\n\n/**\n * 判断新添加的 Label 是否和已存在的发生重叠\n * @param dones\n * @param current\n */\nfunction checkShapeOverlap(dones: IGroup[], current: IGroup): boolean {\n  return hasSome(dones, current, (left, right) => {\n    const leftText = findLabelTextShape(left);\n    const rightText = findLabelTextShape(right);\n\n    return getOverlapArea(leftText.getCanvasBBox(), rightText.getCanvasBBox(), 2) > 0;\n  });\n}\n/**\n * 适用于 point geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n * @param region\n * @param cfg\n */\nexport function pathAdjustPosition(\n  items: LabelItem[],\n  labels: IGroup[],\n  shapes: IShape[] | IGroup[],\n  region: BBox,\n  cfg: PointAdjustPositionLayoutCfg\n): void {\n  if (shapes.length === 0) {\n    return;\n  }\n\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || ['path', 'line', 'area'].indexOf(geometry.type) < 0) {\n    return;\n  }\n  const [xField, yField] = geometry.getXYFields();\n  const groupedLabels = groupBy(labels, (label) => label.get('data')[xField]);\n  const dones: IGroup[] = [];\n  const offset = (cfg && cfg.offset) || items[0]?.offset || 12;\n\n  map(keys(groupedLabels).reverse(), (xValue) => {\n    const sortedCollections = sortLabels(geometry, groupedLabels[xValue]);\n    while (sortedCollections.length) {\n      const current = sortedCollections.shift();\n      const textShape = findLabelTextShape(current);\n      if (\n        hasSome(\n          dones,\n          current,\n          (left, right) =>\n            left.get('data')[xField] === right.get('data')[xField] &&\n            left.get('data')[yField] === right.get('data')[yField]\n        )\n      ) {\n        // 重复位置，直接隐藏\n        textShape.set('visible', false);\n        continue;\n      }\n      const upFail = checkShapeOverlap(dones, current);\n      let downFail: boolean = false;\n      if (upFail) {\n        textShape.attr('y', textShape.attr('y') + 2 * offset);\n        downFail = checkShapeOverlap(dones, current);\n      }\n      if (downFail) {\n        textShape.set('visible', false);\n        continue;\n      }\n      dones.push(current);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}