{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __assign, __read, __spreadArray } from \"tslib\";\nimport { each, isNil, some } from '@antv/util';\nimport { getCoordinate } from '../../dependents';\n/**\n * coordinate controller，职责：\n * 1. 创建实例\n * 2. 暂存配置\n */\n\nvar CoordinateController =\n/** @class */\nfunction () {\n  function CoordinateController(option) {\n    // 设置默认值，并存储配置\n    this.option = this.wrapperOption(option);\n  }\n  /**\n   * 更新配置\n   * @param option\n   */\n\n\n  CoordinateController.prototype.update = function (option) {\n    this.option = this.wrapperOption(option);\n    return this;\n  };\n  /**\n   * 是否存在某一个 action\n   * @param actionName\n   */\n\n\n  CoordinateController.prototype.hasAction = function (actionName) {\n    var actions = this.option.actions;\n    return some(actions, function (action) {\n      return action[0] === actionName;\n    });\n  };\n  /**\n   * 创建坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n\n\n  CoordinateController.prototype.create = function (start, end) {\n    var _a = this.option,\n        type = _a.type,\n        cfg = _a.cfg;\n    var isTheta = type === 'theta'; // 1. 起始位置\n\n    var props = __assign({\n      start: start,\n      end: end\n    }, cfg); // 2. 创建实例\n\n\n    var C = getCoordinate(isTheta ? 'polar' : type);\n    this.coordinate = new C(props); // @ts-ignore FIXME coordinate 包问题导致 type 不正确\n\n    this.coordinate.type = type; // 3. 添加默认 action\n\n    if (isTheta) {\n      // 不存在 transpose，为其自动设置一个 action\n      if (!this.hasAction('transpose')) {\n        this.transpose();\n      }\n    } // 4. 执行 action\n\n\n    this.execActions();\n    return this.coordinate;\n  };\n  /**\n   * 更新坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n\n\n  CoordinateController.prototype.adjust = function (start, end) {\n    this.coordinate.update({\n      start: start,\n      end: end\n    }); // 更新坐标系大小的时候，需要：\n    // 1. 重置 matrix\n    // 2. 重新执行作用于 matrix 的 action\n\n    this.coordinate.resetMatrix();\n    this.execActions(['scale', 'rotate', 'translate']);\n    return this.coordinate;\n  };\n  /**\n   * 旋转弧度\n   * @param angle\n   */\n\n\n  CoordinateController.prototype.rotate = function (angle) {\n    this.option.actions.push(['rotate', angle]);\n    return this;\n  };\n  /**\n   * 镜像\n   * @param dim\n   */\n\n\n  CoordinateController.prototype.reflect = function (dim) {\n    this.option.actions.push(['reflect', dim]);\n    return this;\n  };\n  /**\n   * scale\n   * @param sx\n   * @param sy\n   */\n\n\n  CoordinateController.prototype.scale = function (sx, sy) {\n    this.option.actions.push(['scale', sx, sy]);\n    return this;\n  };\n  /**\n   * 对角变换\n   */\n\n\n  CoordinateController.prototype.transpose = function () {\n    this.option.actions.push(['transpose']);\n    return this;\n  };\n  /**\n   * 获取配置\n   */\n\n\n  CoordinateController.prototype.getOption = function () {\n    return this.option;\n  };\n  /**\n   * 获得 coordinate 实例\n   */\n\n\n  CoordinateController.prototype.getCoordinate = function () {\n    return this.coordinate;\n  };\n  /**\n   * 包装配置的默认值\n   * @param option\n   */\n\n\n  CoordinateController.prototype.wrapperOption = function (option) {\n    return __assign({\n      type: 'rect',\n      actions: [],\n      cfg: {}\n    }, option);\n  };\n  /**\n   * coordinate 实例执行 actions\n   * @params includeActions 如果没有指定，则执行全部，否则，执行指定的 action\n   */\n\n\n  CoordinateController.prototype.execActions = function (includeActions) {\n    var _this = this;\n\n    var actions = this.option.actions;\n    each(actions, function (action) {\n      var _a;\n\n      var _b = __read(action),\n          actionName = _b[0],\n          args = _b.slice(1);\n\n      var shouldExec = isNil(includeActions) ? true : includeActions.includes(actionName);\n\n      if (shouldExec) {\n        (_a = _this.coordinate)[actionName].apply(_a, __spreadArray([], __read(args), false));\n      }\n    });\n  };\n\n  return CoordinateController;\n}();\n\nexport default CoordinateController;","map":{"version":3,"mappings":"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","names":["each","isNil","some","getCoordinate","option","wrapperOption","CoordinateController","actionName","actions","action","start","end","type","cfg","isTheta","props","C","coordinate","hasAction","transpose","execActions","update","resetMatrix","angle","push","dim","sx","sy","includeActions","args","shouldExec","includes","apply","_a","__spreadArray"],"sourceRoot":"","sources":["../../../src/chart/controller/coordinate.ts"],"sourcesContent":["import { each, isNil, some } from '@antv/util';\nimport { Coordinate, getCoordinate, Point } from '../../dependents';\nimport { CoordinateOption } from '../../interface';\n\n/**\n * coordinate controller，职责：\n * 1. 创建实例\n * 2. 暂存配置\n */\nexport default class CoordinateController {\n  private option: CoordinateOption;\n  private coordinate: Coordinate;\n\n  constructor(option?: CoordinateOption) {\n    // 设置默认值，并存储配置\n    this.option = this.wrapperOption(option);\n  }\n\n  /**\n   * 更新配置\n   * @param option\n   */\n  public update(option: CoordinateOption) {\n    this.option = this.wrapperOption(option);\n    return this;\n  }\n\n  /**\n   * 是否存在某一个 action\n   * @param actionName\n   */\n  public hasAction(actionName: string) {\n    const { actions } = this.option;\n\n    return some(actions, (action) => action[0] === actionName);\n  }\n  /**\n   * 创建坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n  public create(start: Point, end: Point) {\n    const { type, cfg } = this.option;\n    const isTheta = type === 'theta';\n\n    // 1. 起始位置\n    const props = {\n      start,\n      end,\n      ...cfg,\n    };\n\n    // 2. 创建实例\n    const C = getCoordinate(isTheta ? 'polar' : type);\n\n    this.coordinate = new C(props);\n\n    // @ts-ignore FIXME coordinate 包问题导致 type 不正确\n    this.coordinate.type = type;\n\n    // 3. 添加默认 action\n    if (isTheta) {\n      // 不存在 transpose，为其自动设置一个 action\n      if (!this.hasAction('transpose')) {\n        this.transpose();\n      }\n    }\n\n    // 4. 执行 action\n    this.execActions();\n\n    return this.coordinate;\n  }\n\n  /**\n   * 更新坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n  public adjust(start: Point, end: Point) {\n    this.coordinate.update({\n      start,\n      end,\n    });\n\n    // 更新坐标系大小的时候，需要：\n    // 1. 重置 matrix\n    // 2. 重新执行作用于 matrix 的 action\n    this.coordinate.resetMatrix();\n    this.execActions(['scale', 'rotate', 'translate']);\n\n    return this.coordinate;\n  }\n\n  /**\n   * 旋转弧度\n   * @param angle\n   */\n  public rotate(angle: number) {\n    this.option.actions.push(['rotate', angle]);\n    return this;\n  }\n\n  /**\n   * 镜像\n   * @param dim\n   */\n  public reflect(dim: 'x' | 'y') {\n    this.option.actions.push(['reflect', dim]);\n    return this;\n  }\n\n  /**\n   * scale\n   * @param sx\n   * @param sy\n   */\n  public scale(sx: number, sy: number) {\n    this.option.actions.push(['scale', sx, sy]);\n    return this;\n  }\n\n  /**\n   * 对角变换\n   */\n  public transpose() {\n    this.option.actions.push(['transpose']);\n    return this;\n  }\n\n  /**\n   * 获取配置\n   */\n  public getOption(): CoordinateOption {\n    return this.option;\n  }\n\n  /**\n   * 获得 coordinate 实例\n   */\n  public getCoordinate() {\n    return this.coordinate;\n  }\n\n  /**\n   * 包装配置的默认值\n   * @param option\n   */\n  private wrapperOption(option: CoordinateOption): CoordinateOption {\n    return {\n      type: 'rect',\n      actions: [],\n      cfg: {},\n      ...option,\n    };\n  }\n\n  /**\n   * coordinate 实例执行 actions\n   * @params includeActions 如果没有指定，则执行全部，否则，执行指定的 action\n   */\n  private execActions(includeActions?: string[]) {\n    const { actions } = this.option;\n\n    each(actions, (action) => {\n      const [actionName, ...args] = action;\n\n      const shouldExec = isNil(includeActions) ? true : includeActions.includes(actionName);\n\n      if (shouldExec) {\n        this.coordinate[actionName](...args);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}