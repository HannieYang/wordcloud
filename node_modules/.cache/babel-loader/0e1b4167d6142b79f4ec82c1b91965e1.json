{"ast":null,"code":"import { __read } from \"tslib\";\nimport { deepMix, each, every, get, isNil, isNumber } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { getAxisOption } from '../util/axis';\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\n\nvar Facet =\n/** @class */\nfunction () {\n  function Facet(view, cfg) {\n    /** 是否销毁 */\n    this.destroyed = false;\n    /** 分面之后的所有分面数据结构 */\n\n    this.facets = [];\n    this.view = view;\n    this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n  }\n  /**\n   * 初始化过程\n   */\n\n\n  Facet.prototype.init = function () {\n    // 初始化容器\n    if (!this.container) {\n      this.container = this.createContainer();\n    } // 生成分面布局信息\n\n\n    var data = this.view.getData();\n    this.facets = this.generateFacets(data);\n  };\n  /**\n   * 渲染分面，由上层 view 调用。包括：\n   *  - 分面 view\n   *  - 轴\n   *  - title\n   *\n   *  子类可以复写，添加一些其他组件，比如滚动条等\n   */\n\n\n  Facet.prototype.render = function () {\n    this.renderViews();\n  };\n  /**\n   * 更新 facet\n   */\n\n\n  Facet.prototype.update = function () {// 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n  };\n  /**\n   * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n   * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n   */\n\n\n  Facet.prototype.clear = function () {\n    this.clearFacetViews();\n  };\n  /**\n   * 销毁\n   */\n\n\n  Facet.prototype.destroy = function () {\n    this.clear();\n\n    if (this.container) {\n      this.container.remove(true);\n      this.container = undefined;\n    }\n\n    this.destroyed = true;\n    this.view = undefined;\n    this.facets = [];\n  };\n  /**\n   * 根据 facet 生成 view，可以给上层自定义使用\n   * @param facet\n   */\n\n\n  Facet.prototype.facetToView = function (facet) {\n    var region = facet.region,\n        data = facet.data,\n        _a = facet.padding,\n        padding = _a === void 0 ? this.cfg.padding : _a;\n    var view = this.view.createView({\n      region: region,\n      padding: padding\n    }); // 设置分面的数据\n\n    view.data(data || []);\n    facet.view = view; // 前置钩子\n\n    this.beforeEachView(view, facet);\n    var eachView = this.cfg.eachView;\n\n    if (eachView) {\n      eachView(view, facet);\n    } // 后置钩子\n\n\n    this.afterEachView(view, facet);\n    return view;\n  }; // 创建容器\n\n\n  Facet.prototype.createContainer = function () {\n    var foregroundGroup = this.view.getLayer(LAYER.FORE);\n    return foregroundGroup.addGroup();\n  };\n  /**\n   * 初始化 view\n   */\n\n\n  Facet.prototype.renderViews = function () {\n    this.createFacetViews();\n  };\n  /**\n   * 创建 分面 view\n   */\n\n\n  Facet.prototype.createFacetViews = function () {\n    var _this = this; // 使用分面数据 创建分面 view\n\n\n    return this.facets.map(function (facet) {\n      return _this.facetToView(facet);\n    });\n  };\n  /**\n   * 从 view 中清除 facetView\n   */\n\n\n  Facet.prototype.clearFacetViews = function () {\n    var _this = this; // 从 view 中移除分面 view\n\n\n    each(this.facets, function (facet) {\n      if (facet.view) {\n        _this.view.removeView(facet.view);\n\n        facet.view = undefined;\n      }\n    });\n  };\n  /**\n   * 解析 spacing\n   */\n\n\n  Facet.prototype.parseSpacing = function () {\n    /**\n     * @example\n     *\n     * // 仅使用百分比或像素值\n     * // 横向间隔为 10%，纵向间隔为 10%\n     * ['10%', '10%']\n     * // 横向间隔为 10px，纵向间隔为 10px\n     * [10, 10]\n     *\n     * // 同时使用百分比和像素值\n     * ['10%', 10]\n     * // 横向间隔为 10%，纵向间隔为 10px\n     */\n    var _a = this.view.viewBBox,\n        width = _a.width,\n        height = _a.height;\n    var spacing = this.cfg.spacing;\n    return spacing.map(function (s, idx) {\n      if (isNumber(s)) return s / (idx === 0 ? width : height);else return parseFloat(s) / 100;\n    });\n  }; // 其他一些提供给子类使用的方法\n\n  /**\n   * 获取这个字段对应的所有值，数组\n   * @protected\n   * @param data 数据\n   * @param field 字段名\n   * @return 字段对应的值\n   */\n\n\n  Facet.prototype.getFieldValues = function (data, field) {\n    var rst = [];\n    var cache = {}; // 去重、去除 Nil 值\n\n    each(data, function (d) {\n      var value = d[field];\n\n      if (!isNil(value) && !cache[value]) {\n        rst.push(value);\n        cache[value] = true;\n      }\n    });\n    return rst;\n  };\n  /**\n   * 获得每个分面的 region，平分区域\n   * @param rows row 总数\n   * @param cols col 总数\n   * @param xIndex x 方向 index\n   * @param yIndex y 方向 index\n   */\n\n\n  Facet.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    var _a = __read(this.parseSpacing(), 2),\n        xSpacing = _a[0],\n        ySpacing = _a[1]; // 每两个分面区域横向间隔xSPacing, 纵向间隔ySpacing\n    // 每个分面区域的横纵占比\n\n    /**\n     * ratio * num + spacing * (num - 1) = 1\n     * => ratio = (1 - (spacing * (num - 1))) / num\n     *          = (1 + spacing) / num - spacing\n     *\n     * num 对应 cols/rows\n     * spacing 对应 xSpacing/ySpacing\n     */\n\n\n    var xRatio = (1 + xSpacing) / (cols === 0 ? 1 : cols) - xSpacing;\n    var yRatio = (1 + ySpacing) / (rows === 0 ? 1 : rows) - ySpacing; // 得到第 index 个分面区域百分比位置\n\n    var start = {\n      x: (xRatio + xSpacing) * xIndex,\n      y: (yRatio + ySpacing) * yIndex\n    };\n    var end = {\n      x: start.x + xRatio,\n      y: start.y + yRatio\n    };\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  Facet.prototype.getDefaultCfg = function () {\n    return {\n      eachView: undefined,\n      showTitle: true,\n      spacing: [0, 0],\n      padding: 10,\n      fields: []\n    };\n  };\n  /**\n   * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n   */\n\n\n  Facet.prototype.getDefaultTitleCfg = function () {\n    // @ts-ignore\n    var fontFamily = this.view.getTheme().fontFamily;\n    return {\n      style: {\n        fontSize: 14,\n        fill: '#666',\n        fontFamily: fontFamily\n      }\n    };\n  };\n  /**\n   * 处理 axis 的默认配置\n   * @param view\n   * @param facet\n   */\n\n\n  Facet.prototype.processAxis = function (view, facet) {\n    var options = view.getOptions();\n    var coordinateOption = options.coordinate;\n    var geometries = view.geometries;\n    var coordinateType = get(coordinateOption, 'type', 'rect');\n\n    if (coordinateType === 'rect' && geometries.length) {\n      if (isNil(options.axes)) {\n        // @ts-ignore\n        options.axes = {};\n      }\n\n      var axes = options.axes;\n\n      var _a = __read(geometries[0].getXYFields(), 2),\n          x = _a[0],\n          y = _a[1];\n\n      var xOption = getAxisOption(axes, x);\n      var yOption = getAxisOption(axes, y);\n\n      if (xOption !== false) {\n        options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n      }\n\n      if (yOption !== false) {\n        options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n      }\n    }\n  };\n  /**\n   * 获取分面数据\n   * @param conditions\n   */\n\n\n  Facet.prototype.getFacetDataFilter = function (conditions) {\n    return function (datum) {\n      // 过滤出全部满足条件的数据\n      return every(conditions, function (condition) {\n        var field = condition.field,\n            value = condition.value;\n\n        if (!isNil(value) && field) {\n          return datum[field] === value;\n        }\n\n        return true;\n      });\n    };\n  };\n\n  return Facet;\n}();\n\nexport { Facet };","map":{"version":3,"mappings":"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","names":["deepMix","each","every","get","isNil","isNumber","LAYER","getAxisOption","view","cfg","getDefaultCfg","Facet","container","createContainer","data","getData","facets","generateFacets","renderViews","clearFacetViews","clear","remove","undefined","destroyed","facet","_a","padding","createView","region","beforeEachView","eachView","afterEachView","foregroundGroup","getLayer","FORE","addGroup","createFacetViews","map","_this","facetToView","removeView","viewBBox","width","height","spacing","s","idx","parseFloat","field","rst","cache","d","value","push","rows","cols","xIndex","yIndex","parseSpacing","xSpacing","ySpacing","xRatio","yRatio","start","x","y","end","showTitle","fields","fontFamily","getTheme","style","fontSize","fill","options","getOptions","coordinateOption","coordinate","geometries","coordinateType","length","axes","getXYFields","xOption","yOption","getXAxisOption","getYAxisOption","conditions","datum","condition"],"sourceRoot":"","sources":["../../src/facet/facet.ts"],"sourcesContent":["import { deepMix, each, every, get, isNil, isNumber } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { IGroup } from '../dependents';\nimport { AxisCfg, Condition, Datum, FacetCfg, FacetData, FacetDataFilter, Region } from '../interface';\n\nimport View from '../chart/view';\nimport { getAxisOption } from '../util/axis';\n\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\nexport abstract class Facet<C extends FacetCfg<FacetData> = FacetCfg<FacetData>, F extends FacetData = FacetData> {\n  /** 分面所在的 view */\n  public view: View;\n  /** 分面容器 */\n  public container: IGroup;\n  /** 是否销毁 */\n  public destroyed: boolean = false;\n\n  /** 分面的配置项 */\n  protected cfg: C;\n  /** 分面之后的所有分面数据结构 */\n  protected facets: F[] = [];\n\n  constructor(view: View, cfg: C) {\n    this.view = view;\n    this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n  }\n\n  /**\n   * 初始化过程\n   */\n  public init() {\n    // 初始化容器\n    if (!this.container) {\n      this.container = this.createContainer();\n    }\n\n    // 生成分面布局信息\n    const data = this.view.getData();\n    this.facets = this.generateFacets(data);\n  }\n\n  /**\n   * 渲染分面，由上层 view 调用。包括：\n   *  - 分面 view\n   *  - 轴\n   *  - title\n   *\n   *  子类可以复写，添加一些其他组件，比如滚动条等\n   */\n  public render() {\n    this.renderViews();\n  }\n\n  /**\n   * 更新 facet\n   */\n  public update() {\n    // 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n  }\n\n  /**\n   * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n   * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n   */\n  public clear() {\n    this.clearFacetViews();\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    this.clear();\n\n    if (this.container) {\n      this.container.remove(true);\n      this.container = undefined;\n    }\n\n    this.destroyed = true;\n    this.view = undefined;\n    this.facets = [];\n  }\n\n  /**\n   * 根据 facet 生成 view，可以给上层自定义使用\n   * @param facet\n   */\n  protected facetToView(facet: F): View {\n    const { region, data, padding = this.cfg.padding } = facet;\n\n    const view = this.view.createView({\n      region,\n      padding,\n    });\n\n    // 设置分面的数据\n    view.data(data || []);\n    facet.view = view;\n\n    // 前置钩子\n    this.beforeEachView(view, facet);\n\n    const { eachView } = this.cfg;\n    if (eachView) {\n      eachView(view, facet);\n    }\n\n    // 后置钩子\n    this.afterEachView(view, facet);\n\n    return view;\n  }\n\n  // 创建容器\n  private createContainer(): IGroup {\n    const foregroundGroup = this.view.getLayer(LAYER.FORE);\n    return foregroundGroup.addGroup();\n  }\n\n  /**\n   * 初始化 view\n   */\n  private renderViews() {\n    this.createFacetViews();\n  }\n\n  /**\n   * 创建 分面 view\n   */\n  private createFacetViews(): View[] {\n    // 使用分面数据 创建分面 view\n    return this.facets.map((facet): View => {\n      return this.facetToView(facet);\n    });\n  }\n\n  /**\n   * 从 view 中清除 facetView\n   */\n  private clearFacetViews() {\n    // 从 view 中移除分面 view\n    each(this.facets, (facet) => {\n      if (facet.view) {\n        this.view.removeView(facet.view);\n        facet.view = undefined;\n      }\n    });\n  }\n\n  /**\n   * 解析 spacing\n   */\n  private parseSpacing() {\n    /**\n     * @example\n     *\n     * // 仅使用百分比或像素值\n     * // 横向间隔为 10%，纵向间隔为 10%\n     * ['10%', '10%']\n     * // 横向间隔为 10px，纵向间隔为 10px\n     * [10, 10]\n     *\n     * // 同时使用百分比和像素值\n     * ['10%', 10]\n     * // 横向间隔为 10%，纵向间隔为 10px\n     */\n    const { width, height } = this.view.viewBBox;\n    const { spacing } = this.cfg;\n    return spacing.map((s: number, idx: number) => {\n      if (isNumber(s)) return s / (idx === 0 ? width : height);\n      else return parseFloat(s) / 100;\n    });\n  }\n\n  // 其他一些提供给子类使用的方法\n\n  /**\n   * 获取这个字段对应的所有值，数组\n   * @protected\n   * @param data 数据\n   * @param field 字段名\n   * @return 字段对应的值\n   */\n  protected getFieldValues(data: Datum[], field: string): string[] {\n    const rst = [];\n    const cache: Record<string, boolean> = {};\n\n    // 去重、去除 Nil 值\n    each(data, (d: Datum) => {\n      const value = d[field];\n      if (!isNil(value) && !cache[value]) {\n        rst.push(value);\n        cache[value] = true;\n      }\n    });\n\n    return rst;\n  }\n\n  /**\n   * 获得每个分面的 region，平分区域\n   * @param rows row 总数\n   * @param cols col 总数\n   * @param xIndex x 方向 index\n   * @param yIndex y 方向 index\n   */\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number): Region {\n    const [xSpacing, ySpacing] = this.parseSpacing();\n    // 每两个分面区域横向间隔xSPacing, 纵向间隔ySpacing\n    // 每个分面区域的横纵占比\n    /**\n     * ratio * num + spacing * (num - 1) = 1\n     * => ratio = (1 - (spacing * (num - 1))) / num\n     *          = (1 + spacing) / num - spacing\n     *\n     * num 对应 cols/rows\n     * spacing 对应 xSpacing/ySpacing\n     */\n    const xRatio = (1 + xSpacing) / (cols === 0 ? 1 : cols) - xSpacing;\n    const yRatio = (1 + ySpacing) / (rows === 0 ? 1 : rows) - ySpacing;\n\n    // 得到第 index 个分面区域百分比位置\n    const start = {\n      x: (xRatio + xSpacing) * xIndex,\n      y: (yRatio + ySpacing) * yIndex,\n    };\n    const end = {\n      x: start.x + xRatio,\n      y: start.y + yRatio,\n    };\n    return { start, end };\n  }\n\n  protected getDefaultCfg() {\n    return {\n      eachView: undefined,\n      showTitle: true,\n      spacing: [0, 0],\n      padding: 10,\n      fields: [],\n    };\n  }\n\n  /**\n   * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n   */\n  protected getDefaultTitleCfg() {\n    // @ts-ignore\n    const fontFamily = this.view.getTheme().fontFamily;\n    return {\n      style: {\n        fontSize: 14,\n        fill: '#666',\n        fontFamily,\n      },\n    };\n  }\n\n  /**\n   * 处理 axis 的默认配置\n   * @param view\n   * @param facet\n   */\n  protected processAxis(view: View, facet: F) {\n    const options = view.getOptions();\n\n    const coordinateOption = options.coordinate;\n    const geometries = view.geometries;\n\n    const coordinateType = get(coordinateOption, 'type', 'rect');\n\n    if (coordinateType === 'rect' && geometries.length) {\n      if (isNil(options.axes)) {\n        // @ts-ignore\n        options.axes = {};\n      }\n      const axes = options.axes;\n\n      const [x, y] = geometries[0].getXYFields();\n\n      const xOption = getAxisOption(axes, x);\n      const yOption = getAxisOption(axes, y);\n\n      if (xOption !== false) {\n        options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n      }\n\n      if (yOption !== false) {\n        options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n      }\n    }\n  }\n\n  /**\n   * 获取分面数据\n   * @param conditions\n   */\n  protected getFacetDataFilter(conditions: Condition[]): FacetDataFilter {\n    return (datum: Datum) => {\n      // 过滤出全部满足条件的数据\n      return every(conditions, (condition) => {\n        const { field, value } = condition;\n\n        if (!isNil(value) && field) {\n          return datum[field] === value;\n        }\n        return true;\n      });\n    };\n  }\n\n  /**\n   * @override 开始处理 eachView\n   * @param view\n   * @param facet\n   */\n  protected abstract beforeEachView(view: View, facet: F);\n\n  /**\n   * @override 处理 eachView 之后\n   * @param view\n   * @param facet\n   */\n  protected abstract afterEachView(view: View, facet: F);\n\n  /**\n   * @override 生成分面数据，包含布局\n   * @param data\n   */\n  protected abstract generateFacets(data: Datum[]): F[];\n\n  /**\n   * 获取 x 轴的配置\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected abstract getXAxisOption(x: string, axes: any, option: AxisCfg, facet: F): object;\n\n  /**\n   * 获取 y 轴的配置\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected abstract getYAxisOption(y: string, axes: any, option: AxisCfg, facet: F): object;\n}\n"]},"metadata":{},"sourceType":"module"}