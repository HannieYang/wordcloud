{"ast":null,"code":"/**\n * 获取设备像素比\n */\nexport function getPixelRatio() {\n  return typeof window === 'object' ? window === null || window === void 0 ? void 0 : window.devicePixelRatio : 2;\n}\n/**\n * 初始化 cavnas，设置宽高等\n */\n\nexport function initCanvas(width, height) {\n  if (height === void 0) {\n    height = width;\n  }\n\n  var canvas = document.createElement('canvas');\n  var pixelRatio = getPixelRatio(); // 画布尺寸\n\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio; // 显示尺寸\n\n  canvas.style.width = width + \"px\";\n  canvas.style.height = height + \"px\";\n  var ctx = canvas.getContext('2d');\n  ctx.scale(pixelRatio, pixelRatio);\n  return canvas;\n}\n/**\n * 绘制背景\n *\n * @param context\n * @param cfg\n * @param width\n * @param height\n */\n\nexport function drawBackground(context, cfg, width, height) {\n  if (height === void 0) {\n    height = width;\n  }\n\n  var backgroundColor = cfg.backgroundColor,\n      opacity = cfg.opacity;\n  context.globalAlpha = opacity;\n  context.fillStyle = backgroundColor;\n  context.beginPath();\n  context.fillRect(0, 0, width, height);\n  context.closePath();\n}\n/**\n * 计算贴图单元大小\n *\n * @param size 元素大小\n * @param padding 圆点间隔\n * @param isStagger 是否交错\n * @reutrn 返回贴图单元大小\n */\n\nexport function getUnitPatternSize(size, padding, isStagger) {\n  // 如果交错, unitSize 放大两倍\n  var unitSize = size + padding;\n  return isStagger ? unitSize * 2 : unitSize;\n}\n/**\n * 计算有交错情况的元素坐标\n *\n * @param unitSize 贴图单元大小\n * @param isStagger 是否交错\n * @reutrn 元素中心坐标 x,y 数组集合\n */\n\nexport function getSymbolsPosition(unitSize, isStagger) {\n  // 如果交错, 交错绘制 dot\n  var symbolsPos = isStagger ? [[unitSize * (1 / 4), unitSize * (1 / 4)], [unitSize * (3 / 4), unitSize * (3 / 4)]] : [[unitSize * (1 / 2), unitSize * (1 / 2)]];\n  return symbolsPos;\n}\n/**\n * 给整个 pattern贴图 做变换, 目前支持旋转\n *\n * @param pattern 整个贴图\n * @param dpr  设备像素比\n * @param rotation 旋转角度\n */\n\nexport function transformMatrix(dpr, rotation) {\n  var radian = rotation * Math.PI / 180;\n  var matrix = {\n    a: Math.cos(radian) * (1 / dpr),\n    b: Math.sin(radian) * (1 / dpr),\n    c: -Math.sin(radian) * (1 / dpr),\n    d: Math.cos(radian) * (1 / dpr),\n    e: 0,\n    f: 0\n  };\n  return matrix;\n}","map":{"version":3,"mappings":"AAEA;;;AAGA,OAAM,SAAUA,aAAV,GAAuB;EAC3B,OAAO,OAAOC,MAAP,KAAkB,QAAlB,GAA6BA,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEC,gBAArC,GAAwD,CAA/D;AACD;AAED;;;;AAGA,OAAM,SAAUC,UAAV,CAAqBC,KAArB,EAAoCC,MAApC,EAA0D;EAAtB;IAAAA;EAAsB;;EAC9D,IAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;EAEA,IAAMC,UAAU,GAAGT,aAAa,EAAhC,CAH8D,CAI9D;;EACAM,MAAM,CAACF,KAAP,GAAeA,KAAK,GAAGK,UAAvB;EACAH,MAAM,CAACD,MAAP,GAAgBA,MAAM,GAAGI,UAAzB,CAN8D,CAO9D;;EACAH,MAAM,CAACI,KAAP,CAAaN,KAAb,GAAwBA,KAAK,OAA7B;EACAE,MAAM,CAACI,KAAP,CAAaL,MAAb,GAAyBA,MAAM,OAA/B;EAEA,IAAMM,GAAG,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAZ;EACAD,GAAG,CAACE,KAAJ,CAAUJ,UAAV,EAAsBA,UAAtB;EAEA,OAAOH,MAAP;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUQ,cAAV,CACJC,OADI,EAEJC,GAFI,EAGJZ,KAHI,EAIJC,MAJI,EAIkB;EAAtB;IAAAA;EAAsB;;EAEd,mBAAe,GAAcW,GAAG,gBAAhC;EAAA,IAAiBC,OAAO,GAAKD,GAAG,QAAhC;EAERD,OAAO,CAACG,WAAR,GAAsBD,OAAtB;EACAF,OAAO,CAACI,SAAR,GAAoBC,eAApB;EAEAL,OAAO,CAACM,SAAR;EACAN,OAAO,CAACO,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBlB,KAAvB,EAA8BC,MAA9B;EACAU,OAAO,CAACQ,SAAR;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUC,kBAAV,CAA6BC,IAA7B,EAA2CC,OAA3C,EAA4DC,SAA5D,EAA8E;EAClF;EACA,IAAMC,QAAQ,GAAGH,IAAI,GAAGC,OAAxB;EACA,OAAOC,SAAS,GAAGC,QAAQ,GAAG,CAAd,GAAkBA,QAAlC;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUC,kBAAV,CAA6BD,QAA7B,EAA+CD,SAA/C,EAAiE;EACrE;EACA,IAAMG,UAAU,GAAGH,SAAS,GACxB,CACE,CAACC,QAAQ,IAAI,IAAI,CAAR,CAAT,EAAqBA,QAAQ,IAAI,IAAI,CAAR,CAA7B,CADF,EAEE,CAACA,QAAQ,IAAI,IAAI,CAAR,CAAT,EAAqBA,QAAQ,IAAI,IAAI,CAAR,CAA7B,CAFF,CADwB,GAKxB,CAAC,CAACA,QAAQ,IAAI,IAAI,CAAR,CAAT,EAAqBA,QAAQ,IAAI,IAAI,CAAR,CAA7B,CAAD,CALJ;EAMA,OAAOE,UAAP;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUC,eAAV,CAA0BC,GAA1B,EAAuCC,QAAvC,EAAuD;EAC3D,IAAMC,MAAM,GAAID,QAAQ,GAAGE,IAAI,CAACC,EAAjB,GAAuB,GAAtC;EACA,IAAMC,MAAM,GAAG;IACbC,CAAC,EAAEH,IAAI,CAACI,GAAL,CAASL,MAAT,KAAoB,IAAIF,GAAxB,CADU;IAEbQ,CAAC,EAAEL,IAAI,CAACM,GAAL,CAASP,MAAT,KAAoB,IAAIF,GAAxB,CAFU;IAGbU,CAAC,EAAE,CAACP,IAAI,CAACM,GAAL,CAASP,MAAT,CAAD,IAAqB,IAAIF,GAAzB,CAHU;IAIbW,CAAC,EAAER,IAAI,CAACI,GAAL,CAASL,MAAT,KAAoB,IAAIF,GAAxB,CAJU;IAKbY,CAAC,EAAE,CALU;IAMbC,CAAC,EAAE;EANU,CAAf;EAQA,OAAOR,MAAP;AACD","names":["getPixelRatio","window","devicePixelRatio","initCanvas","width","height","canvas","document","createElement","pixelRatio","style","ctx","getContext","scale","drawBackground","context","cfg","opacity","globalAlpha","fillStyle","backgroundColor","beginPath","fillRect","closePath","getUnitPatternSize","size","padding","isStagger","unitSize","getSymbolsPosition","symbolsPos","transformMatrix","dpr","rotation","radian","Math","PI","matrix","a","cos","b","sin","c","d","e","f"],"sourceRoot":"","sources":["../../../src/utils/pattern/util.ts"],"sourcesContent":["import { PatternCfg } from '../../types/pattern';\n\n/**\n * 获取设备像素比\n */\nexport function getPixelRatio(): number {\n  return typeof window === 'object' ? window?.devicePixelRatio : 2;\n}\n\n/**\n * 初始化 cavnas，设置宽高等\n */\nexport function initCanvas(width: number, height: number = width): HTMLCanvasElement {\n  const canvas = document.createElement('canvas');\n\n  const pixelRatio = getPixelRatio();\n  // 画布尺寸\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio;\n  // 显示尺寸\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d');\n  ctx.scale(pixelRatio, pixelRatio);\n\n  return canvas;\n}\n\n/**\n * 绘制背景\n *\n * @param context\n * @param cfg\n * @param width\n * @param height\n */\nexport function drawBackground(\n  context: CanvasRenderingContext2D,\n  cfg: PatternCfg,\n  width: number,\n  height: number = width\n) {\n  const { backgroundColor, opacity } = cfg;\n\n  context.globalAlpha = opacity;\n  context.fillStyle = backgroundColor;\n\n  context.beginPath();\n  context.fillRect(0, 0, width, height);\n  context.closePath();\n}\n\n/**\n * 计算贴图单元大小\n *\n * @param size 元素大小\n * @param padding 圆点间隔\n * @param isStagger 是否交错\n * @reutrn 返回贴图单元大小\n */\nexport function getUnitPatternSize(size: number, padding: number, isStagger: boolean): number {\n  // 如果交错, unitSize 放大两倍\n  const unitSize = size + padding;\n  return isStagger ? unitSize * 2 : unitSize;\n}\n\n/**\n * 计算有交错情况的元素坐标\n *\n * @param unitSize 贴图单元大小\n * @param isStagger 是否交错\n * @reutrn 元素中心坐标 x,y 数组集合\n */\nexport function getSymbolsPosition(unitSize: number, isStagger: boolean): number[][] {\n  // 如果交错, 交错绘制 dot\n  const symbolsPos = isStagger\n    ? [\n        [unitSize * (1 / 4), unitSize * (1 / 4)],\n        [unitSize * (3 / 4), unitSize * (3 / 4)],\n      ]\n    : [[unitSize * (1 / 2), unitSize * (1 / 2)]];\n  return symbolsPos;\n}\n\n/**\n * 给整个 pattern贴图 做变换, 目前支持旋转\n *\n * @param pattern 整个贴图\n * @param dpr  设备像素比\n * @param rotation 旋转角度\n */\nexport function transformMatrix(dpr: number, rotation: number) {\n  const radian = (rotation * Math.PI) / 180;\n  const matrix = {\n    a: Math.cos(radian) * (1 / dpr),\n    b: Math.sin(radian) * (1 / dpr),\n    c: -Math.sin(radian) * (1 / dpr),\n    d: Math.cos(radian) * (1 / dpr),\n    e: 0,\n    f: 0,\n  };\n  return matrix;\n}\n"]},"metadata":{},"sourceType":"module"}