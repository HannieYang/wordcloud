{"ast":null,"code":"import { __assign, __extends, __read } from \"tslib\";\nimport { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { Slider as SliderComponent } from '../../dependents';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Controller } from './base';\n/**\n * @ignore\n * slider Controller\n */\n\nvar Slider =\n/** @class */\nfunction (_super) {\n  __extends(Slider, _super);\n\n  function Slider(view) {\n    var _this = _super.call(this, view) || this;\n\n    _this.onChangeFn = noop;\n    /**\n     * 清除测量\n     */\n\n    _this.resetMeasure = function () {\n      _this.clear();\n    };\n    /**\n     * 滑块滑动的时候出发\n     * @param v\n     */\n\n\n    _this.onValueChange = function (v) {\n      var _a = __read(v, 2),\n          min = _a[0],\n          max = _a[1];\n\n      _this.start = min;\n      _this.end = max;\n\n      _this.changeViewData(min, max);\n    };\n\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.onChangeFn = throttle(_this.onValueChange, 20, {\n      leading: true\n    });\n    _this.width = 0;\n\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, _this.resetMeasure);\n\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, _this.resetMeasure);\n\n    return _this;\n  }\n\n  Object.defineProperty(Slider.prototype, \"name\", {\n    get: function () {\n      return 'slider';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Slider.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  };\n  /**\n   * 初始化\n   */\n\n\n  Slider.prototype.init = function () {};\n  /**\n   * 渲染\n   */\n\n\n  Slider.prototype.render = function () {\n    this.option = this.view.getOptions().slider;\n\n    var _a = this.getSliderCfg(),\n        start = _a.start,\n        end = _a.end;\n\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n\n    var viewData = this.view.getOptions().data;\n\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider(); // 监听事件，绑定交互\n\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {// do nothing\n      }\n    }\n  };\n  /**\n   * 布局\n   */\n\n\n  Slider.prototype.layout = function () {\n    var _this = this;\n\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(function () {\n        // 初始状态下的 view 数据过滤\n        if (!_this.view.destroyed) {\n          _this.changeViewData(_this.start, _this.end);\n        }\n      }, 0);\n    }\n\n    if (this.slider) {\n      var width = this.view.coordinateBBox.width; // 获取组件的 layout bbox\n\n      var padding = this.slider.component.get('padding');\n\n      var _a = __read(padding, 4),\n          paddingTop = _a[0],\n          paddingRight = _a[1],\n          paddingBottom = _a[2],\n          paddingLeft = _a[3];\n\n      var bboxObject = this.slider.component.getLayoutBBox();\n      var bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(padding);\n\n      var _b = this.getMinMaxText(this.start, this.end),\n          minText = _b.minText,\n          maxText = _b.maxText;\n\n      var _c = __read(directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM), 2),\n          x1 = _c[0],\n          y1 = _c[1];\n\n      var _d = __read(directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM), 2),\n          x2 = _d[0],\n          y2 = _d[1]; // 默认放在 bottom\n\n\n      this.slider.component.update(__assign(__assign({}, this.getSliderCfg()), {\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      }));\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  };\n  /**\n   * 更新\n   */\n\n\n  Slider.prototype.update = function () {\n    // 逻辑和 render 保持一致\n    this.render();\n  };\n  /**\n   * 创建 slider 组件\n   */\n\n\n  Slider.prototype.createSlider = function () {\n    var cfg = this.getSliderCfg(); // 添加 slider 组件\n\n    var component = new SliderComponent(__assign({\n      container: this.container\n    }, cfg));\n    component.init();\n    return {\n      component: component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER\n    };\n  };\n  /**\n   * 更新配置\n   */\n\n\n  Slider.prototype.updateSlider = function () {\n    var cfg = this.getSliderCfg();\n\n    if (this.width) {\n      var _a = this.getMinMaxText(this.start, this.end),\n          minText = _a.minText,\n          maxText = _a.maxText;\n\n      cfg = __assign(__assign({}, cfg), {\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      });\n    }\n\n    this.slider.component.update(cfg);\n    return this.slider;\n  };\n  /**\n   * 进行测量操作\n   */\n\n\n  Slider.prototype.measureSlider = function () {\n    var width = this.getSliderCfg().width;\n    this.width = width;\n  };\n  /**\n   * 生成 slider 配置\n   */\n\n\n  Slider.prototype.getSliderCfg = function () {\n    var cfg = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width\n    };\n\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      var trendCfg = __assign({\n        data: this.getData()\n      }, get(this.option, 'trendCfg', {})); // 因为有样式，所以深层覆盖\n\n\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option); // trendCfg 因为有数据数组，所以使用浅替换\n\n      cfg = __assign(__assign({}, cfg), {\n        trendCfg: trendCfg\n      });\n    }\n\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    return cfg;\n  };\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n\n\n  Slider.prototype.getData = function () {\n    var data = this.view.getOptions().data;\n\n    var _a = __read(this.view.getYScales(), 1),\n        yScale = _a[0];\n\n    var groupScales = this.view.getGroupScales();\n\n    if (groupScales.length) {\n      var _b = groupScales[0],\n          field_1 = _b.field,\n          ticks_1 = _b.ticks;\n      return data.reduce(function (pre, cur) {\n        if (cur[field_1] === ticks_1[0]) {\n          pre.push(cur[yScale.field]);\n        }\n\n        return pre;\n      }, []);\n    }\n\n    return data.map(function (datum) {\n      return datum[yScale.field] || 0;\n    });\n  };\n  /**\n   * 获取 slider 的主题配置\n   */\n\n\n  Slider.prototype.getThemeOptions = function () {\n    var theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  };\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n\n\n  Slider.prototype.getMinMaxText = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field); // 如果是 xScale 数值类型，则进行排序\n\n    if (xScale.isLinear) {\n      values = values.sort();\n    }\n\n    var xValues = isHorizontal ? values : values.reverse();\n    var dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    var xTickCount = size(xValues);\n    var minIndex = Math.round(min * (xTickCount - 1));\n    var maxIndex = Math.round(max * (xTickCount - 1));\n    var minText = get(xValues, [minIndex]);\n    var maxText = get(xValues, [maxIndex]);\n    var formatter = this.getSliderCfg().formatter;\n\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n\n    return {\n      minText: minText,\n      maxText: maxText\n    };\n  };\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n\n\n  Slider.prototype.changeViewData = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return;\n    }\n\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field); // 如果是 xScale 数值类型，则进行排序\n\n    var xScaleValues = this.view.getXScale().isLinear ? values.sort(function (a, b) {\n      return Number(a) - Number(b);\n    }) : values;\n    var xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    var xTickCount = size(xValues);\n    var minIndex = Math.round(min * (xTickCount - 1));\n    var maxIndex = Math.round(max * (xTickCount - 1)); // 增加 x 轴的过滤器\n\n    this.view.filter(xScale.field, function (value, datum) {\n      var idx = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  };\n  /**\n   * 覆写父类方法\n   */\n\n\n  Slider.prototype.getComponents = function () {\n    return this.slider ? [this.slider] : [];\n  };\n  /**\n   * 覆盖父类\n   */\n\n\n  Slider.prototype.clear = function () {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  };\n\n  return Slider;\n}(Controller);\n\nexport default Slider;","map":{"version":3,"mappings":"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","names":["deepMix","get","isObject","size","clamp","isNil","noop","throttle","isEmpty","valuesOfKey","COMPONENT_TYPE","DIRECTION","LAYER","VIEW_LIFE_CIRCLE","Slider","SliderComponent","BBox","directionToPosition","isBetween","Controller","__extends","view","_super","_this","clear","v","min","max","start","end","changeViewData","container","getLayer","FORE","addGroup","onChangeFn","onValueChange","leading","width","on","BEFORE_CHANGE_DATA","resetMeasure","BEFORE_CHANGE_SIZE","Object","destroy","call","off","option","getOptions","slider","getSliderCfg","viewData","data","updateSlider","createSlider","component","undefined","measureSlider","setTimeout","destroyed","coordinateBBox","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","bboxObject","getLayoutBBox","bbox","x","y","Math","height","expand","getMinMaxText","minText","maxText","viewBBox","BOTTOM","x1","y1","x2","y2","update","__assign","cut","render","cfg","init","layer","direction","type","SLIDER","trendCfg","getData","getThemeOptions","getYScales","yScale","groupScales","getGroupScales","length","field_1","ticks_1","reduce","pre","cur","push","field","map","datum","theme","getTheme","xScale","getXScale","isHorizontal","values","isLinear","sort","xValues","reverse","dataSize","xTickCount","minIndex","round","maxIndex","formatter","xScaleValues","a","b","Number","filter","value","idx","indexOf"],"sourceRoot":"","sources":["../../../src/chart/controller/slider.ts"],"sourcesContent":["import { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { IGroup, Slider as SliderComponent } from '../../dependents';\nimport { ComponentOption, Datum, Padding } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Writeable } from '../../util/types';\nimport View from '../view';\nimport { Controller } from './base';\nimport { SliderOption, SliderCfg } from '../../interface';\n\n/**\n * @ignore\n * slider Controller\n */\nexport default class Slider extends Controller<SliderOption> {\n  private slider: ComponentOption;\n  private container: IGroup;\n\n  private width: number;\n  private start: number;\n  private end: number;\n\n  private onChangeFn: (evt: {}) => void = noop;\n\n  constructor(view: View) {\n    super(view);\n\n    this.container = this.view.getLayer(LAYER.FORE).addGroup();\n    this.onChangeFn = throttle(this.onValueChange, 20, {\n      leading: true,\n    }) as (evt: {}) => void;\n\n    this.width = 0;\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  get name(): string {\n    return 'slider';\n  }\n\n  public destroy() {\n    super.destroy();\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {}\n\n  /**\n   * 渲染\n   */\n  public render() {\n    this.option = this.view.getOptions().slider;\n    const { start, end } = this.getSliderCfg();\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n\n    const { data: viewData } = this.view.getOptions();\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  }\n\n  /**\n   * 布局\n   */\n  public layout() {\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(() => {\n        // 初始状态下的 view 数据过滤\n        if (!this.view.destroyed) {\n          this.changeViewData(this.start, this.end);\n        }\n      }, 0);\n    }\n    if (this.slider) {\n      const width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      const padding: Padding = this.slider.component.get('padding') as Padding;\n      const [paddingTop, paddingRight, paddingBottom, paddingLeft] = padding;\n      const bboxObject = this.slider.component.getLayoutBBox();\n      const bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(\n        padding\n      );\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n\n      const [x1, y1] = directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM);\n      const [x2, y2] = directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM);\n\n      // 默认放在 bottom\n      this.slider.component.update({\n        ...this.getSliderCfg(),\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText,\n        maxText,\n      });\n\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  }\n\n  /**\n   * 更新\n   */\n  public update() {\n    // 逻辑和 render 保持一致\n    this.render();\n  }\n\n  /**\n   * 创建 slider 组件\n   */\n  private createSlider(): ComponentOption {\n    const cfg: any = this.getSliderCfg();\n    // 添加 slider 组件\n    const component = new SliderComponent({\n      container: this.container,\n      ...cfg,\n    });\n\n    component.init();\n\n    return {\n      component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER,\n    };\n  }\n\n  /**\n   * 更新配置\n   */\n  private updateSlider() {\n    let cfg = this.getSliderCfg();\n    if (this.width) {\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n      cfg = { ...cfg, width: this.width, start: this.start, end: this.end, minText, maxText };\n    }\n\n    this.slider.component.update(cfg);\n\n    return this.slider;\n  }\n\n  /**\n   * 进行测量操作\n   */\n  private measureSlider() {\n    const { width } = this.getSliderCfg();\n\n    this.width = width;\n  }\n\n  /**\n   * 清除测量\n   */\n  private resetMeasure = () => {\n    this.clear();\n  };\n\n  /**\n   * 生成 slider 配置\n   */\n  private getSliderCfg() {\n    let cfg: Writeable<SliderCfg> & { x: number; y: number; width: number; minText: string; maxText: string } = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width,\n    };\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      const trendCfg = {\n        data: this.getData(),\n        ...get(this.option, 'trendCfg', {}),\n      };\n\n      // 因为有样式，所以深层覆盖\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option);\n\n      // trendCfg 因为有数据数组，所以使用浅替换\n      cfg = { ...cfg, trendCfg };\n    }\n\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n\n    return cfg;\n  }\n\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  private getData(): number[] {\n    const data = this.view.getOptions().data;\n    const [yScale] = this.view.getYScales();\n    const groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      const { field, ticks } = groupScales[0];\n      return data.reduce((pre, cur) => {\n        if (cur[field] === ticks[0]) {\n          pre.push(cur[yScale.field] as number);\n        }\n        return pre;\n      }, []) as number[];\n    }\n\n    return data.map((datum) => datum[yScale.field] || 0);\n  }\n\n  /**\n   * 获取 slider 的主题配置\n   */\n  private getThemeOptions() {\n    const theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  }\n\n  /**\n   * 滑块滑动的时候出发\n   * @param v\n   */\n  private onValueChange = (v: any) => {\n    const [min, max] = v;\n\n    this.start = min;\n    this.end = max;\n\n    this.changeViewData(min, max);\n  };\n\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n  private getMinMaxText(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const isHorizontal = true;\n    let values = valuesOfKey(data, xScale.field);\n\n    // 如果是 xScale 数值类型，则进行排序\n    if (xScale.isLinear) {\n      values = values.sort();\n    }\n\n    const xValues = isHorizontal ? values : values.reverse();\n    const dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.round(min * (xTickCount - 1));\n    const maxIndex = Math.round(max * (xTickCount - 1));\n\n    let minText = get(xValues, [minIndex]);\n    let maxText = get(xValues, [maxIndex]);\n\n    const formatter = this.getSliderCfg().formatter as SliderCfg['formatter'];\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n\n    return {\n      minText,\n      maxText,\n    };\n  }\n\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n  private changeViewData(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return;\n    }\n    const isHorizontal = true;\n    const values = valuesOfKey(data, xScale.field);\n\n    // 如果是 xScale 数值类型，则进行排序\n    const xScaleValues = this.view.getXScale().isLinear ? values.sort((a, b) => Number(a) - Number(b)) : values;\n\n    const xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.round(min * (xTickCount - 1));\n    const maxIndex = Math.round(max * (xTickCount - 1));\n\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, (value: any, datum: Datum) => {\n      const idx: number = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  }\n\n  /**\n   * 覆写父类方法\n   */\n  public getComponents() {\n    return this.slider ? [this.slider] : [];\n  }\n\n  /**\n   * 覆盖父类\n   */\n  public clear() {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}