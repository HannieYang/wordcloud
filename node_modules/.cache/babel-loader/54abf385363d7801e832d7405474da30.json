{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { geometry } from '../progress/adaptor';\n/**\n * coordinate 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var innerRadius = options.innerRadius,\n      radius = options.radius; // coordinate\n\n  chart.coordinate('theta', {\n    innerRadius: innerRadius,\n    radius: radius\n  });\n  return params;\n}\n/**\n * statistic 配置\n * @param params\n */\n\n\nexport function statistic(params, updated) {\n  var chart = params.chart,\n      options = params.options;\n  var innerRadius = options.innerRadius,\n      statistic = options.statistic,\n      percent = options.percent,\n      meta = options.meta; // 先清空标注，再重新渲染\n\n  chart.getController('annotation').clear(true);\n  /** 中心文本 指标卡 */\n\n  if (innerRadius && statistic) {\n    var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n      return (v * 100).toFixed(2) + \"%\";\n    };\n\n    var contentOpt = statistic.content;\n\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n      });\n    }\n\n    renderStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: contentOpt\n      }),\n      plotType: 'ring-progress'\n    }, {\n      percent: percent\n    });\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}","map":{"version":3,"mappings":";AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,YAA3B;AAEA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,eAA3B,QAAkD,aAAlD;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,KAA3B,EAAkCC,UAAlC,QAAoD,sBAApD;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA;;;;;AAIA,SAASC,UAAT,CAAoBC,MAApB,EAAuD;EAC7C,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,eAAW,GAAaC,OAAO,YAA/B;EAAA,IAAaC,MAAM,GAAKD,OAAO,OAA/B,CAF6C,CAIrD;;EACAE,KAAK,CAACJ,UAAN,CAAiB,OAAjB,EAA0B;IACxBK,WAAW,aADa;IAExBF,MAAM;EAFkB,CAA1B;EAKA,OAAOF,MAAP;AACD;AAED;;;;;;AAIA,OAAM,SAAUK,SAAV,CAAoBL,MAApB,EAAyDM,OAAzD,EAA0E;EACtE,SAAK,GAAcN,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,eAAW,GAA+BC,OAAO,YAAjD;EAAA,IAAaI,SAAS,GAAoBJ,OAAO,UAAjD;EAAA,IAAwBM,OAAO,GAAWN,OAAO,QAAjD;EAAA,IAAiCO,IAAI,GAAKP,OAAO,KAAjD,CAFsE,CAI9E;;EACAE,KAAK,CAACM,aAAN,CAAoB,YAApB,EAAkCC,KAAlC,CAAwC,IAAxC;EAEA;;EACA,IAAIN,WAAW,IAAIC,SAAnB,EAA8B;IAC5B,IAAMM,aAAa,GAAGtB,GAAG,CAACmB,IAAD,EAAO,CAAC,SAAD,EAAY,WAAZ,CAAP,CAAH,IAAwC,UAACI,CAAD,EAAE;MAAK,OAAG,CAACA,CAAC,GAAG,GAAL,EAAUC,OAAV,CAAkB,CAAlB,IAAoB,GAAvB;IAA0B,CAA/F;;IACA,IAAIC,UAAU,GAAGT,SAAS,CAACU,OAA3B;;IACA,IAAID,UAAJ,EAAgB;MACdA,UAAU,GAAGvB,UAAU,CAAC,EAAD,EAAKuB,UAAL,EAAiB;QACtCC,OAAO,EAAE,CAACzB,KAAK,CAACwB,UAAU,CAACC,OAAZ,CAAN,GAA6BD,UAAU,CAACC,OAAxC,GAAkDJ,aAAa,CAACJ,OAAD;MADlC,CAAjB,CAAvB;IAGD;;IACDd,eAAe,CACbU,KADa,EAEb;MAAEE,SAAS,wBAAOA,SAAP,GAAgB;QAAEU,OAAO,EAAED;MAAX,CAAhB,CAAX;MAAoDE,QAAQ,EAAE;IAA9D,CAFa,EAGb;MAAET,OAAO;IAAT,CAHa,CAAf;EAKD;;EAED,IAAID,OAAJ,EAAa;IACXH,KAAK,CAACc,MAAN,CAAa,IAAb;EACD;;EAED,OAAOjB,MAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUkB,OAAV,CAAkBlB,MAAlB,EAAqD;EACzD,OAAOR,IAAI,CAACM,QAAD,EAAWJ,KAAK,CAAC,EAAD,CAAhB,EAAsBK,UAAtB,EAAkCM,SAAlC,EAA6CV,SAA7C,EAAwDC,KAAxD,EAA+DC,UAAU,EAAzE,CAAJ,CAAiFG,MAAjF,CAAP;AACD","names":["get","isNil","deepAssign","flow","renderStatistic","scale","animation","theme","annotation","geometry","coordinate","params","options","radius","chart","innerRadius","statistic","updated","percent","meta","getController","clear","metaFormatter","v","toFixed","contentOpt","content","plotType","render","adaptor"],"sourceRoot":"","sources":["../../../src/plots/ring-progress/adaptor.ts"],"sourcesContent":["import { get, isNil } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { geometry } from '../progress/adaptor';\nimport { RingProgressOptions } from './types';\n\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params: Params<RingProgressOptions>): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, radius } = options;\n\n  // coordinate\n  chart.coordinate('theta', {\n    innerRadius,\n    radius,\n  });\n\n  return params;\n}\n\n/**\n * statistic 配置\n * @param params\n */\nexport function statistic(params: Params<RingProgressOptions>, updated?: boolean): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    const metaFormatter = get(meta, ['percent', 'formatter']) || ((v) => `${(v * 100).toFixed(2)}%`);\n    let contentOpt = statistic.content;\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent),\n      });\n    }\n    renderStatistic(\n      chart,\n      { statistic: { ...statistic, content: contentOpt }, plotType: 'ring-progress' },\n      { percent }\n    );\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<RingProgressOptions>) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}\n"]},"metadata":{},"sourceType":"module"}