{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * Simplified from https://github.com/zertosh/invariant.\n */\nimport { __spreadArrays } from \"tslib\";\nexport var LEVEL;\n\n(function (LEVEL) {\n  LEVEL[\"ERROR\"] = \"error\";\n  LEVEL[\"WARN\"] = \"warn\";\n  LEVEL[\"INFO\"] = \"log\";\n})(LEVEL || (LEVEL = {}));\n\nvar BRAND = 'AntV/G2Plot';\n/**\n * 获取错误消息\n * @param format\n * @param args\n */\n\nfunction getMessage(format) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var argIndex = 0;\n  return BRAND + \": \" + format.replace(/%s/g, function () {\n    return \"\" + args[argIndex++];\n  });\n}\n/**\n * invariant error\n * @param condition\n * @param format\n * @param args\n */\n\n\nexport function invariant(condition, format) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  if (!condition) {\n    var error = new Error(getMessage.apply(void 0, __spreadArrays([format], args)));\n    error.name = BRAND; // error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\n/**\n * 打印语句\n * @param level\n * @param condition\n * @param format\n * @param args\n */\n\nexport function log(level, condition, format) {\n  var args = [];\n\n  for (var _i = 3; _i < arguments.length; _i++) {\n    args[_i - 3] = arguments[_i];\n  }\n\n  if (!condition) {\n    console[level](getMessage.apply(void 0, __spreadArrays([format], args)));\n  }\n}","map":{"version":3,"mappings":";;AAAA;;;;AAIA,WAAYA,KAAZ;;AAAA,WAAYA,KAAZ,EAAiB;EACfA;EACAA;EACAA;AACD,CAJD,EAAYA,KAAK,KAALA,KAAK,MAAjB;;AAMA,IAAMC,KAAK,GAAG,aAAd;AAEA;;;;;;AAKA,SAASC,UAAT,CAAoBC,MAApB,EAAkC;EAAE;;OAAA,yCAAc;IAAdC;;;EAClC,IAAIC,QAAQ,GAAG,CAAf;EACA,OAAUJ,KAAK,OAAL,GAAUE,MAAM,CAACG,OAAP,CAAe,KAAf,EAAsB;IAAc,YAAGF,IAAI,CAACC,QAAQ,EAAT,CAAP;EAAqB,CAAzD,CAApB;AACD;AAED;;;;;;;;AAMA,OAAM,SAAUE,SAAV,CAAoBC,SAApB,EAAwCL,MAAxC,EAAsD;EAAE;;OAAA,yCAAc;IAAdC;;;EAC5D,IAAI,CAACI,SAAL,EAAgB;IACd,IAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUR,UAAU,MAAV,CAAU,MAAV,EAAUS,gBAACR,MAAD,GAAYC,IAAZ,CAAV,CAAV,CAAd;IACAK,KAAK,CAACG,IAAN,GAAaX,KAAb,CAFc,CAGd;;IACA,MAAMQ,KAAN;EACD;AACF;AAED;;;;;;;;AAOA,OAAM,SAAUI,GAAV,CAAcC,KAAd,EAA4BN,SAA5B,EAAgDL,MAAhD,EAAsD;EAAE;;OAAA,yCAAc;IAAdC;;;EAC5D,IAAI,CAACI,SAAL,EAAgB;IACdO,OAAO,CAACD,KAAD,CAAP,CAAeZ,UAAU,MAAV,CAAU,MAAV,EAAUS,gBAACR,MAAD,GAAYC,IAAZ,CAAV,CAAf;EACD;AACF","names":["LEVEL","BRAND","getMessage","format","args","argIndex","replace","invariant","condition","error","Error","__spreadArrays","name","log","level","console"],"sourceRoot":"","sources":["../../src/utils/invariant.ts"],"sourcesContent":["/**\n * Simplified from https://github.com/zertosh/invariant.\n */\n\nexport enum LEVEL {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'log',\n}\n\nconst BRAND = 'AntV/G2Plot';\n\n/**\n * 获取错误消息\n * @param format\n * @param args\n */\nfunction getMessage(format: string, ...args: any[]): string {\n  let argIndex = 0;\n  return `${BRAND}: ${format.replace(/%s/g, (): string => `${args[argIndex++]}`)}`;\n}\n\n/**\n * invariant error\n * @param condition\n * @param format\n * @param args\n */\nexport function invariant(condition: boolean, format: string, ...args: any[]): void {\n  if (!condition) {\n    const error = new Error(getMessage(format, ...args));\n    error.name = BRAND;\n    // error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\n/**\n * 打印语句\n * @param level\n * @param condition\n * @param format\n * @param args\n */\nexport function log(level: LEVEL, condition: boolean, format, ...args: any[]): void {\n  if (!condition) {\n    console[level](getMessage(format, ...args));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}