{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { regressionLinear, regressionExp, regressionLoess, regressionLog, regressionPoly, regressionPow, regressionQuad } from 'd3-regression';\nimport { isArray, get, isNumber } from '@antv/util';\nimport { getSplinePath } from '../../utils';\nvar REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad\n};\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\n\nexport function getQuadrantDefaultConfig(xBaseline, yBaseline) {\n  // 文本便宜距离\n  var textOffset = 10; // 四象限默认样式\n\n  var defaultConfig = {\n    regionStyle: [{\n      position: {\n        start: [xBaseline, 'max'],\n        end: ['max', yBaseline]\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', 'max'],\n        end: [xBaseline, yBaseline]\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', yBaseline],\n        end: [xBaseline, 'min']\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: [xBaseline, yBaseline],\n        end: ['max', 'min']\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1\n    },\n    labelStyle: [{\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }]\n  };\n  return defaultConfig;\n}\n\nvar splinePath = function (data, config) {\n  var view = config.view,\n      _a = config.options,\n      xField = _a.xField,\n      yField = _a.yField;\n  var xScaleView = view.getScaleByField(xField);\n  var yScaleView = view.getScaleByField(yField);\n  var pathData = data.map(function (d) {\n    return view.getCoordinate().convert({\n      x: xScaleView.scale(d[0]),\n      y: yScaleView.scale(d[1])\n    });\n  });\n  return getSplinePath(pathData, false);\n};\n\nexport var getPath = function (config) {\n  var options = config.options;\n  var xField = options.xField,\n      yField = options.yField,\n      data = options.data,\n      regressionLine = options.regressionLine;\n  var _a = regressionLine.type,\n      type = _a === void 0 ? 'linear' : _a,\n      algorithm = regressionLine.algorithm;\n  var pathData;\n\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n  } else {\n    var reg = REGRESSION_MAP[type]().x(function (d) {\n      return d[xField];\n    }).y(function (d) {\n      return d[yField];\n    });\n    pathData = reg(data);\n  }\n\n  return splinePath(pathData, config);\n};\n/**\n * 调整散点图 meta: { min, max } ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param options\n * @returns\n */\n\nexport var getMeta = function (options) {\n  var _a;\n\n  var _b = options.meta,\n      meta = _b === void 0 ? {} : _b,\n      xField = options.xField,\n      yField = options.yField,\n      data = options.data;\n  var xFieldValue = data[0][xField];\n  var yFieldValue = data[0][yField];\n  var xIsPositiveNumber = xFieldValue > 0;\n  var yIsPositiveNumber = yFieldValue > 0;\n  /**\n   * 获得对应字段的 min max scale 配置\n   */\n\n  function getMetaMinMax(field, axis) {\n    var fieldMeta = get(meta, [field]);\n\n    function getCustomValue(type) {\n      return get(fieldMeta, type);\n    }\n\n    var range = {};\n\n    if (axis === 'x') {\n      if (isNumber(xFieldValue)) {\n        if (!isNumber(getCustomValue('min'))) {\n          range['min'] = xIsPositiveNumber ? 0 : xFieldValue * 2;\n        }\n\n        if (!isNumber(getCustomValue('max'))) {\n          range['max'] = xIsPositiveNumber ? xFieldValue * 2 : 0;\n        }\n      }\n\n      return range;\n    }\n\n    if (isNumber(yFieldValue)) {\n      if (!isNumber(getCustomValue('min'))) {\n        range['min'] = yIsPositiveNumber ? 0 : yFieldValue * 2;\n      }\n\n      if (!isNumber(getCustomValue('max'))) {\n        range['max'] = yIsPositiveNumber ? yFieldValue * 2 : 0;\n      }\n    }\n\n    return range;\n  }\n\n  return __assign(__assign({}, meta), (_a = {}, _a[xField] = __assign(__assign({}, meta[xField]), getMetaMinMax(xField, 'x')), _a[yField] = __assign(__assign({}, meta[yField]), getMetaMinMax(yField, 'y')), _a));\n};","map":{"version":3,"mappings":"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","names":["regressionLinear","regressionExp","regressionLoess","regressionLog","regressionPoly","regressionPow","regressionQuad","isArray","get","isNumber","getSplinePath","REGRESSION_MAP","exp","linear","loess","log","poly","pow","quad","getQuadrantDefaultConfig","xBaseline","yBaseline","textOffset","defaultConfig","regionStyle","position","start","end","style","fill","opacity","lineStyle","stroke","lineWidth","labelStyle","offsetX","offsetY","textAlign","textBaseline","fontSize","splinePath","data","config","_a","xField","yField","xScaleView","view","getScaleByField","yScaleView","pathData","map","d","getCoordinate","convert","x","scale","y","getPath","options","regressionLine","algorithm","reg","type","getMeta","_b","xFieldValue","yFieldValue","xIsPositiveNumber","yIsPositiveNumber","getMetaMinMax","field","axis","fieldMeta","meta","getCustomValue","range","__assign"],"sourceRoot":"","sources":["../../../src/plots/scatter/util.ts"],"sourcesContent":["import {\n  regressionLinear,\n  regressionExp,\n  regressionLoess,\n  regressionLog,\n  regressionPoly,\n  regressionPow,\n  regressionQuad,\n} from 'd3-regression';\nimport { isArray, get, isNumber } from '@antv/util';\nimport { View } from '@antv/g2';\nimport { getSplinePath } from '../../utils';\nimport { ScatterOptions } from './types';\n\nconst REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad,\n};\n\ntype RenderOptions = {\n  view: View;\n  options: ScatterOptions;\n};\n\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\nexport function getQuadrantDefaultConfig(xBaseline: number, yBaseline: number) {\n  // 文本便宜距离\n  const textOffset = 10;\n  // 四象限默认样式\n  const defaultConfig: { [key: string]: any } = {\n    regionStyle: [\n      {\n        position: {\n          start: [xBaseline, 'max'],\n          end: ['max', yBaseline],\n        },\n        style: {\n          fill: '#d8d0c0',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: ['min', 'max'],\n          end: [xBaseline, yBaseline],\n        },\n        style: {\n          fill: '#a3dda1',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: ['min', yBaseline],\n          end: [xBaseline, 'min'],\n        },\n        style: {\n          fill: '#d8d0c0',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: [xBaseline, yBaseline],\n          end: ['max', 'min'],\n        },\n        style: {\n          fill: '#a3dda1',\n          opacity: 0.4,\n        },\n      },\n    ],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1,\n    },\n    labelStyle: [\n      {\n        position: ['max', yBaseline],\n        offsetX: -textOffset,\n        offsetY: -textOffset,\n        style: {\n          textAlign: 'right',\n          textBaseline: 'bottom',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['min', yBaseline],\n        offsetX: textOffset,\n        offsetY: -textOffset,\n        style: {\n          textAlign: 'left',\n          textBaseline: 'bottom',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['min', yBaseline],\n        offsetX: textOffset,\n        offsetY: textOffset,\n        style: {\n          textAlign: 'left',\n          textBaseline: 'top',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['max', yBaseline],\n        offsetX: -textOffset,\n        offsetY: textOffset,\n        style: {\n          textAlign: 'right',\n          textBaseline: 'top',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n    ],\n  };\n  return defaultConfig;\n}\n\nconst splinePath = (data: number[][], config: RenderOptions) => {\n  const {\n    view,\n    options: { xField, yField },\n  } = config;\n  const xScaleView = view.getScaleByField(xField);\n  const yScaleView = view.getScaleByField(yField);\n  const pathData = data.map((d: [number, number]) =>\n    view.getCoordinate().convert({ x: xScaleView.scale(d[0]), y: yScaleView.scale(d[1]) })\n  );\n  return getSplinePath(pathData, false);\n};\n\nexport const getPath = (config: RenderOptions) => {\n  const { options } = config;\n  const { xField, yField, data, regressionLine } = options;\n  const { type = 'linear', algorithm } = regressionLine;\n  let pathData: Array<[number, number]>;\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n  } else {\n    const reg = REGRESSION_MAP[type]()\n      .x((d) => d[xField])\n      .y((d) => d[yField]);\n    pathData = reg(data);\n  }\n  return splinePath(pathData, config);\n};\n\n/**\n * 调整散点图 meta: { min, max } ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param options\n * @returns\n */\nexport const getMeta = (\n  options: Pick<ScatterOptions, 'meta' | 'xField' | 'yField' | 'data'>\n): ScatterOptions['meta'] => {\n  const { meta = {}, xField, yField, data } = options;\n  const xFieldValue = data[0][xField];\n  const yFieldValue = data[0][yField];\n  const xIsPositiveNumber = xFieldValue > 0;\n  const yIsPositiveNumber = yFieldValue > 0;\n\n  /**\n   * 获得对应字段的 min max scale 配置\n   */\n  function getMetaMinMax(field: string, axis: 'x' | 'y') {\n    const fieldMeta = get(meta, [field]);\n\n    function getCustomValue(type: 'min' | 'max') {\n      return get(fieldMeta, type);\n    }\n\n    const range = {};\n\n    if (axis === 'x') {\n      if (isNumber(xFieldValue)) {\n        if (!isNumber(getCustomValue('min'))) {\n          range['min'] = xIsPositiveNumber ? 0 : xFieldValue * 2;\n        }\n\n        if (!isNumber(getCustomValue('max'))) {\n          range['max'] = xIsPositiveNumber ? xFieldValue * 2 : 0;\n        }\n      }\n\n      return range;\n    }\n\n    if (isNumber(yFieldValue)) {\n      if (!isNumber(getCustomValue('min'))) {\n        range['min'] = yIsPositiveNumber ? 0 : yFieldValue * 2;\n      }\n\n      if (!isNumber(getCustomValue('max'))) {\n        range['max'] = yIsPositiveNumber ? yFieldValue * 2 : 0;\n      }\n    }\n\n    return range;\n  }\n\n  return {\n    ...meta,\n    [xField]: {\n      ...meta[xField],\n      ...getMetaMinMax(xField, 'x'),\n    },\n    [yField]: {\n      ...meta[yField],\n      ...getMetaMinMax(yField, 'y'),\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}