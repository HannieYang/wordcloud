{"ast":null,"code":"import { isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getShapeAttrs } from './util';\nvar AreaShapeFactory = registerShapeFactory('area', {\n  defaultShapeType: 'area',\n  getDefaultPoints: function (pointInfo) {\n    // area 基本标记的绘制需要获取上下两边的顶点\n    var x = pointInfo.x,\n        y0 = pointInfo.y0;\n    var y = isArray(pointInfo.y) ? pointInfo.y : [y0, pointInfo.y];\n    return y.map(function (yItem) {\n      return {\n        x: x,\n        y: yItem\n      };\n    });\n  }\n}); // Area 几何标记默认的 shape：填充的区域图\n\nregisterShape('area', 'area', {\n  draw: function (cfg, container) {\n    var attrs = getShapeAttrs(cfg, false, false, this);\n    var shape = container.addShape({\n      type: 'path',\n      attrs: attrs,\n      name: 'area'\n    });\n    return shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: function (x, y, r) {\n        if (r === void 0) {\n          r = 5.5;\n        }\n\n        return [['M', x - r, y - 4], ['L', x + r, y - 4], ['L', x + r, y + 4], ['L', x - r, y + 4], ['Z']];\n      },\n      style: {\n        r: 5,\n        fill: color,\n        fillOpacity: 1\n      }\n    };\n  }\n});\nexport default AreaShapeFactory;","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAGA,SAASC,aAAT,EAAwBC,oBAAxB,QAAoD,SAApD;AACA,SAASC,aAAT,QAA8B,QAA9B;AAEA,IAAMC,gBAAgB,GAAGF,oBAAoB,CAAC,MAAD,EAAS;EACpDG,gBAAgB,EAAE,MADkC;EAEpDC,gBAAgB,EAAhB,UAAiBC,SAAjB,EAAsC;IACpC;IACQ,KAAC,GAASA,SAAS,EAAnB;IAAA,IAAGC,EAAE,GAAKD,SAAS,GAAnB;IACR,IAAME,CAAC,GAAGT,OAAO,CAACO,SAAS,CAACE,CAAX,CAAP,GAAuBF,SAAS,CAACE,CAAjC,GAAqC,CAACD,EAAD,EAAKD,SAAS,CAACE,CAAf,CAA/C;IAEA,OAAOA,CAAC,CAACC,GAAF,CAAM,UAACC,KAAD,EAAc;MACzB,OAAO;QACLC,CAAC,EAAEA,CADE;QAELH,CAAC,EAAEE;MAFE,CAAP;IAID,CALM,CAAP;EAMD;AAbmD,CAAT,CAA7C,C,CAgBA;;AACAV,aAAa,CAAC,MAAD,EAAS,MAAT,EAAiB;EAC5BY,IAAI,EAAJ,UAAKC,GAAL,EAAqBC,SAArB,EAAsC;IACpC,IAAMC,KAAK,GAAGb,aAAa,CAACW,GAAD,EAAM,KAAN,EAAa,KAAb,EAAoB,IAApB,CAA3B;IACA,IAAMG,KAAK,GAAGF,SAAS,CAACG,QAAV,CAAmB;MAC/BC,IAAI,EAAE,MADyB;MAE/BH,KAAK,OAF0B;MAG/BI,IAAI,EAAE;IAHyB,CAAnB,CAAd;IAMA,OAAOH,KAAP;EACD,CAV2B;EAW5BI,SAAS,EAAT,UAAUC,SAAV,EAAmC;IACzB,SAAK,GAAKA,SAAS,MAAnB;IACR,OAAO;MACLC,MAAM,EAAE,UAACX,CAAD,EAAYH,CAAZ,EAAuBe,CAAvB,EAAsC;QAAf;UAAAA;QAAe;;QAC5C,OAAO,CAAC,CAAC,GAAD,EAAMZ,CAAC,GAAGY,CAAV,EAAaf,CAAC,GAAG,CAAjB,CAAD,EAAsB,CAAC,GAAD,EAAMG,CAAC,GAAGY,CAAV,EAAaf,CAAC,GAAG,CAAjB,CAAtB,EAA2C,CAAC,GAAD,EAAMG,CAAC,GAAGY,CAAV,EAAaf,CAAC,GAAG,CAAjB,CAA3C,EAAgE,CAAC,GAAD,EAAMG,CAAC,GAAGY,CAAV,EAAaf,CAAC,GAAG,CAAjB,CAAhE,EAAqF,CAAC,GAAD,CAArF,CAAP;MACD,CAHI;MAILgB,KAAK,EAAE;QACLD,CAAC,EAAE,CADE;QAELE,IAAI,EAAEC,KAFD;QAGLC,WAAW,EAAE;MAHR;IAJF,CAAP;EAUD;AAvB2B,CAAjB,CAAb;AA0BA,eAAexB,gBAAf","names":["isArray","registerShape","registerShapeFactory","getShapeAttrs","AreaShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","y0","y","map","yItem","x","draw","cfg","container","attrs","shape","addShape","type","name","getMarker","markerCfg","symbol","r","style","fill","color","fillOpacity"],"sourceRoot":"","sources":["../../../../src/geometry/shape/area/index.ts"],"sourcesContent":["import { isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getShapeAttrs } from './util';\n\nconst AreaShapeFactory = registerShapeFactory('area', {\n  defaultShapeType: 'area',\n  getDefaultPoints(pointInfo: ShapePoint): Point[] {\n    // area 基本标记的绘制需要获取上下两边的顶点\n    const { x, y0 } = pointInfo;\n    const y = isArray(pointInfo.y) ? pointInfo.y : [y0, pointInfo.y];\n\n    return y.map((yItem: number) => {\n      return {\n        x: x as number,\n        y: yItem,\n      };\n    });\n  },\n});\n\n// Area 几何标记默认的 shape：填充的区域图\nregisterShape('area', 'area', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const attrs = getShapeAttrs(cfg, false, false, this);\n    const shape = container.addShape({\n      type: 'path',\n      attrs,\n      name: 'area',\n    });\n\n    return shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: (x: number, y: number, r: number = 5.5) => {\n        return [['M', x - r, y - 4], ['L', x + r, y - 4], ['L', x + r, y + 4], ['L', x - r, y + 4], ['Z']];\n      },\n      style: {\n        r: 5,\n        fill: color,\n        fillOpacity: 1,\n      },\n    };\n  },\n});\n\nexport default AreaShapeFactory;\n"]},"metadata":{},"sourceType":"module"}