{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign, findViewById } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { syncViewPadding, transformData, isHorizontal } from './utils';\nimport { SERIES_FIELD_KEY, FIRST_AXES_VIEW, SECOND_AXES_VIEW } from './constant';\n\nvar BidirectionalBar =\n/** @class */\nfunction (_super) {\n  __extends(BidirectionalBar, _super);\n\n  function BidirectionalBar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'bidirectional-bar';\n    return _this;\n  }\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n\n\n  BidirectionalBar.getDefaultOptions = function () {\n    return deepAssign({}, _super.getDefaultOptions.call(this), {\n      syncViewPadding: syncViewPadding\n    });\n  };\n  /**\n   * @override\n   */\n\n\n  BidirectionalBar.prototype.changeData = function (data) {\n    if (data === void 0) {\n      data = [];\n    }\n\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)); // 更新options\n\n    this.updateOption({\n      data: data\n    });\n    var _a = this.options,\n        xField = _a.xField,\n        yField = _a.yField,\n        layout = _a.layout; // 处理数据\n\n    var groupData = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    var firstViewData = groupData[0],\n        secondViewData = groupData[1];\n    var firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    var secondView = findViewById(this.chart, SECOND_AXES_VIEW); // 更新对应view的data\n\n    firstView.data(firstViewData);\n    secondView.data(secondViewData); // 重新渲染\n\n    this.chart.render(true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n\n  BidirectionalBar.prototype.getDefaultOptions = function () {\n    return BidirectionalBar.getDefaultOptions();\n  };\n  /**\n   * 获取对称条形图的适配器\n   */\n\n\n  BidirectionalBar.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /** 对称条形图分类字段 */\n\n\n  BidirectionalBar.SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n  return BidirectionalBar;\n}(Plot);\n\nexport { BidirectionalBar };","map":{"version":3,"mappings":";AAAA,SAASA,gBAAT,EAA2BC,KAA3B,QAAwC,UAAxC;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,aAAzC;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,YAAzC,QAA6D,SAA7D;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,gBAA5C,QAAoE,YAApE;;AAIA;AAAA;AAAA;EAAsCC;;EAAtC;IAAA;IAcE;;;IACOC,aAAe,mBAAf;;EAyCR;EAvDC;;;;;;EAIOC,qCAAP;IACE,OAAOX,UAAU,CAAC,EAAD,EAAKY,OAAMC,iBAAN,CAAuBC,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;MAC/CX,eAAe;IADgC,CAAhC,CAAjB;EAGD,CAJM;EAYP;;;;;EAGOQ,wCAAP,UAAkBI,IAAlB,EAA2B;IAAT;MAAAA;IAAS;;IACzB,KAAKC,KAAL,CAAWC,IAAX,CACEpB,gBAAgB,CAACqB,kBADnB,EAEEpB,KAAK,CAACqB,QAAN,CAAe,KAAKH,KAApB,EAA2BnB,gBAAgB,CAACqB,kBAA5C,EAAgE,IAAhE,CAFF,EADyB,CAMzB;;IACA,KAAKE,YAAL,CAAkB;MAAEL,IAAI;IAAN,CAAlB;IACM,SAA6B,KAAKM,OAAlC;IAAA,IAAEC,MAAM,YAAR;IAAA,IAAUC,MAAM,YAAhB;IAAA,IAAkBC,MAAM,YAAxB,CARmB,CASzB;;IACA,IAAMC,SAAS,GAAUrB,aAAa,CAACkB,MAAD,EAASC,MAAT,EAAiBjB,gBAAjB,EAAmCS,IAAnC,EAAyCV,YAAY,CAACmB,MAAD,CAArD,CAAtC;IACO,iBAAa,GAAoBC,SAAS,GAA1C;IAAA,IAAeC,cAAc,GAAID,SAAS,GAA1C;IACP,IAAME,SAAS,GAAG1B,YAAY,CAAC,KAAKe,KAAN,EAAaT,eAAb,CAA9B;IACA,IAAMqB,UAAU,GAAG3B,YAAY,CAAC,KAAKe,KAAN,EAAaR,gBAAb,CAA/B,CAbyB,CAczB;;IACAmB,SAAS,CAACZ,IAAV,CAAec,aAAf;IACAD,UAAU,CAACb,IAAX,CAAgBW,cAAhB,EAhByB,CAiBzB;;IACA,KAAKV,KAAL,CAAWc,MAAX,CAAkB,IAAlB;IAEA,KAAKd,KAAL,CAAWC,IAAX,CACEpB,gBAAgB,CAACkC,iBADnB,EAEEjC,KAAK,CAACqB,QAAN,CAAe,KAAKH,KAApB,EAA2BnB,gBAAgB,CAACkC,iBAA5C,EAA+D,IAA/D,CAFF;EAID,CAxBM;;EA0BGpB,+CAAV;IACE,OAAOA,gBAAgB,CAACE,iBAAjB,EAAP;EACD,CAFS;EAIV;;;;;EAGUF,8CAAV;IACE,OAAOT,OAAP;EACD,CAFS;EA1CV;;;EACOS,oCAAmBL,gBAAnB;EA4CT;AAAC,CAxDD,CAAsCP,IAAtC;;SAAaY","names":["VIEW_LIFE_CIRCLE","Event","Plot","deepAssign","findViewById","adaptor","syncViewPadding","transformData","isHorizontal","SERIES_FIELD_KEY","FIRST_AXES_VIEW","SECOND_AXES_VIEW","__extends","_this","BidirectionalBar","_super","getDefaultOptions","call","data","chart","emit","BEFORE_CHANGE_DATA","fromData","updateOption","options","xField","yField","layout","groupData","secondViewData","firstView","secondView","firstViewData","render","AFTER_CHANGE_DATA"],"sourceRoot":"","sources":["../../../src/plots/bidirectional-bar/index.ts"],"sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { deepAssign, findViewById } from '../../utils';\nimport { BidirectionalBarOptions } from './types';\nimport { adaptor } from './adaptor';\nimport { syncViewPadding, transformData, isHorizontal } from './utils';\nimport { SERIES_FIELD_KEY, FIRST_AXES_VIEW, SECOND_AXES_VIEW } from './constant';\n\nexport type { BidirectionalBarOptions };\n\nexport class BidirectionalBar extends Plot<BidirectionalBarOptions> {\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<BidirectionalBarOptions> {\n    return deepAssign({}, super.getDefaultOptions(), {\n      syncViewPadding,\n    });\n  }\n\n  /** 对称条形图分类字段 */\n  static SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n\n  /** 图表类型 */\n  public type: string = 'bidirectional-bar';\n\n  /**\n   * @override\n   */\n  public changeData(data = []) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n\n    // 更新options\n    this.updateOption({ data });\n    const { xField, yField, layout } = this.options;\n    // 处理数据\n    const groupData: any[] = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    const [firstViewData, secondViewData] = groupData;\n    const firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    const secondView = findViewById(this.chart, SECOND_AXES_VIEW);\n    // 更新对应view的data\n    firstView.data(firstViewData);\n    secondView.data(secondViewData);\n    // 重新渲染\n    this.chart.render(true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  protected getDefaultOptions() {\n    return BidirectionalBar.getDefaultOptions();\n  }\n\n  /**\n   * 获取对称条形图的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<BidirectionalBarOptions> {\n    return adaptor;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}