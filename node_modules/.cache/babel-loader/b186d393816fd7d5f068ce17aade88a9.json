{"ast":null,"code":"import { vec2 } from '@antv/matrix-util';\nexport function points2Path(points, isInCircle) {\n  var path = [];\n\n  if (points.length) {\n    path.push(['M', points[0].x, points[0].y]);\n\n    for (var i = 1, length_1 = points.length; i < length_1; i += 1) {\n      var item = points[i];\n      path.push(['L', item.x, item.y]);\n    }\n\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  }\n\n  return path;\n}\n/**\n * @ignore\n * 计算光滑的贝塞尔曲线\n */\n\nexport var smoothBezier = function (points, smooth, isLoop, constraint) {\n  var cps = [];\n  var prevPoint;\n  var nextPoint;\n  var hasConstraint = !!constraint;\n  var min;\n  var max;\n\n  if (hasConstraint) {\n    min = [Infinity, Infinity];\n    max = [-Infinity, -Infinity];\n\n    for (var i = 0, l = points.length; i < l; i++) {\n      var point = points[i];\n      min = vec2.min([0, 0], min, point);\n      max = vec2.max([0, 0], max, point);\n    }\n\n    min = vec2.min([0, 0], min, constraint[0]);\n    max = vec2.max([0, 0], max, constraint[1]);\n  }\n\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n\n    if (isLoop) {\n      prevPoint = points[i ? i - 1 : len - 1];\n      nextPoint = points[(i + 1) % len];\n    } else {\n      if (i === 0 || i === len - 1) {\n        cps.push(point);\n        continue;\n      } else {\n        prevPoint = points[i - 1];\n        nextPoint = points[i + 1];\n      }\n    }\n\n    var v = [0, 0];\n    v = vec2.sub(v, nextPoint, prevPoint);\n    v = vec2.scale(v, v, smooth);\n    var d0 = vec2.distance(point, prevPoint);\n    var d1 = vec2.distance(point, nextPoint);\n    var sum = d0 + d1;\n\n    if (sum !== 0) {\n      d0 /= sum;\n      d1 /= sum;\n    }\n\n    var v1 = vec2.scale([0, 0], v, -d0);\n    var v2 = vec2.scale([0, 0], v, d1);\n    var cp0 = vec2.add([0, 0], point, v1);\n    var cp1 = vec2.add([0, 0], point, v2);\n\n    if (hasConstraint) {\n      cp0 = vec2.max([0, 0], cp0, min);\n      cp0 = vec2.min([0, 0], cp0, max);\n      cp1 = vec2.max([0, 0], cp1, min);\n      cp1 = vec2.min([0, 0], cp1, max);\n    }\n\n    cps.push(cp0);\n    cps.push(cp1);\n  }\n\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n\n  return cps;\n};\n/**\n * @ignore\n * 贝塞尔曲线\n */\n\nexport function catmullRom2bezier(crp, z, constraint) {\n  var isLoop = !!z;\n  var pointList = [];\n\n  for (var i = 0, l = crp.length; i < l; i += 2) {\n    pointList.push([crp[i], crp[i + 1]]);\n  }\n\n  var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  var len = pointList.length;\n  var d1 = [];\n  var cp1;\n  var cp2;\n  var p;\n\n  for (var i = 0; i < len - 1; i++) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    p = pointList[0];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n\n  return d1;\n}\n/**\n * @ignore\n * 根据关键点获取限定了范围的平滑线\n */\n\nexport function getSplinePath(points, isInCircle, constaint) {\n  var data = [];\n  var first = points[0];\n  var prePoint = null;\n\n  if (points.length <= 2) {\n    // 两点以内直接绘制成路径\n    return points2Path(points, isInCircle);\n  }\n\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n\n    if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {\n      data.push(point.x);\n      data.push(point.y);\n      prePoint = point;\n    }\n  }\n\n  var constraint = constaint || [// 范围\n  [0, 0], [1, 1]];\n  var splinePath = catmullRom2bezier(data, isInCircle, constraint);\n  splinePath.unshift(['M', first.x, first.y]);\n  return splinePath;\n}","map":{"version":3,"mappings":"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","names":["vec2","points2Path","points","isInCircle","path","length","push","x","y","i","length_1","item","smoothBezier","smooth","isLoop","constraint","cps","prevPoint","nextPoint","hasConstraint","min","max","Infinity","l","point","len","v","sub","scale","d0","distance","d1","sum","v1","v2","cp0","add","cp1","shift","catmullRom2bezier","crp","z","pointList","controlPointList","cp2","p","getSplinePath","constaint","data","first","prePoint","splinePath","unshift"],"sourceRoot":"","sources":["../../src/utils/path.ts"],"sourcesContent":["import { vec2 } from '@antv/matrix-util';\nimport { Position, Point } from '../types/common';\n\nexport function points2Path(points: Point[], isInCircle: boolean) {\n  const path = [];\n  if (points.length) {\n    path.push(['M', points[0].x, points[0].y]);\n    for (let i = 1, length = points.length; i < length; i += 1) {\n      const item = points[i];\n      path.push(['L', item.x, item.y]);\n    }\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  }\n  return path;\n}\n\n/**\n * @ignore\n * 计算光滑的贝塞尔曲线\n */\nexport const smoothBezier = (\n  points: Position[],\n  smooth: number,\n  isLoop: boolean,\n  constraint: Position[]\n): Position[] => {\n  const cps = [];\n  let prevPoint: Position;\n  let nextPoint: Position;\n  const hasConstraint = !!constraint;\n  let min: Position;\n  let max: Position;\n  if (hasConstraint) {\n    min = [Infinity, Infinity];\n    max = [-Infinity, -Infinity];\n\n    for (let i = 0, l = points.length; i < l; i++) {\n      const point = points[i];\n      min = vec2.min([0, 0], min, point) as [number, number];\n      max = vec2.max([0, 0], max, point) as [number, number];\n    }\n    min = vec2.min([0, 0], min, constraint[0]) as [number, number];\n    max = vec2.max([0, 0], max, constraint[1]) as [number, number];\n  }\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (isLoop) {\n      prevPoint = points[i ? i - 1 : len - 1];\n      nextPoint = points[(i + 1) % len];\n    } else {\n      if (i === 0 || i === len - 1) {\n        cps.push(point);\n        continue;\n      } else {\n        prevPoint = points[i - 1];\n        nextPoint = points[i + 1];\n      }\n    }\n    let v: [number, number] = [0, 0];\n    v = vec2.sub(v, nextPoint, prevPoint) as [number, number];\n    v = vec2.scale(v, v, smooth) as [number, number];\n\n    let d0 = vec2.distance(point, prevPoint);\n    let d1 = vec2.distance(point, nextPoint);\n\n    const sum = d0 + d1;\n    if (sum !== 0) {\n      d0 /= sum;\n      d1 /= sum;\n    }\n\n    const v1 = vec2.scale([0, 0], v, -d0);\n    const v2 = vec2.scale([0, 0], v, d1);\n\n    let cp0 = vec2.add([0, 0], point, v1);\n    let cp1 = vec2.add([0, 0], point, v2);\n\n    if (hasConstraint) {\n      cp0 = vec2.max([0, 0], cp0, min);\n      cp0 = vec2.min([0, 0], cp0, max);\n      cp1 = vec2.max([0, 0], cp1, min);\n      cp1 = vec2.min([0, 0], cp1, max);\n    }\n\n    cps.push(cp0);\n    cps.push(cp1);\n  }\n\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n  return cps;\n};\n\n/**\n * @ignore\n * 贝塞尔曲线\n */\nexport function catmullRom2bezier(crp: number[], z: boolean, constraint: Position[]) {\n  const isLoop = !!z;\n  const pointList = [];\n  for (let i = 0, l = crp.length; i < l; i += 2) {\n    pointList.push([crp[i], crp[i + 1]]);\n  }\n\n  const controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  const len = pointList.length;\n  const d1 = [];\n\n  let cp1: Position;\n  let cp2: Position;\n  let p: Position;\n\n  for (let i = 0; i < len - 1; i++) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    p = pointList[0];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n  return d1;\n}\n\n/**\n * @ignore\n * 根据关键点获取限定了范围的平滑线\n */\nexport function getSplinePath(points: Point[], isInCircle?: boolean, constaint?: Position[]) {\n  const data = [];\n  const first = points[0];\n  let prePoint = null;\n  if (points.length <= 2) {\n    // 两点以内直接绘制成路径\n    return points2Path(points, isInCircle);\n  }\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {\n      data.push(point.x);\n      data.push(point.y);\n      prePoint = point;\n    }\n  }\n  const constraint = constaint || [\n    // 范围\n    [0, 0],\n    [1, 1],\n  ];\n  const splinePath = catmullRom2bezier(data, isInCircle, constraint);\n  splinePath.unshift(['M', first.x, first.y]);\n  return splinePath;\n}\n"]},"metadata":{},"sourceType":"module"}