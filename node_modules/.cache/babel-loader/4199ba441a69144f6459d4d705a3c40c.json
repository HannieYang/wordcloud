{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { isFunction, get } from '@antv/util';\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { transform } from './utils';\nimport { WORD_CLOUD_COLOR_FIELD } from './constant';\n/**\n * geometry 配置处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var colorField = options.colorField,\n      color = options.color;\n  var data = transform(params);\n  chart.data(data);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField && WORD_CLOUD_COLOR_FIELD,\n      rawFields: isFunction(color) && __spreadArrays(get(options, 'rawFields', []), ['datum']),\n      point: {\n        color: color,\n        shape: 'word-cloud'\n      }\n    }\n  });\n  var ext = point(p).ext;\n  ext.geometry.label(false);\n  chart.coordinate().reflect('y');\n  chart.axis(false);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  return flow(scale({\n    x: {\n      nice: false\n    },\n    y: {\n      nice: false\n    }\n  }))(params);\n}\n/**\n * 词云图 legend 配置\n * @param params\n */\n\n\nexport function legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField) {\n    chart.legend(WORD_CLOUD_COLOR_FIELD, legend);\n  }\n\n  return params;\n}\n/**\n * 词云图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(geometry, meta, tooltip, legend, interaction, animation, theme, state)(params);\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,YAAhC;AAEA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,SAA/B,EAA0CC,KAA1C,EAAiDC,KAAjD,EAAwDC,KAAxD,QAAqE,sBAArE;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,aAAjC;AACA,SAASC,KAAT,QAAsB,0BAAtB;AAEA,SAASC,SAAT,QAA0B,SAA1B;AACA,SAASC,sBAAT,QAAuC,YAAvC;AAEA;;;;;AAIA,SAASC,QAAT,CAAkBC,MAAlB,EAAkD;EACxC,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,cAAU,GAAYC,OAAO,WAA7B;EAAA,IAAYC,KAAK,GAAKD,OAAO,MAA7B;EACR,IAAME,IAAI,GAAGN,SAAS,CAACG,MAAD,CAAtB;EAEAI,KAAK,CAACD,IAAN,CAAWA,IAAX;EAEA,IAAME,CAAC,GAAGV,UAAU,CAAC,EAAD,EAAKK,MAAL,EAAa;IAC/BC,OAAO,EAAE;MACPK,MAAM,EAAE,GADD;MAEPC,MAAM,EAAE,GAFD;MAGPC,WAAW,EAAEC,UAAU,IAAIX,sBAHpB;MAIPY,SAAS,EAAExB,UAAU,CAACgB,KAAD,CAAV,IAAiBS,eAAQxB,GAAG,CAACc,OAAD,EAAU,WAAV,EAAuB,EAAvB,CAAX,EAAqC,CAAE,OAAF,CAArC,CAJrB;MAKPL,KAAK,EAAE;QACLM,KAAK,OADA;QAELU,KAAK,EAAE;MAFF;IALA;EADsB,CAAb,CAApB;EAaQ,OAAG,GAAKhB,KAAK,CAACS,CAAD,CAAL,CAAQQ,GAAhB;EACRA,GAAG,CAACd,QAAJ,CAAae,KAAb,CAAmB,KAAnB;EAEAV,KAAK,CAACW,UAAN,GAAmBC,OAAnB,CAA2B,GAA3B;EACAZ,KAAK,CAACa,IAAN,CAAW,KAAX;EAEA,OAAOjB,MAAP;AACD;AAED;;;;;;AAIA,SAASkB,IAAT,CAAclB,MAAd,EAA8C;EAC5C,OAAON,IAAI,CACTF,KAAK,CAAC;IACJ2B,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAR,CADC;IAEJC,CAAC,EAAE;MAAED,IAAI,EAAE;IAAR;EAFC,CAAD,CADI,CAAJ,CAKLpB,MALK,CAAP;AAMD;AAED;;;;;;AAIA,OAAM,SAAUsB,MAAV,CAAiBtB,MAAjB,EAAiD;EAC7C,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,UAAM,GAAiBC,OAAO,OAA9B;EAAA,IAAQQ,UAAU,GAAKR,OAAO,WAA9B;;EAER,IAAIqB,MAAM,KAAK,KAAf,EAAsB;IACpBlB,KAAK,CAACkB,MAAN,CAAa,KAAb;EACD,CAFD,MAEO,IAAIb,UAAJ,EAAgB;IACrBL,KAAK,CAACkB,MAAN,CAAaxB,sBAAb,EAAqCwB,MAArC;EACD;;EAED,OAAOtB,MAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUuB,OAAV,CAAkBvB,MAAlB,EAAkD;EACtD;EACAN,IAAI,CAACK,QAAD,EAAWmB,IAAX,EAAiB9B,OAAjB,EAA0BkC,MAA1B,EAAkCjC,WAAlC,EAA+CC,SAA/C,EAA0DC,KAA1D,EAAiEE,KAAjE,CAAJ,CAA4EO,MAA5E;AACD","names":["isFunction","get","tooltip","interaction","animation","theme","scale","state","flow","deepAssign","point","transform","WORD_CLOUD_COLOR_FIELD","geometry","params","options","color","data","chart","p","xField","yField","seriesField","colorField","rawFields","__spreadArrays","shape","ext","label","coordinate","reflect","axis","meta","x","nice","y","legend","adaptor"],"sourceRoot":"","sources":["../../../src/plots/word-cloud/adaptor.ts"],"sourcesContent":["import { isFunction, get } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { WordCloudOptions } from './types';\nimport { transform } from './utils';\nimport { WORD_CLOUD_COLOR_FIELD } from './constant';\n\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  const { chart, options } = params;\n  const { colorField, color } = options;\n  const data = transform(params);\n\n  chart.data(data);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField && WORD_CLOUD_COLOR_FIELD,\n      rawFields: isFunction(color) && [...get(options, 'rawFields', []), 'datum'],\n      point: {\n        color,\n        shape: 'word-cloud',\n      },\n    },\n  });\n\n  const { ext } = point(p);\n  ext.geometry.label(false);\n\n  chart.coordinate().reflect('y');\n  chart.axis(false);\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  return flow(\n    scale({\n      x: { nice: false },\n      y: { nice: false },\n    })\n  )(params);\n}\n\n/**\n * 词云图 legend 配置\n * @param params\n */\nexport function legend(params: Params<WordCloudOptions>): Params<WordCloudOptions> {\n  const { chart, options } = params;\n  const { legend, colorField } = options;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField) {\n    chart.legend(WORD_CLOUD_COLOR_FIELD, legend);\n  }\n\n  return params;\n}\n\n/**\n * 词云图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<WordCloudOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(geometry, meta, tooltip, legend, interaction, animation, theme, state)(params);\n}\n"]},"metadata":{},"sourceType":"module"}