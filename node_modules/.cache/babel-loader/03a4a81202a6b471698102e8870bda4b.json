{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, some } from '@antv/util';\nimport ListState from './list-state';\nvar STATUS_UNCHECKED = 'unchecked';\nvar STATUS_CHECKED = 'checked';\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\n\nvar ListChecked =\n/** @class */\nfunction (_super) {\n  __extends(ListChecked, _super);\n\n  function ListChecked() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stateName = STATUS_CHECKED;\n    return _this;\n  } // 单个 item 设置状态\n\n\n  ListChecked.prototype.setItemState = function (list, item, enable) {\n    this.setCheckedBy(list, function (el) {\n      return el === item;\n    }, enable);\n  }; // 根据条件设置 checked\n\n\n  ListChecked.prototype.setCheckedBy = function (list, callback, enable) {\n    var items = list.getItems();\n\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  };\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n\n\n  ListChecked.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo && triggerInfo.item) {\n      var list_1 = triggerInfo.list,\n          item = triggerInfo.item; // 不知道 🤷‍♀️ 只认 unchecked status\n\n      var allChecked = !some(list_1.getItems(), function (t) {\n        return list_1.hasState(t, STATUS_UNCHECKED);\n      }); //\n\n      if (allChecked || list_1.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list_1, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  };\n  /**\n   * checked 图例项\n   */\n\n\n  ListChecked.prototype.checked = function () {\n    this.setState();\n  };\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n\n\n  ListChecked.prototype.reset = function () {\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  };\n\n  return ListChecked;\n}(ListState);\n\nexport default ListChecked;","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,YAA3B;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,IAAMC,gBAAgB,GAAG,WAAzB;AACA,IAAMC,cAAc,GAAG,SAAvB;AAGA;;;;;;;;AAOA;AAAA;AAAA;EAA0BC;;EAA1B;IAAA;;IACYC,kBAAoBF,cAApB;;EAiEX,CAlED,CAGE;;;EACUG,qCAAV,UAAuBC,IAAvB,EAAoCC,IAApC,EAAoDC,MAApD,EAAmE;IACjE,KAAKC,YAAL,CAAkBH,IAAlB,EAAwB,UAACI,EAAD,EAAG;MAAK,SAAE,KAAKH,IAAP;IAAW,CAA3C,EAA6CC,MAA7C;EACD,CAFS,CAJZ,CAQE;;;EACQH,qCAAR,UAAqBC,IAArB,EAAkCK,QAAlC,EAA2DH,MAA3D,EAA0E;IACxE,IAAMI,KAAK,GAAGN,IAAI,CAACO,QAAL,EAAd;;IACA,IAAIL,MAAJ,EAAY;MACV;MACAV,IAAI,CAACc,KAAD,EAAQ,UAACL,IAAD,EAAK;QACf,IAAII,QAAQ,CAACJ,IAAD,CAAZ,EAAoB;UAClB,IAAID,IAAI,CAACQ,QAAL,CAAcP,IAAd,EAAoBN,gBAApB,CAAJ,EAA2C;YACzCK,IAAI,CAACS,YAAL,CAAkBR,IAAlB,EAAwBN,gBAAxB,EAA0C,KAA1C;UACD;;UACDK,IAAI,CAACS,YAAL,CAAkBR,IAAlB,EAAwBL,cAAxB,EAAwC,IAAxC;QACD,CALD,MAKO,IAAI,CAACI,IAAI,CAACQ,QAAL,CAAcP,IAAd,EAAoBL,cAApB,CAAL,EAA0C;UAC/CI,IAAI,CAACS,YAAL,CAAkBR,IAAlB,EAAwBN,gBAAxB,EAA0C,IAA1C;QACD;MACF,CATG,CAAJ;IAUD;EACF,CAfO;EAiBR;;;;;;;;EAMOI,+BAAP;IACE,IAAMW,WAAW,GAAG,KAAKC,kBAAL,EAApB;;IACA,IAAID,WAAW,IAAIA,WAAW,CAACT,IAA/B,EAAqC;MAC3B,UAAI,GAAWS,WAAW,KAA1B;MAAA,IAAMT,IAAI,GAAKS,WAAW,KAA1B,CAD2B,CAGnC;;MACA,IAAME,UAAU,GAAG,CAACnB,IAAI,CAACoB,MAAI,CAACN,QAAL,EAAD,EAAkB,UAACO,CAAD,EAAE;QAAK,aAAI,CAACN,QAAL,CAAcM,CAAd,EAAiBnB,gBAAjB;MAAkC,CAA3D,CAAxB,CAJmC,CAMnC;;MACA,IAAIiB,UAAU,IAAIC,MAAI,CAACL,QAAL,CAAcP,IAAd,EAAoBN,gBAApB,CAAlB,EAAyD;QACvD,KAAKc,YAAL,CAAkBI,MAAlB,EAAwBZ,IAAxB,EAA8B,IAA9B;MACD,CAFD,MAEO;QACL,KAAKc,KAAL;MACD;IACF;EACF,CAfM;EAiBP;;;;;EAGOhB,gCAAP;IACE,KAAKiB,QAAL;EACD,CAFM;EAIP;;;;;EAGOjB,8BAAP;IACE,IAAMkB,UAAU,GAAG,KAAKC,kBAAL,EAAnB;IACA1B,IAAI,CAACyB,UAAD,EAAa,UAACE,SAAD,EAAU;MACzBA,SAAS,CAACC,eAAV,CAA0BxB,cAA1B;MACAuB,SAAS,CAACC,eAAV,CAA0BzB,gBAA1B;IACD,CAHG,CAAJ;EAID,CANM;;EAOT;AAAC,CAlED,CAA0BD,SAA1B;;AAoEA,eAAeK,WAAf","names":["each","some","ListState","STATUS_UNCHECKED","STATUS_CHECKED","__extends","_this","ListChecked","list","item","enable","setCheckedBy","el","callback","items","getItems","hasState","setItemState","triggerInfo","getTriggerListInfo","allChecked","list_1","t","reset","setState","components","getAllowComponents","component","clearItemsState"],"sourceRoot":"","sources":["../../../../src/interaction/action/component/list-checked.ts"],"sourcesContent":["import { each, some } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport ListState from './list-state';\n\nconst STATUS_UNCHECKED = 'unchecked';\nconst STATUS_CHECKED = 'checked';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nclass ListChecked extends ListState {\n  protected stateName: string = STATUS_CHECKED;\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    this.setCheckedBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 checked\n  private setCheckedBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  }\n\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      const allChecked = !some(list.getItems(), (t) => list.hasState(t, STATUS_UNCHECKED));\n\n      //\n      if (allChecked || list.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  }\n\n  /**\n   * checked 图例项\n   */\n  public checked() {\n    this.setState();\n  }\n\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  public reset() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  }\n}\n\nexport default ListChecked;\n"]},"metadata":{},"sourceType":"module"}