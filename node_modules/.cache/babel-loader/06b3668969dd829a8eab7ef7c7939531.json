{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Action from '../base';\nimport { distance } from '../util';\nvar DISTANCE = 4; // 移动的最小距离\n\n/**\n * @ignore\n * View 支持 Drag 的 Action\n */\n\nvar Drag =\n/** @class */\nfunction (_super) {\n  __extends(Drag, _super);\n\n  function Drag() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // Action 开始，不等同于 拖拽开始，需要判定移动的范围\n\n\n    _this.starting = false; // 拖拽开始\n\n    _this.dragStart = false;\n    return _this;\n  }\n  /**\n   * 开始\n   */\n\n\n  Drag.prototype.start = function () {\n    this.starting = true;\n    this.startPoint = this.context.getCurrentPoint();\n  };\n  /**\n   * 拖拽\n   */\n\n\n  Drag.prototype.drag = function () {\n    if (!this.startPoint) {\n      return;\n    }\n\n    var current = this.context.getCurrentPoint();\n    var view = this.context.view;\n    var event = this.context.event;\n\n    if (!this.dragStart) {\n      if (distance(current, this.startPoint) > DISTANCE) {\n        view.emit('dragstart', {\n          target: event.target,\n          x: event.x,\n          y: event.y\n        });\n        this.dragStart = true;\n      }\n    } else {\n      view.emit('drag', {\n        target: event.target,\n        x: event.x,\n        y: event.y\n      });\n    }\n  };\n  /**\n   * 结束\n   */\n\n\n  Drag.prototype.end = function () {\n    if (this.dragStart) {\n      var view = this.context.view;\n      var event_1 = this.context.event;\n      view.emit('dragend', {\n        target: event_1.target,\n        x: event_1.x,\n        y: event_1.y\n      });\n    }\n\n    this.starting = false;\n    this.dragStart = false;\n  };\n\n  return Drag;\n}(Action);\n\nexport default Drag;","map":{"version":3,"mappings":";AACA,OAAOA,MAAP,MAAmB,SAAnB;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,IAAMC,QAAQ,GAAG,CAAjB,C,CAAoB;;AAEpB;;;;;AAIA;AAAA;AAAA;EAAmBC;;EAAnB;IAAA,sEACE;;;IACUC,iBAAW,KAAX,CAFZ,CAGE;;IACUA,kBAAY,KAAZ;;EAwDX;EApDC;;;;;EAGOC,uBAAP;IACE,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,UAAL,GAAkB,KAAKC,OAAL,CAAaC,eAAb,EAAlB;EACD,CAHM;EAKP;;;;;EAGOJ,sBAAP;IACE,IAAI,CAAC,KAAKE,UAAV,EAAsB;MACpB;IACD;;IACD,IAAMG,OAAO,GAAG,KAAKF,OAAL,CAAaC,eAAb,EAAhB;IACA,IAAME,IAAI,GAAG,KAAKH,OAAL,CAAaG,IAA1B;IACA,IAAMC,KAAK,GAAG,KAAKJ,OAAL,CAAaI,KAA3B;;IACA,IAAI,CAAC,KAAKC,SAAV,EAAqB;MACnB,IAAIZ,QAAQ,CAACS,OAAD,EAAU,KAAKH,UAAf,CAAR,GAAqCL,QAAzC,EAAmD;QACjDS,IAAI,CAACG,IAAL,CAAU,WAAV,EAAuB;UACrBC,MAAM,EAAEH,KAAK,CAACG,MADO;UAErBC,CAAC,EAAEJ,KAAK,CAACI,CAFY;UAGrBC,CAAC,EAAEL,KAAK,CAACK;QAHY,CAAvB;QAKA,KAAKJ,SAAL,GAAiB,IAAjB;MACD;IACF,CATD,MASO;MACLF,IAAI,CAACG,IAAL,CAAU,MAAV,EAAkB;QAChBC,MAAM,EAAEH,KAAK,CAACG,MADE;QAEhBC,CAAC,EAAEJ,KAAK,CAACI,CAFO;QAGhBC,CAAC,EAAEL,KAAK,CAACK;MAHO,CAAlB;IAKD;EACF,CAvBM;EAyBP;;;;;EAGOZ,qBAAP;IACE,IAAI,KAAKQ,SAAT,EAAoB;MAClB,IAAMF,IAAI,GAAG,KAAKH,OAAL,CAAaG,IAA1B;MACA,IAAMO,OAAK,GAAG,KAAKV,OAAL,CAAaI,KAA3B;MACAD,IAAI,CAACG,IAAL,CAAU,SAAV,EAAqB;QACnBC,MAAM,EAAEG,OAAK,CAACH,MADK;QAEnBC,CAAC,EAAEE,OAAK,CAACF,CAFU;QAGnBC,CAAC,EAAEC,OAAK,CAACD;MAHU,CAArB;IAKD;;IACD,KAAKX,QAAL,GAAgB,KAAhB;IACA,KAAKO,SAAL,GAAiB,KAAjB;EACD,CAZM;;EAaT;AAAC,CA5DD,CAAmBb,MAAnB;;AA8DA,eAAeK,IAAf","names":["Action","distance","DISTANCE","__extends","_this","Drag","starting","startPoint","context","getCurrentPoint","current","view","event","dragStart","emit","target","x","y","event_1"],"sourceRoot":"","sources":["../../../../src/interaction/action/view/drag.ts"],"sourcesContent":["import { Point } from '../../../dependents';\nimport Action from '../base';\nimport { distance } from '../util';\n\nconst DISTANCE = 4; // 移动的最小距离\n\n/**\n * @ignore\n * View 支持 Drag 的 Action\n */\nclass Drag extends Action {\n  // Action 开始，不等同于 拖拽开始，需要判定移动的范围\n  protected starting = false;\n  // 拖拽开始\n  protected dragStart = false;\n  // 开始的节点\n  protected startPoint: Point;\n\n  /**\n   * 开始\n   */\n  public start() {\n    this.starting = true;\n    this.startPoint = this.context.getCurrentPoint();\n  }\n\n  /**\n   * 拖拽\n   */\n  public drag() {\n    if (!this.startPoint) {\n      return;\n    }\n    const current = this.context.getCurrentPoint();\n    const view = this.context.view;\n    const event = this.context.event;\n    if (!this.dragStart) {\n      if (distance(current, this.startPoint) > DISTANCE) {\n        view.emit('dragstart', {\n          target: event.target,\n          x: event.x,\n          y: event.y,\n        });\n        this.dragStart = true;\n      }\n    } else {\n      view.emit('drag', {\n        target: event.target,\n        x: event.x,\n        y: event.y,\n      });\n    }\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    if (this.dragStart) {\n      const view = this.context.view;\n      const event = this.context.event;\n      view.emit('dragend', {\n        target: event.target,\n        x: event.x,\n        y: event.y,\n      });\n    }\n    this.starting = false;\n    this.dragStart = false;\n  }\n}\n\nexport default Drag;\n"]},"metadata":{},"sourceType":"module"}