{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { debounce, each, isString } from '@antv/util';\nimport { GROUP_Z_INDEX, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\n\nvar Chart =\n/** @class */\nfunction (_super) {\n  __extends(Chart, _super); // @ts-ignore\n\n\n  function Chart(props) {\n    var _this = this;\n\n    var container = props.container,\n        width = props.width,\n        height = props.height,\n        _a = props.autoFit,\n        autoFit = _a === void 0 ? false : _a,\n        padding = props.padding,\n        appendPadding = props.appendPadding,\n        _b = props.renderer,\n        renderer = _b === void 0 ? 'canvas' : _b,\n        pixelRatio = props.pixelRatio,\n        _c = props.localRefresh,\n        localRefresh = _c === void 0 ? true : _c,\n        _d = props.visible,\n        visible = _d === void 0 ? true : _d,\n        _e = props.supportCSSTransform,\n        supportCSSTransform = _e === void 0 ? false : _e,\n        _f = props.defaultInteractions,\n        defaultInteractions = _f === void 0 ? ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text', 'axis-description'] : _f,\n        options = props.options,\n        limitInPlot = props.limitInPlot,\n        theme = props.theme,\n        syncViewPadding = props.syncViewPadding;\n    var ele = isString(container) ? document.getElementById(container) : container; // 生成内部正式绘制的 div 元素\n\n    var wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement); // if autoFit, use the container size, to avoid the graph render twice.\n\n    var size = getChartSize(ele, autoFit, width, height);\n    var G = getEngine(renderer);\n    var canvas = new G.Canvas(__assign({\n      container: wrapperElement,\n      pixelRatio: pixelRatio,\n      localRefresh: localRefresh,\n      supportCSSTransform: supportCSSTransform\n    }, size)); // 调用 view 的创建\n\n    _this = _super.call(this, {\n      parent: null,\n      canvas: canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      padding: padding,\n      appendPadding: appendPadding,\n      visible: visible,\n      options: options,\n      limitInPlot: limitInPlot,\n      theme: theme,\n      syncViewPadding: syncViewPadding\n    }) || this;\n    /**\n     * when container size changed, change chart size props, and re-render.\n     */\n\n    _this.onResize = debounce(function () {\n      _this.forceFit();\n    }, 300);\n    _this.ele = ele;\n    _this.canvas = canvas;\n    _this.width = size.width;\n    _this.height = size.height;\n    _this.autoFit = autoFit;\n    _this.localRefresh = localRefresh;\n    _this.renderer = renderer;\n    _this.wrapperElement = wrapperElement; // 自适应大小\n\n    _this.updateCanvasStyle();\n\n    _this.bindAutoFit();\n\n    _this.initDefaultInteractions(defaultInteractions);\n\n    return _this;\n  }\n\n  Chart.prototype.initDefaultInteractions = function (interactions) {\n    var _this = this;\n\n    each(interactions, function (interaction) {\n      _this.interaction(interaction);\n    });\n  };\n  /**\n   * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\n   * @param ariaOption\n   */\n\n\n  Chart.prototype.aria = function (ariaOption) {\n    var ATTR = 'aria-label';\n\n    if (ariaOption === false) {\n      this.ele.removeAttribute(ATTR);\n    } else {\n      this.ele.setAttribute(ATTR, ariaOption.label);\n    }\n  };\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n\n\n  Chart.prototype.changeSize = function (width, height) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height); // 重新渲染\n\n    this.render(true);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_SIZE);\n    return this;\n  };\n  /**\n   * 清空图表，同时清除掉 aria 配置\n   */\n\n\n  Chart.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this.aria(false);\n  };\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n\n\n  Chart.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.unbindAutoFit();\n    this.canvas.destroy();\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  };\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n\n\n  Chart.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible); // 需要更新 visible 变量\n\n\n    this.wrapperElement.style.display = visible ? '' : 'none';\n    return this;\n  };\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n\n\n  Chart.prototype.forceFit = function () {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      var _a = getChartSize(this.ele, true, this.width, this.height),\n          width = _a.width,\n          height = _a.height;\n\n      this.changeSize(width, height);\n    }\n  };\n\n  Chart.prototype.updateCanvasStyle = function () {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle'\n    });\n  };\n\n  Chart.prototype.bindAutoFit = function () {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  };\n\n  Chart.prototype.unbindAutoFit = function () {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  };\n\n  return Chart;\n}(View);\n\nexport default Chart;","map":{"version":3,"mappings":"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","names":["debounce","each","isString","GROUP_Z_INDEX","VIEW_LIFE_CIRCLE","getEngine","createDom","getChartSize","removeDom","modifyCSS","View","__extends","props","width","height","_a","autoFit","padding","appendPadding","_b","renderer","pixelRatio","_c","localRefresh","_d","visible","_e","supportCSSTransform","_f","defaultInteractions","options","limitInPlot","theme","syncViewPadding","ele","container","document","getElementById","wrapperElement","appendChild","size","G","canvas","Canvas","__assign","_super","parent","backgroundGroup","addGroup","zIndex","BG","middleGroup","MID","foregroundGroup","FORE","_this","forceFit","updateCanvasStyle","bindAutoFit","initDefaultInteractions","Chart","interactions","interaction","ariaOption","ATTR","removeAttribute","setAttribute","label","emit","BEFORE_CHANGE_SIZE","changeSize","render","AFTER_CHANGE_SIZE","clear","call","aria","destroy","unbindAutoFit","changeVisible","style","display","destroyed","get","verticalAlign","window","addEventListener","onResize","removeEventListener"],"sourceRoot":"","sources":["../../src/chart/chart.ts"],"sourcesContent":["import { debounce, each, isString } from '@antv/util';\nimport { ChartCfg } from '../interface';\nimport { GROUP_Z_INDEX, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\nimport { AriaOption } from '../interface';\n\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nexport default class Chart extends View {\n  /** Chart 的 DOM 容器 */\n  public ele: HTMLElement;\n\n  /** 图表宽度 */\n  public width: number;\n  /** 图表高度 */\n  public height: number;\n  /** 是否开启局部刷新 */\n  public localRefresh: boolean;\n  /** 是否自适应 DOM 容器宽高，默认为 false，需要用户手动指定宽高 */\n  public autoFit: boolean;\n  /** 图表渲染引擎 */\n  public renderer: 'canvas' | 'svg';\n\n  private wrapperElement: HTMLElement;\n\n  // @ts-ignore\n  constructor(props: ChartCfg) {\n    const {\n      container,\n      width,\n      height,\n      autoFit = false,\n      padding,\n      appendPadding,\n      renderer = 'canvas',\n      pixelRatio,\n      localRefresh = true,\n      visible = true,\n      supportCSSTransform = false,\n      defaultInteractions = ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text', 'axis-description'],\n      options,\n      limitInPlot,\n      theme,\n      syncViewPadding,\n    } = props;\n\n    const ele: HTMLElement = isString(container) ? document.getElementById(container) : container;\n\n    // 生成内部正式绘制的 div 元素\n    const wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement);\n\n    // if autoFit, use the container size, to avoid the graph render twice.\n    const size = getChartSize(ele, autoFit, width, height);\n\n    const G = getEngine(renderer);\n\n    const canvas = new G.Canvas({\n      container: wrapperElement,\n      pixelRatio,\n      localRefresh,\n      supportCSSTransform,\n      ...size,\n    });\n\n    // 调用 view 的创建\n    super({\n      parent: null,\n      canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      padding,\n      appendPadding,\n      visible,\n      options,\n      limitInPlot,\n      theme,\n      syncViewPadding,\n    });\n\n    this.ele = ele;\n    this.canvas = canvas;\n    this.width = size.width;\n    this.height = size.height;\n    this.autoFit = autoFit;\n    this.localRefresh = localRefresh;\n    this.renderer = renderer;\n    this.wrapperElement = wrapperElement;\n\n    // 自适应大小\n    this.updateCanvasStyle();\n    this.bindAutoFit();\n    this.initDefaultInteractions(defaultInteractions);\n  }\n\n  private initDefaultInteractions(interactions) {\n    each(interactions, (interaction) => {\n      this.interaction(interaction);\n    });\n  }\n\n  /**\n   * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\n   * @param ariaOption\n   */\n  public aria(ariaOption: AriaOption) {\n    const ATTR = 'aria-label';\n    if (ariaOption === false) {\n      this.ele.removeAttribute(ATTR);\n    } else {\n      this.ele.setAttribute(ATTR, ariaOption.label);\n    }\n  }\n\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n  public changeSize(width: number, height: number) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n\n    // 重新渲染\n    this.render(true);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_SIZE);\n\n    return this;\n  }\n\n  /**\n   * 清空图表，同时清除掉 aria 配置\n   */\n  public clear() {\n    super.clear();\n\n    this.aria(false);\n  }\n\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n  public destroy() {\n    super.destroy();\n\n    this.unbindAutoFit();\n    this.canvas.destroy();\n\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  }\n\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible); // 需要更新 visible 变量\n    this.wrapperElement.style.display = visible ? '' : 'none';\n\n    return this;\n  }\n\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n  public forceFit() {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      const { width, height } = getChartSize(this.ele, true, this.width, this.height);\n      this.changeSize(width, height);\n    }\n  }\n\n  private updateCanvasStyle() {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    });\n  }\n\n  private bindAutoFit() {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  }\n\n  private unbindAutoFit() {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }\n\n  /**\n   * when container size changed, change chart size props, and re-render.\n   */\n  private onResize = debounce(() => {\n    this.forceFit();\n  }, 300);\n}\n"]},"metadata":{},"sourceType":"module"}