{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isArray } from '@antv/util';\nimport { deepAssign } from '../../../utils';\nimport { DualAxesGeometry, AxisType } from '../types';\nimport { DEFAULT_LEFT_YAXIS_CONFIG, DEFAULT_RIGHT_YAXIS_CONFIG } from '../constant';\n/**\n * 根据 GeometryOption 判断 geometry 是否为 line\n */\n\nexport function isLine(geometryOption) {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Line;\n}\n/**\n * 根据 GeometryOption 判断 geometry 是否为 Column\n */\n\nexport function isColumn(geometryOption) {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Column;\n}\n/**\n * 获取 GeometryOption\n * @param geometryOption\n * @param axis\n */\n\nexport function getGeometryOption(xField, yField, geometryOption) {\n  // 空默认为线\n  return isColumn(geometryOption) ? deepAssign({}, {\n    geometry: DualAxesGeometry.Column,\n    label: geometryOption.label && geometryOption.isRange ? {\n      content: function (item) {\n        var _a;\n\n        return (_a = item[yField]) === null || _a === void 0 ? void 0 : _a.join('-');\n      }\n    } : undefined\n  }, geometryOption) : __assign({\n    geometry: DualAxesGeometry.Line\n  }, geometryOption);\n}\n/**\n * 兼容一些属性 为 arr 和 obj 的两种情况， 如 yAxis，annotations\n * 为了防止左右 yField 相同，导致变成 object 之后被覆盖，所以都转变成数组的形式\n * @param yField\n * @param transformAttribute\n */\n\nexport function transformObjectToArray(yField, transformAttribute) {\n  var y1 = yField[0],\n      y2 = yField[1];\n\n  if (isArray(transformAttribute)) {\n    // 将数组补齐为两个\n    var a1_1 = transformAttribute[0],\n        a2_1 = transformAttribute[1];\n    return [a1_1, a2_1];\n  }\n\n  var a1 = get(transformAttribute, y1);\n  var a2 = get(transformAttribute, y2);\n  return [a1, a2];\n}\n/**\n * 获取默认值\n * @param yAxis\n * @param axisType\n */\n\nexport function getYAxisWithDefault(yAxis, axisType) {\n  if (axisType === AxisType.Left) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_LEFT_YAXIS_CONFIG, yAxis);\n  } else if (axisType === AxisType.Right) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_RIGHT_YAXIS_CONFIG, yAxis);\n  }\n\n  return yAxis;\n}","map":{"version":3,"mappings":";AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,YAA7B;AAEA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAGEC,gBAHF,EAMEC,QANF,QAOO,UAPP;AAQA,SAASC,yBAAT,EAAoCC,0BAApC,QAAsE,aAAtE;AAEA;;;;AAGA,OAAM,SAAUC,MAAV,CAAiBC,cAAjB,EAA+C;EACnD,OAAOR,GAAG,CAACQ,cAAD,EAAiB,UAAjB,CAAH,KAAoCL,gBAAgB,CAACM,IAA5D;AACD;AAED;;;;AAGA,OAAM,SAAUC,QAAV,CAAmBF,cAAnB,EAAiD;EACrD,OAAOR,GAAG,CAACQ,cAAD,EAAiB,UAAjB,CAAH,KAAoCL,gBAAgB,CAACQ,MAA5D;AACD;AAED;;;;;;AAKA,OAAM,SAAUC,iBAAV,CAA4BC,MAA5B,EAA4CC,MAA5C,EAA4DN,cAA5D,EAA0F;EAC9F;EACA,OAAOE,QAAQ,CAACF,cAAD,CAAR,GACHN,UAAU,CACR,EADQ,EAER;IACEa,QAAQ,EAAEZ,gBAAgB,CAACQ,MAD7B;IAEEK,KAAK,EACHR,cAAc,CAACQ,KAAf,IAAwBR,cAAc,CAACS,OAAvC,GACI;MACEC,OAAO,EAAE,UAACC,IAAD,EAAa;;;QACpB,aAAOA,IAAI,CAACL,MAAD,CAAX,MAAmB,IAAnB,IAAmBM,aAAnB,GAAmB,MAAnB,GAAmBA,GAAEC,IAAF,CAAO,GAAP,CAAnB;MACD;IAHH,CADJ,GAMIC;EATR,CAFQ,EAaRd,cAbQ,CADP,GAgBJe;IACGR,QAAQ,EAAEZ,gBAAgB,CAACM;EAD9B,GAEMD,cAFN,CAhBH;AAoBD;AAED;;;;;;;AAMA,OAAM,SAAUgB,sBAAV,CACJV,MADI,EAEJW,kBAFI,EAE2C;EAExC,MAAE,GAAQX,MAAM,GAAhB;EAAA,IAAIY,EAAE,GAAIZ,MAAM,GAAhB;;EAEP,IAAIb,OAAO,CAACwB,kBAAD,CAAX,EAAiC;IAC/B;IACO,QAAE,GAAQA,kBAAkB,GAA5B;IAAA,IAAIE,IAAE,GAAIF,kBAAkB,GAA5B;IACP,OAAO,CAACG,IAAD,EAAKD,IAAL,CAAP;EACD;;EACD,IAAME,EAAE,GAAG7B,GAAG,CAACyB,kBAAD,EAAqBK,EAArB,CAAd;EACA,IAAMC,EAAE,GAAG/B,GAAG,CAACyB,kBAAD,EAAqBC,EAArB,CAAd;EACA,OAAO,CAACG,EAAD,EAAKE,EAAL,CAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUC,mBAAV,CAA8BC,KAA9B,EAA2CC,QAA3C,EAA6D;EACjE,IAAIA,QAAQ,KAAK9B,QAAQ,CAAC+B,IAA1B,EAAgC;IAC9B,OAAOF,KAAK,KAAK,KAAV,GAAkB,KAAlB,GAA0B/B,UAAU,CAAC,EAAD,EAAKG,yBAAL,EAAgC4B,KAAhC,CAA3C;EACD,CAFD,MAEO,IAAIC,QAAQ,KAAK9B,QAAQ,CAACgC,KAA1B,EAAiC;IACtC,OAAOH,KAAK,KAAK,KAAV,GAAkB,KAAlB,GAA0B/B,UAAU,CAAC,EAAD,EAAKI,0BAAL,EAAiC2B,KAAjC,CAA3C;EACD;;EACD,OAAOA,KAAP;AACD","names":["get","isArray","deepAssign","DualAxesGeometry","AxisType","DEFAULT_LEFT_YAXIS_CONFIG","DEFAULT_RIGHT_YAXIS_CONFIG","isLine","geometryOption","Line","isColumn","Column","getGeometryOption","xField","yField","geometry","label","isRange","content","item","_a","join","undefined","__assign","transformObjectToArray","transformAttribute","y2","a2_1","a1_1","a1","y1","a2","getYAxisWithDefault","yAxis","axisType","Left","Right"],"sourceRoot":"","sources":["../../../../src/plots/dual-axes/util/option.ts"],"sourcesContent":["import { get, isArray } from '@antv/util';\nimport { Axis } from '../../../types/axis';\nimport { deepAssign } from '../../../utils';\nimport {\n  DualAxesOptions,\n  GeometryOption,\n  DualAxesGeometry,\n  GeometryLineOption,\n  GeometryColumnOption,\n  AxisType,\n} from '../types';\nimport { DEFAULT_LEFT_YAXIS_CONFIG, DEFAULT_RIGHT_YAXIS_CONFIG } from '../constant';\n\n/**\n * 根据 GeometryOption 判断 geometry 是否为 line\n */\nexport function isLine(geometryOption: GeometryOption): geometryOption is GeometryLineOption {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Line;\n}\n\n/**\n * 根据 GeometryOption 判断 geometry 是否为 Column\n */\nexport function isColumn(geometryOption: GeometryOption): geometryOption is GeometryColumnOption {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Column;\n}\n\n/**\n * 获取 GeometryOption\n * @param geometryOption\n * @param axis\n */\nexport function getGeometryOption(xField: string, yField: string, geometryOption: GeometryOption): GeometryOption {\n  // 空默认为线\n  return isColumn(geometryOption)\n    ? deepAssign(\n        {},\n        {\n          geometry: DualAxesGeometry.Column,\n          label:\n            geometryOption.label && geometryOption.isRange\n              ? {\n                  content: (item: object) => {\n                    return item[yField]?.join('-');\n                  },\n                }\n              : undefined,\n        },\n        geometryOption\n      )\n    : {\n        geometry: DualAxesGeometry.Line,\n        ...geometryOption,\n      };\n}\n\n/**\n * 兼容一些属性 为 arr 和 obj 的两种情况， 如 yAxis，annotations\n * 为了防止左右 yField 相同，导致变成 object 之后被覆盖，所以都转变成数组的形式\n * @param yField\n * @param transformAttribute\n */\nexport function transformObjectToArray(\n  yField: DualAxesOptions['yField'],\n  transformAttribute: Record<string, any> | any[]\n): any[] {\n  const [y1, y2] = yField;\n\n  if (isArray(transformAttribute)) {\n    // 将数组补齐为两个\n    const [a1, a2] = transformAttribute;\n    return [a1, a2];\n  }\n  const a1 = get(transformAttribute, y1);\n  const a2 = get(transformAttribute, y2);\n  return [a1, a2];\n}\n\n/**\n * 获取默认值\n * @param yAxis\n * @param axisType\n */\nexport function getYAxisWithDefault(yAxis: Axis, axisType: AxisType): Axis {\n  if (axisType === AxisType.Left) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_LEFT_YAXIS_CONFIG, yAxis);\n  } else if (axisType === AxisType.Right) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_RIGHT_YAXIS_CONFIG, yAxis);\n  }\n  return yAxis;\n}\n"]},"metadata":{},"sourceType":"module"}