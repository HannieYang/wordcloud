{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { clamp, size, valuesOfKey } from '@antv/util';\nimport { Action } from '..';\n\nfunction isWheelDown(event) {\n  var wheelEvent = event.gEvent.originalEvent;\n  return wheelEvent.deltaY > 0;\n}\n\nvar DEFAULT_WHEELDELTA = 1;\n\nvar MousewheelScroll =\n/** @class */\nfunction (_super) {\n  __extends(MousewheelScroll, _super);\n\n  function MousewheelScroll() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MousewheelScroll.prototype.scroll = function (arg) {\n    var _a = this.context,\n        view = _a.view,\n        event = _a.event;\n\n    if (!view.getOptions().scrollbar) {\n      return;\n    }\n\n    var wheelDelta = (arg === null || arg === void 0 ? void 0 : arg.wheelDelta) || DEFAULT_WHEELDELTA;\n    var scrollbarController = view.getController('scrollbar');\n    var xScale = view.getXScale();\n    var data = view.getOptions().data;\n    var dataSize = size(valuesOfKey(data, xScale.field));\n    var step = size(xScale.values);\n    var currentRatio = scrollbarController.getValue();\n    var currentStart = Math.floor((dataSize - step) * currentRatio);\n    var nextStart = currentStart + (isWheelDown(event) ? wheelDelta : -wheelDelta);\n    var correction = wheelDelta / (dataSize - step) / 10000;\n    var nextRatio = clamp(nextStart / (dataSize - step) + correction, 0, 1);\n    scrollbarController.setValue(nextRatio);\n  };\n\n  return MousewheelScroll;\n}(Action);\n\nexport default MousewheelScroll;","map":{"version":3,"mappings":";AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,WAAtB,QAAyC,YAAzC;AAEA,SAASC,MAAT,QAAuB,IAAvB;;AAGA,SAASC,WAAT,CAAqBC,KAArB,EAAuC;EACrC,IAAMC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,aAAhC;EACA,OAAOF,UAAU,CAACG,MAAX,GAAoB,CAA3B;AACD;;AAED,IAAMC,kBAAkB,GAAG,CAA3B;;AACA;AAAA;AAAA;EAA+BC;;EAA/B;;EAwBC;;EAvBQC,oCAAP,UAAcC,GAAd,EAAkB;IACV,SAAkB,KAAKC,OAAvB;IAAA,IAAEC,IAAI,UAAN;IAAA,IAAQV,KAAK,WAAb;;IAEN,IAAI,CAACU,IAAI,CAACC,UAAL,GAAkBC,SAAvB,EAAkC;MAChC;IACD;;IAED,IAAMC,UAAU,GAAG,IAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEA,UAAL,KAAmBR,kBAAtC;IACA,IAAMS,mBAAmB,GAAGJ,IAAI,CAACK,aAAL,CAAmB,WAAnB,CAA5B;IAEA,IAAMC,MAAM,GAAGN,IAAI,CAACO,SAAL,EAAf;IACA,IAAMC,IAAI,GAAGR,IAAI,CAACC,UAAL,GAAkBO,IAA/B;IACA,IAAMC,QAAQ,GAAGvB,IAAI,CAACC,WAAW,CAACqB,IAAD,EAAOF,MAAM,CAACI,KAAd,CAAZ,CAArB;IACA,IAAMC,IAAI,GAAGzB,IAAI,CAACoB,MAAM,CAACM,MAAR,CAAjB;IAEA,IAAMC,YAAY,GAAGT,mBAAmB,CAACU,QAApB,EAArB;IACA,IAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACR,QAAQ,GAAGE,IAAZ,IAAoBE,YAA/B,CAArB;IAEA,IAAMK,SAAS,GAAGH,YAAY,IAAI1B,WAAW,CAACC,KAAD,CAAX,GAAqBa,UAArB,GAAkC,CAACA,UAAvC,CAA9B;IACA,IAAMgB,UAAU,GAAGhB,UAAU,IAAIM,QAAQ,GAAGE,IAAf,CAAV,GAAiC,KAApD;IACA,IAAMS,SAAS,GAAGnC,KAAK,CAACiC,SAAS,IAAIT,QAAQ,GAAGE,IAAf,CAAT,GAAgCQ,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD,CAAvB;IACAf,mBAAmB,CAACiB,QAApB,CAA6BD,SAA7B;EACD,CAtBM;;EAuBT;AAAC,CAxBD,CAA+BhC,MAA/B;;AA0BA,eAAeS,gBAAf","names":["clamp","size","valuesOfKey","Action","isWheelDown","event","wheelEvent","gEvent","originalEvent","deltaY","DEFAULT_WHEELDELTA","__extends","MousewheelScroll","arg","context","view","getOptions","scrollbar","wheelDelta","scrollbarController","getController","xScale","getXScale","data","dataSize","field","step","values","currentRatio","getValue","currentStart","Math","floor","nextStart","correction","nextRatio","setValue"],"sourceRoot":"","sources":["../../../../src/interaction/action/view/mousewheel-scroll.ts"],"sourcesContent":["import { clamp, size, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE } from '../../../constant';\nimport { Action } from '..';\nimport { LooseObject } from '../../../interface';\n\nfunction isWheelDown(event: LooseObject) {\n  const wheelEvent = event.gEvent.originalEvent as WheelEvent;\n  return wheelEvent.deltaY > 0;\n}\n\nconst DEFAULT_WHEELDELTA = 1;\nclass MousewheelScroll extends Action {\n  public scroll(arg?) {\n    const { view, event } = this.context;\n\n    if (!view.getOptions().scrollbar) {\n      return;\n    }\n\n    const wheelDelta = arg?.wheelDelta || DEFAULT_WHEELDELTA;\n    const scrollbarController = view.getController('scrollbar');\n\n    const xScale = view.getXScale();\n    const data = view.getOptions().data;\n    const dataSize = size(valuesOfKey(data, xScale.field));\n    const step = size(xScale.values);\n\n    const currentRatio = scrollbarController.getValue();\n    const currentStart = Math.floor((dataSize - step) * currentRatio);\n\n    const nextStart = currentStart + (isWheelDown(event) ? wheelDelta : -wheelDelta);\n    const correction = wheelDelta / (dataSize - step) / 10000;\n    const nextRatio = clamp(nextStart / (dataSize - step) + correction, 0, 1);\n    scrollbarController.setValue(nextRatio);\n  }\n}\n\nexport default MousewheelScroll;\n"]},"metadata":{},"sourceType":"module"}