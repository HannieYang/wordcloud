{"ast":null,"code":"import { isNumber, isArray } from '@antv/util';\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\n\nexport function normalPadding(padding) {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n\n  if (isArray(padding)) {\n    var length_1 = padding.length;\n\n    if (length_1 === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n\n    if (length_1 === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    if (length_1 === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n\n    if (length_1 === 4) {\n      return padding;\n    }\n  }\n\n  return [0, 0, 0, 0];\n}\n/**\n * 获取调整的 appendPadding\n */\n\nexport function getAdjustAppendPadding(padding, position, append) {\n  if (position === void 0) {\n    position = 'bottom';\n  }\n\n  if (append === void 0) {\n    append = 25;\n  }\n\n  var currentAppendPadding = normalPadding(padding);\n  var PADDING = [position.startsWith('top') ? append : 0, position.startsWith('right') ? append : 0, position.startsWith('bottom') ? append : 0, position.startsWith('left') ? append : 0];\n  return [currentAppendPadding[0] + PADDING[0], currentAppendPadding[1] + PADDING[1], currentAppendPadding[2] + PADDING[2], currentAppendPadding[3] + PADDING[3]];\n}\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param array\n */\n\nexport function resolveAllPadding(paddings) {\n  // 先把数组里的 padding 全部转换成 normal\n  var normalPaddings = paddings.map(function (item) {\n    return normalPadding(item);\n  });\n  var finalPadding = [0, 0, 0, 0];\n\n  if (normalPaddings.length > 0) {\n    finalPadding = finalPadding.map(function (item, index) {\n      // 有几个 padding 数组就遍历几次，累加\n      normalPaddings.forEach(function (d, i) {\n        item += normalPaddings[i][index];\n      });\n      return item;\n    });\n  }\n\n  return finalPadding;\n}","map":{"version":3,"mappings":"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","names":["isNumber","isArray","normalPadding","padding","length_1","length","getAdjustAppendPadding","position","append","currentAppendPadding","PADDING","startsWith","resolveAllPadding","paddings","normalPaddings","map","item","finalPadding","index","forEach","d","i"],"sourceRoot":"","sources":["../../src/utils/padding.ts"],"sourcesContent":["import { Types } from '@antv/g2';\nimport { isNumber, isArray } from '@antv/util';\n\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\nexport function normalPadding(padding: number | number[] | 'auto'): [number, number, number, number] {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n  if (isArray(padding)) {\n    const length = padding.length;\n\n    if (length === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n    if (length === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n    if (length === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n    if (length === 4) {\n      return padding as [number, number, number, number];\n    }\n  }\n\n  return [0, 0, 0, 0];\n}\n\n/**\n * 获取调整的 appendPadding\n */\nexport function getAdjustAppendPadding(padding: Types.ViewAppendPadding, position = 'bottom', append = 25) {\n  const currentAppendPadding = normalPadding(padding);\n\n  const PADDING = [\n    position.startsWith('top') ? append : 0,\n    position.startsWith('right') ? append : 0,\n    position.startsWith('bottom') ? append : 0,\n    position.startsWith('left') ? append : 0,\n  ];\n  return [\n    currentAppendPadding[0] + PADDING[0],\n    currentAppendPadding[1] + PADDING[1],\n    currentAppendPadding[2] + PADDING[2],\n    currentAppendPadding[3] + PADDING[3],\n  ];\n}\n\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param array\n */\nexport function resolveAllPadding(paddings: Types.ViewPadding[]) {\n  // 先把数组里的 padding 全部转换成 normal\n  const normalPaddings = paddings.map((item) => normalPadding(item));\n  let finalPadding = [0, 0, 0, 0];\n  if (normalPaddings.length > 0) {\n    finalPadding = finalPadding.map((item, index) => {\n      // 有几个 padding 数组就遍历几次，累加\n      normalPaddings.forEach((d, i) => {\n        item += normalPaddings[i][index];\n      });\n      return item;\n    });\n  }\n  return finalPadding;\n}\n"]},"metadata":{},"sourceType":"module"}