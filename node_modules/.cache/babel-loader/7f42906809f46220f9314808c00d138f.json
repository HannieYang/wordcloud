{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { processIllegalData } from '../../utils';\nimport { adaptor, pieAnnotation } from './adaptor';\nimport { DEFAULT_OPTIONS } from './contants';\nimport { isAllZero } from './utils';\nimport './interactions';\n\nvar Pie =\n/** @class */\nfunction (_super) {\n  __extends(Pie, _super);\n\n  function Pie() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'pie';\n    return _this;\n  }\n  /**\n   * 获取 饼图 默认配置项\n   * 供外部使用\n   */\n\n\n  Pie.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 更新数据\n   * @param data\n   */\n\n\n  Pie.prototype.changeData = function (data) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    var prevOptions = this.options;\n    var angleField = this.options.angleField;\n    var prevData = processIllegalData(prevOptions.data, angleField);\n    var curData = processIllegalData(data, angleField); // 如果上一次或当前数据全为 0，则重新渲染\n\n    if (isAllZero(prevData, angleField) || isAllZero(curData, angleField)) {\n      this.update({\n        data: data\n      });\n    } else {\n      this.updateOption({\n        data: data\n      });\n      this.chart.data(curData); // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n\n      pieAnnotation({\n        chart: this.chart,\n        options: this.options\n      });\n      this.chart.render(true);\n    }\n\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /**\n   * 获取 饼图 默认配置项, 供 base 获取\n   */\n\n\n  Pie.prototype.getDefaultOptions = function () {\n    return Pie.getDefaultOptions();\n  };\n  /**\n   * 获取 饼图 的适配器\n   */\n\n\n  Pie.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return Pie;\n}(Plot);\n\nexport { Pie };","map":{"version":3,"mappings":";AAAA,SAASA,gBAAT,EAA2BC,KAA3B,QAAwC,UAAxC;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,WAAvC;AACA,SAASC,eAAT,QAAgC,YAAhC;AAEA,SAASC,SAAT,QAA0B,SAA1B;AACA,OAAO,gBAAP;;AAIA;AAAA;AAAA;EAAyBC;;EAAzB;IAAA;IASE;;;IACOC,aAAe,KAAf;;EA6CR;EAtDC;;;;;;EAIOC,wBAAP;IACE,OAAOJ,eAAP;EACD,CAFM;EAOP;;;;;;EAIOI,2BAAP,UAAkBC,IAAlB,EAA0C;IACxC,KAAKC,KAAL,CAAWC,IAAX,CACEb,gBAAgB,CAACc,kBADnB,EAEEb,KAAK,CAACc,QAAN,CAAe,KAAKH,KAApB,EAA2BZ,gBAAgB,CAACc,kBAA5C,EAAgE,IAAhE,CAFF;IAIA,IAAME,WAAW,GAAG,KAAKC,OAAzB;IACQ,cAAU,GAAK,KAAKA,OAAL,CAAYC,UAA3B;IACR,IAAMC,QAAQ,GAAGhB,kBAAkB,CAACa,WAAW,CAACL,IAAb,EAAmBO,UAAnB,CAAnC;IACA,IAAME,OAAO,GAAGjB,kBAAkB,CAACQ,IAAD,EAAOO,UAAP,CAAlC,CARwC,CASxC;;IACA,IAAIX,SAAS,CAACY,QAAD,EAAWD,UAAX,CAAT,IAAmCX,SAAS,CAACa,OAAD,EAAUF,UAAV,CAAhD,EAAuE;MACrE,KAAKG,MAAL,CAAY;QAAEV,IAAI;MAAN,CAAZ;IACD,CAFD,MAEO;MACL,KAAKW,YAAL,CAAkB;QAAEX,IAAI;MAAN,CAAlB;MACA,KAAKC,KAAL,CAAWD,IAAX,CAAgBS,OAAhB,EAFK,CAGL;;MACAf,aAAa,CAAC;QAAEO,KAAK,EAAE,KAAKA,KAAd;QAAqBK,OAAO,EAAE,KAAKA;MAAnC,CAAD,CAAb;MACA,KAAKL,KAAL,CAAWW,MAAX,CAAkB,IAAlB;IACD;;IAED,KAAKX,KAAL,CAAWC,IAAX,CACEb,gBAAgB,CAACwB,iBADnB,EAEEvB,KAAK,CAACc,QAAN,CAAe,KAAKH,KAApB,EAA2BZ,gBAAgB,CAACwB,iBAA5C,EAA+D,IAA/D,CAFF;EAID,CAxBM;EA0BP;;;;;EAGUd,kCAAV;IACE,OAAOA,GAAG,CAACe,iBAAJ,EAAP;EACD,CAFS;EAIV;;;;;EAGUf,iCAAV;IACE,OAAON,OAAP;EACD,CAFS;;EAGZ;AAAC,CAvDD,CAAyBF,IAAzB","names":["VIEW_LIFE_CIRCLE","Event","Plot","processIllegalData","adaptor","pieAnnotation","DEFAULT_OPTIONS","isAllZero","__extends","_this","Pie","data","chart","emit","BEFORE_CHANGE_DATA","fromData","prevOptions","options","angleField","prevData","curData","update","updateOption","render","AFTER_CHANGE_DATA","getDefaultOptions"],"sourceRoot":"","sources":["../../../src/plots/pie/index.ts"],"sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { processIllegalData } from '../../utils';\nimport { adaptor, pieAnnotation } from './adaptor';\nimport { DEFAULT_OPTIONS } from './contants';\nimport { PieOptions } from './types';\nimport { isAllZero } from './utils';\nimport './interactions';\n\nexport type { PieOptions };\n\nexport class Pie extends Plot<PieOptions> {\n  /**\n   * 获取 饼图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<PieOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'pie';\n\n  /**\n   * 更新数据\n   * @param data\n   */\n  public changeData(data: PieOptions['data']) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n    const prevOptions = this.options;\n    const { angleField } = this.options;\n    const prevData = processIllegalData(prevOptions.data, angleField);\n    const curData = processIllegalData(data, angleField);\n    // 如果上一次或当前数据全为 0，则重新渲染\n    if (isAllZero(prevData, angleField) || isAllZero(curData, angleField)) {\n      this.update({ data });\n    } else {\n      this.updateOption({ data });\n      this.chart.data(curData);\n      // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n      pieAnnotation({ chart: this.chart, options: this.options });\n      this.chart.render(true);\n    }\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  /**\n   * 获取 饼图 默认配置项, 供 base 获取\n   */\n  protected getDefaultOptions(): Partial<PieOptions> {\n    return Pie.getDefaultOptions();\n  }\n\n  /**\n   * 获取 饼图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<PieOptions> {\n    return adaptor;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}