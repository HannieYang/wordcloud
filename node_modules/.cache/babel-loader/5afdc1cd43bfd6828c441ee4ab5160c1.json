{"ast":null,"code":"import { isString } from '@antv/util';\nimport { flow, deepAssign } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { DEFAULT_COLOR } from './constants';\nimport { getProgressData } from './utils';\n/**\n * 字段\n * @param params\n */\n\nexport function geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var percent = options.percent,\n      progressStyle = options.progressStyle,\n      color = options.color,\n      barWidthRatio = options.barWidthRatio;\n  chart.data(getProgressData(percent));\n  var p = deepAssign({}, params, {\n    options: {\n      xField: '1',\n      yField: 'percent',\n      seriesField: 'type',\n      isStack: true,\n      widthRatio: barWidthRatio,\n      interval: {\n        style: progressStyle,\n        color: isString(color) ? [color, DEFAULT_COLOR[1]] : color\n      },\n      args: {\n        zIndexReversed: true,\n        sortZIndex: true\n      }\n    }\n  });\n  interval(p); // 关闭组件\n\n  chart.tooltip(false);\n  chart.axis(false);\n  chart.legend(false);\n  return params;\n}\n/**\n * other 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart;\n  chart.coordinate('rect').transpose();\n  return params;\n}\n/**\n * 进度图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // @ts-ignore\n  return flow(geometry, scale({}), coordinate, animation, theme, annotation())(params);\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AAEA,SAASC,IAAT,EAAeC,UAAf,QAAiC,aAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,KAA3B,EAAkCC,UAAlC,QAAoD,sBAApD;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA;;;;;AAIA,OAAM,SAAUC,QAAV,CAAmBC,MAAnB,EAAkD;EAC9C,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,WAAO,GAA0CC,OAAO,QAAxD;EAAA,IAASC,aAAa,GAA2BD,OAAO,cAAxD;EAAA,IAAwBE,KAAK,GAAoBF,OAAO,MAAxD;EAAA,IAA+BG,aAAa,GAAKH,OAAO,cAAxD;EAERI,KAAK,CAACC,IAAN,CAAWR,eAAe,CAACS,OAAD,CAA1B;EAEA,IAAMC,CAAC,GAAGjB,UAAU,CAAC,EAAD,EAAKS,MAAL,EAAa;IAC/BC,OAAO,EAAE;MACPQ,MAAM,EAAE,GADD;MAEPC,MAAM,EAAE,SAFD;MAGPC,WAAW,EAAE,MAHN;MAIPC,OAAO,EAAE,IAJF;MAKPC,UAAU,EAAET,aALL;MAMPR,QAAQ,EAAE;QACRkB,KAAK,EAAEZ,aADC;QAERC,KAAK,EAAEd,QAAQ,CAACc,KAAD,CAAR,GAAkB,CAACA,KAAD,EAAQN,aAAa,CAAC,CAAD,CAArB,CAAlB,GAA8CM;MAF7C,CANH;MAUPY,IAAI,EAAE;QACJC,cAAc,EAAE,IADZ;QAEJC,UAAU,EAAE;MAFR;IAVC;EADsB,CAAb,CAApB;EAkBArB,QAAQ,CAACY,CAAD,CAAR,CAxBsD,CA0BtD;;EACAH,KAAK,CAACa,OAAN,CAAc,KAAd;EACAb,KAAK,CAACc,IAAN,CAAW,KAAX;EACAd,KAAK,CAACe,MAAN,CAAa,KAAb;EAEA,OAAOpB,MAAP;AACD;AAED;;;;;AAIA,SAASqB,UAAT,CAAoBrB,MAApB,EAAmD;EACzC,SAAK,GAAKA,MAAM,MAAhB;EAERK,KAAK,CAACgB,UAAN,CAAiB,MAAjB,EAAyBC,SAAzB;EAEA,OAAOtB,MAAP;AACD;AAED;;;;;;;AAKA,OAAM,SAAUuB,OAAV,CAAkBvB,MAAlB,EAAiD;EACrD;EACA,OAAOV,IAAI,CAACS,QAAD,EAAWP,KAAK,CAAC,EAAD,CAAhB,EAAsB6B,UAAtB,EAAkC5B,SAAlC,EAA6CC,KAA7C,EAAoDC,UAAU,EAA9D,CAAJ,CAAsEK,MAAtE,CAAP;AACD","names":["isString","flow","deepAssign","scale","animation","theme","annotation","interval","DEFAULT_COLOR","getProgressData","geometry","params","options","progressStyle","color","barWidthRatio","chart","data","percent","p","xField","yField","seriesField","isStack","widthRatio","style","args","zIndexReversed","sortZIndex","tooltip","axis","legend","coordinate","transpose","adaptor"],"sourceRoot":"","sources":["../../../src/plots/progress/adaptor.ts"],"sourcesContent":["import { isString } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { ProgressOptions } from './types';\nimport { DEFAULT_COLOR } from './constants';\nimport { getProgressData } from './utils';\n\n/**\n * 字段\n * @param params\n */\nexport function geometry(params: Params<ProgressOptions>): Params<ProgressOptions> {\n  const { chart, options } = params;\n  const { percent, progressStyle, color, barWidthRatio } = options;\n\n  chart.data(getProgressData(percent));\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: '1',\n      yField: 'percent',\n      seriesField: 'type',\n      isStack: true,\n      widthRatio: barWidthRatio,\n      interval: {\n        style: progressStyle,\n        color: isString(color) ? [color, DEFAULT_COLOR[1]] : color,\n      },\n      args: {\n        zIndexReversed: true,\n        sortZIndex: true,\n      },\n    },\n  });\n\n  interval(p);\n\n  // 关闭组件\n  chart.tooltip(false);\n  chart.axis(false);\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * other 配置\n * @param params\n */\nfunction coordinate(params: Params<ProgressOptions>): Params<ProgressOptions> {\n  const { chart } = params;\n\n  chart.coordinate('rect').transpose();\n\n  return params;\n}\n\n/**\n * 进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<ProgressOptions>) {\n  // @ts-ignore\n  return flow(geometry, scale({}), coordinate, animation, theme, annotation())(params);\n}\n"]},"metadata":{},"sourceType":"module"}