{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isFunction, map, isNumber, maxBy, get } from '@antv/util';\nimport { FUNNEL_PERCENT, FUNNEL_CONVERSATION, FUNNEL_MAPPING_VALUE } from '../constant';\n/**\n * 漏斗图 transform\n * @param geometry\n */\n\nexport function transformData(data, originData, options) {\n  var formatData = [];\n  var yField = options.yField,\n      maxSize = options.maxSize,\n      minSize = options.minSize;\n  var maxYFieldValue = get(maxBy(originData, yField), [yField]);\n  var max = isNumber(maxSize) ? maxSize : 1;\n  var min = isNumber(minSize) ? minSize : 0; // format 数据\n\n  formatData = map(data, function (row, index) {\n    var percent = (row[yField] || 0) / maxYFieldValue;\n    row[FUNNEL_PERCENT] = percent;\n    row[FUNNEL_MAPPING_VALUE] = (max - min) * percent + min; // 转化率数据存储前后数据\n\n    row[FUNNEL_CONVERSATION] = [get(data, [index - 1, yField]), row[yField]];\n    return row;\n  });\n  return formatData;\n}\n/**\n * 漏斗图通用转化率组件\n * @param getLineCoordinate 用于获取特定的 line 的位置及配置\n */\n\nexport function conversionTagComponent(getLineCoordinate) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options;\n    var conversionTag = options.conversionTag;\n    var data = chart.getOptions().data;\n\n    if (conversionTag) {\n      var formatter_1 = conversionTag.formatter;\n      data.forEach(function (obj, index) {\n        if (index <= 0 || Number.isNaN(obj[FUNNEL_MAPPING_VALUE])) return;\n        var lineOption = getLineCoordinate(obj, index, data, {\n          top: true,\n          text: {\n            content: isFunction(formatter_1) ? formatter_1(obj, data) : formatter_1,\n            offsetX: conversionTag.offsetX,\n            offsetY: conversionTag.offsetY,\n            position: 'end',\n            autoRotate: false,\n            style: __assign({\n              textAlign: 'start',\n              textBaseline: 'middle'\n            }, conversionTag.style)\n          }\n        });\n        chart.annotation().line(lineOption);\n      });\n    }\n\n    return params;\n  };\n}","map":{"version":3,"mappings":";AACA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,QAA1B,EAAoCC,KAApC,EAA2CC,GAA3C,QAAsD,YAAtD;AAEA,SAASC,cAAT,EAAyBC,mBAAzB,EAA8CC,oBAA9C,QAA0E,aAA1E;AAIA;;;;;AAIA,OAAM,SAAUC,aAAV,CACJC,IADI,EAEJC,UAFI,EAGJC,OAHI,EAG0D;EAE9D,IAAIC,UAAU,GAAG,EAAjB;EACQ,UAAM,GAAuBD,OAAO,OAApC;EAAA,IAAQE,OAAO,GAAcF,OAAO,QAApC;EAAA,IAAiBG,OAAO,GAAKH,OAAO,QAApC;EACR,IAAMI,cAAc,GAAGX,GAAG,CAACD,KAAK,CAACO,UAAD,EAAaM,MAAb,CAAN,EAA4B,CAACA,MAAD,CAA5B,CAA1B;EACA,IAAMC,GAAG,GAAGf,QAAQ,CAACW,OAAD,CAAR,GAAoBA,OAApB,GAA8B,CAA1C;EACA,IAAMK,GAAG,GAAGhB,QAAQ,CAACY,OAAD,CAAR,GAAoBA,OAApB,GAA8B,CAA1C,CAN8D,CAQ9D;;EACAF,UAAU,GAAGX,GAAG,CAACQ,IAAD,EAAO,UAACU,GAAD,EAAMC,KAAN,EAAW;IAChC,IAAMC,OAAO,GAAG,CAACF,GAAG,CAACH,MAAD,CAAH,IAAe,CAAhB,IAAqBD,cAArC;IACAI,GAAG,CAACd,cAAD,CAAH,GAAsBgB,OAAtB;IACAF,GAAG,CAACZ,oBAAD,CAAH,GAA4B,CAACU,GAAG,GAAGC,GAAP,IAAcG,OAAd,GAAwBH,GAApD,CAHgC,CAIhC;;IACAC,GAAG,CAACb,mBAAD,CAAH,GAA2B,CAACF,GAAG,CAACK,IAAD,EAAO,CAACW,KAAK,GAAG,CAAT,EAAYJ,MAAZ,CAAP,CAAJ,EAAiCG,GAAG,CAACH,MAAD,CAApC,CAA3B;IACA,OAAOG,GAAP;EACD,CAPe,CAAhB;EASA,OAAOP,UAAP;AACD;AAED;;;;;AAIA,OAAM,SAAUU,sBAAV,CACJC,iBADI,EAMiB;EAErB,OAAO,UAAUC,MAAV,EAAuC;IACpC,SAAK,GAAcA,MAAM,MAAzB;IAAA,IAAOb,OAAO,GAAKa,MAAM,QAAzB;IACA,iBAAa,GAAKb,OAAO,cAAzB;IAEA,QAAI,GAAKc,KAAK,CAACC,UAAN,GAAkBjB,IAA3B;;IAER,IAAIkB,aAAJ,EAAmB;MACT,eAAS,GAAKA,aAAa,UAA3B;MACRlB,IAAI,CAACmB,OAAL,CAAa,UAACC,GAAD,EAAMT,KAAN,EAAW;QACtB,IAAIA,KAAK,IAAI,CAAT,IAAcU,MAAM,CAACC,KAAP,CAAaF,GAAG,CAACtB,oBAAD,CAAhB,CAAlB,EAA2D;QAC3D,IAAMyB,UAAU,GAAGT,iBAAiB,CAACM,GAAD,EAAMT,KAAN,EAAaX,IAAb,EAAmB;UACrDwB,GAAG,EAAE,IADgD;UAErDC,IAAI,EAAE;YACJC,OAAO,EAAEnC,UAAU,CAACoC,WAAD,CAAV,GAAwBA,WAAS,CAACP,GAAD,EAAMpB,IAAN,CAAjC,GAA+C2B,WADpD;YAEJC,OAAO,EAAEV,aAAa,CAACU,OAFnB;YAGJC,OAAO,EAAEX,aAAa,CAACW,OAHnB;YAIJC,QAAQ,EAAE,KAJN;YAKJC,UAAU,EAAE,KALR;YAMJC,KAAK;cACHC,SAAS,EAAE,OADR;cAEHC,YAAY,EAAE;YAFX,GAGAhB,aAAa,CAACc,KAHd;UAND;QAF+C,CAAnB,CAApC;QAgBAhB,KAAK,CAACmB,UAAN,GAAmBC,IAAnB,CAAwBb,UAAxB;MACD,CAnBD;IAoBD;;IACD,OAAOR,MAAP;EACD,CA9BD;AA+BD","names":["isFunction","map","isNumber","maxBy","get","FUNNEL_PERCENT","FUNNEL_CONVERSATION","FUNNEL_MAPPING_VALUE","transformData","data","originData","options","formatData","maxSize","minSize","maxYFieldValue","yField","max","min","row","index","percent","conversionTagComponent","getLineCoordinate","params","chart","getOptions","conversionTag","forEach","obj","Number","isNaN","lineOption","top","text","content","formatter_1","offsetX","offsetY","position","autoRotate","style","textAlign","textBaseline","annotation","line"],"sourceRoot":"","sources":["../../../../src/plots/funnel/geometries/common.ts"],"sourcesContent":["import { Types } from '@antv/g2';\nimport { isFunction, map, isNumber, maxBy, get } from '@antv/util';\nimport { Datum, Data } from '../../../types/common';\nimport { FUNNEL_PERCENT, FUNNEL_CONVERSATION, FUNNEL_MAPPING_VALUE } from '../constant';\nimport { Params } from '../../../core/adaptor';\nimport { FunnelOptions } from '../types';\n\n/**\n * 漏斗图 transform\n * @param geometry\n */\nexport function transformData(\n  data: FunnelOptions['data'],\n  originData: FunnelOptions['data'],\n  options: Pick<FunnelOptions, 'yField' | 'maxSize' | 'minSize'>\n): FunnelOptions['data'] {\n  let formatData = [];\n  const { yField, maxSize, minSize } = options;\n  const maxYFieldValue = get(maxBy(originData, yField), [yField]);\n  const max = isNumber(maxSize) ? maxSize : 1;\n  const min = isNumber(minSize) ? minSize : 0;\n\n  // format 数据\n  formatData = map(data, (row, index) => {\n    const percent = (row[yField] || 0) / maxYFieldValue;\n    row[FUNNEL_PERCENT] = percent;\n    row[FUNNEL_MAPPING_VALUE] = (max - min) * percent + min;\n    // 转化率数据存储前后数据\n    row[FUNNEL_CONVERSATION] = [get(data, [index - 1, yField]), row[yField]];\n    return row;\n  });\n\n  return formatData;\n}\n\n/**\n * 漏斗图通用转化率组件\n * @param getLineCoordinate 用于获取特定的 line 的位置及配置\n */\nexport function conversionTagComponent(\n  getLineCoordinate: (\n    datum: Datum,\n    datumIndex: number,\n    data: Data,\n    initLineOption: Record<string, any>\n  ) => Types.LineOption\n) {\n  return function (params: Params<FunnelOptions>): Params<FunnelOptions> {\n    const { chart, options } = params;\n    const { conversionTag } = options;\n\n    const { data } = chart.getOptions();\n\n    if (conversionTag) {\n      const { formatter } = conversionTag;\n      data.forEach((obj, index) => {\n        if (index <= 0 || Number.isNaN(obj[FUNNEL_MAPPING_VALUE])) return;\n        const lineOption = getLineCoordinate(obj, index, data, {\n          top: true,\n          text: {\n            content: isFunction(formatter) ? formatter(obj, data) : formatter,\n            offsetX: conversionTag.offsetX,\n            offsetY: conversionTag.offsetY,\n            position: 'end',\n            autoRotate: false,\n            style: {\n              textAlign: 'start',\n              textBaseline: 'middle',\n              ...conversionTag.style,\n            },\n          },\n        });\n\n        chart.annotation().line(lineOption);\n      });\n    }\n    return params;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}