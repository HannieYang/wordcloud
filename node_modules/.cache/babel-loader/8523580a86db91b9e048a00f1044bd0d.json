{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { pick, deepAssign } from '../../utils';\n/**\n *\n * @param params 分面图 参数\n * @returns facet eachView 的回调设置每个 view 的展示\n */\n\nexport function execViewAdaptor(viewOfG2, options) {\n  var data = options.data,\n      coordinate = options.coordinate,\n      interactions = options.interactions,\n      annotations = options.annotations,\n      animation = options.animation,\n      tooltip = options.tooltip,\n      axes = options.axes,\n      meta = options.meta,\n      geometries = options.geometries; // 1. data, optional\n\n  if (data) {\n    viewOfG2.data(data);\n  } // 2. meta 配置\n\n\n  var scales = {};\n\n  if (axes) {\n    each(axes, function (axis, field) {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n  }\n\n  scales = deepAssign({}, meta, scales);\n  viewOfG2.scale(scales); // 3. coordinate 配置 (默认由顶层决定)\n\n  if (coordinate) {\n    viewOfG2.coordinate(coordinate);\n  } // 4. axis 轴配置 (默认由顶层决定，但可以通过 false 强制关闭)\n\n\n  if (axes === false) {\n    viewOfG2.axis(false);\n  } else {\n    each(axes, function (axis, field) {\n      viewOfG2.axis(field, axis);\n    });\n  }\n\n  each(geometries, function (geometry) {\n    // Geometry\n    var ext = geometryAdaptor({\n      chart: viewOfG2,\n      options: geometry\n    }).ext; // Geometry adjust\n\n    var adjust = geometry.adjust;\n\n    if (adjust) {\n      ext.geometry.adjust(adjust);\n    }\n  }); // 5. interactions\n\n  each(interactions, function (interaction) {\n    if (interaction.enable === false) {\n      viewOfG2.removeInteraction(interaction.type);\n    } else {\n      viewOfG2.interaction(interaction.type, interaction.cfg);\n    }\n  }); // 6. annotations\n\n  each(annotations, function (annotation) {\n    viewOfG2.annotation()[annotation.type](__assign({}, annotation));\n  }); // 7. animation (先做动画)\n\n  if (typeof animation === 'boolean') {\n    viewOfG2.animate(false);\n  } else {\n    viewOfG2.animate(true); // 所有的 Geometry 都使用同一动画（各个图形如有区别，todo 自行覆盖）\n\n    each(viewOfG2.geometries, function (g) {\n      g.animate(animation);\n    });\n  }\n\n  if (tooltip) {\n    // 8. tooltip\n    viewOfG2.interaction('tooltip');\n    viewOfG2.tooltip(tooltip);\n  } else if (tooltip === false) {\n    viewOfG2.removeInteraction('tooltip');\n  }\n}","map":{"version":3,"mappings":"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","names":["each","geometry","geometryAdaptor","AXIS_META_CONFIG_KEYS","pick","deepAssign","execViewAdaptor","viewOfG2","options","coordinate","interactions","annotations","animation","tooltip","axes","meta","geometries","data","scales","axis","field","scale","chart","ext","adjust","interaction","enable","removeInteraction","type","cfg","annotation","__assign","animate","g"],"sourceRoot":"","sources":["../../../src/plots/facet/utils.ts"],"sourcesContent":["import { Geometry, View } from '@antv/g2';\nimport { each } from '@antv/util';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { pick, deepAssign } from '../../utils';\nimport { Axis, Interaction } from '../../types';\nimport { IView } from './types';\n\n/**\n *\n * @param params 分面图 参数\n * @returns facet eachView 的回调设置每个 view 的展示\n */\nexport function execViewAdaptor(viewOfG2: View, options: IView): void {\n  const { data, coordinate, interactions, annotations, animation, tooltip, axes, meta, geometries } = options;\n\n  // 1. data, optional\n  if (data) {\n    viewOfG2.data(data);\n  }\n\n  // 2. meta 配置\n  let scales: Record<string, any> = {};\n  if (axes) {\n    each(axes, (axis: Axis, field: string) => {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n  }\n\n  scales = deepAssign({}, meta, scales);\n  viewOfG2.scale(scales);\n\n  // 3. coordinate 配置 (默认由顶层决定)\n  if (coordinate) {\n    viewOfG2.coordinate(coordinate);\n  }\n\n  // 4. axis 轴配置 (默认由顶层决定，但可以通过 false 强制关闭)\n  if (axes === false) {\n    viewOfG2.axis(false);\n  } else {\n    each(axes, (axis: Axis, field: string) => {\n      viewOfG2.axis(field, axis);\n    });\n  }\n\n  each(geometries, (geometry) => {\n    // Geometry\n    const { ext } = geometryAdaptor({\n      chart: viewOfG2,\n      options: geometry,\n    });\n\n    // Geometry adjust\n    const { adjust } = geometry;\n    if (adjust) {\n      ext.geometry.adjust(adjust);\n    }\n  });\n\n  // 5. interactions\n  each(interactions, (interaction: Interaction) => {\n    if (interaction.enable === false) {\n      viewOfG2.removeInteraction(interaction.type);\n    } else {\n      viewOfG2.interaction(interaction.type, interaction.cfg);\n    }\n  });\n  // 6. annotations\n  each(annotations, (annotation) => {\n    viewOfG2.annotation()[annotation.type]({\n      ...annotation,\n    });\n  });\n\n  // 7. animation (先做动画)\n  if (typeof animation === 'boolean') {\n    viewOfG2.animate(false);\n  } else {\n    viewOfG2.animate(true);\n    // 所有的 Geometry 都使用同一动画（各个图形如有区别，todo 自行覆盖）\n    each(viewOfG2.geometries, (g: Geometry) => {\n      g.animate(animation);\n    });\n  }\n\n  if (tooltip) {\n    // 8. tooltip\n    viewOfG2.interaction('tooltip');\n    viewOfG2.tooltip(tooltip);\n  } else if (tooltip === false) {\n    viewOfG2.removeInteraction('tooltip');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}