{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { clamp, head, last } from '@antv/util';\nimport RectMask from './rect';\n\nfunction clampPoint(point) {\n  point.x = clamp(point.x, 0, 1);\n  point.y = clamp(point.y, 0, 1);\n}\n/**\n * @ignore\n */\n\n\nvar DimRect =\n/** @class */\nfunction (_super) {\n  __extends(DimRect, _super);\n\n  function DimRect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.dim = 'x';\n    _this.inPlot = true;\n    return _this;\n  }\n\n  DimRect.prototype.getRegion = function () {\n    var start = null;\n    var end = null;\n    var points = this.points;\n    var dim = this.dim;\n    var coord = this.context.view.getCoordinate();\n    var normalStart = coord.invert(head(points));\n    var normalEnd = coord.invert(last(points));\n\n    if (this.inPlot) {\n      // 约束到 0 - 1 范围内\n      clampPoint(normalStart);\n      clampPoint(normalEnd);\n    }\n\n    if (dim === 'x') {\n      // x 轴方向扩展, y 轴方向占满全部\n      start = coord.convert({\n        x: normalStart.x,\n        y: 0\n      });\n      end = coord.convert({\n        x: normalEnd.x,\n        y: 1\n      });\n    } else {\n      // y 轴方向扩展, x 轴方向占满全部\n      start = coord.convert({\n        x: 0,\n        y: normalStart.y\n      });\n      end = coord.convert({\n        x: 1,\n        y: normalEnd.y\n      });\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  return DimRect;\n}(RectMask);\n\nexport default DimRect;","map":{"version":3,"mappings":";AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,QAAkC,YAAlC;AAEA,OAAOC,QAAP,MAAqB,QAArB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAAyB;EACvBA,KAAK,CAACC,CAAN,GAAUN,KAAK,CAACK,KAAK,CAACC,CAAP,EAAU,CAAV,EAAa,CAAb,CAAf;EACAD,KAAK,CAACE,CAAN,GAAUP,KAAK,CAACK,KAAK,CAACE,CAAP,EAAU,CAAV,EAAa,CAAb,CAAf;AACD;AAED;;;;;AAGA;AAAA;AAAA;EAAsBC;;EAAtB;IAAA;;IACYC,YAAM,GAAN;IACAA,eAAS,IAAT;;EAwCX;;EAvCWC,8BAAV;IACE,IAAIC,KAAK,GAAG,IAAZ;IACA,IAAIC,GAAG,GAAG,IAAV;IACA,IAAMC,MAAM,GAAG,KAAKA,MAApB;IACA,IAAMC,GAAG,GAAG,KAAKA,GAAjB;IACA,IAAMC,KAAK,GAAG,KAAKC,OAAL,CAAaC,IAAb,CAAkBC,aAAlB,EAAd;IACA,IAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAN,CAAanB,IAAI,CAACY,MAAD,CAAjB,CAApB;IACA,IAAMQ,SAAS,GAAGN,KAAK,CAACK,MAAN,CAAalB,IAAI,CAACW,MAAD,CAAjB,CAAlB;;IACA,IAAI,KAAKS,MAAT,EAAiB;MACf;MACAlB,UAAU,CAACe,WAAD,CAAV;MACAf,UAAU,CAACiB,SAAD,CAAV;IACD;;IACD,IAAIP,GAAG,KAAK,GAAZ,EAAiB;MACf;MACAH,KAAK,GAAGI,KAAK,CAACQ,OAAN,CAAc;QACpBjB,CAAC,EAAEa,WAAW,CAACb,CADK;QAEpBC,CAAC,EAAE;MAFiB,CAAd,CAAR;MAIAK,GAAG,GAAGG,KAAK,CAACQ,OAAN,CAAc;QAClBjB,CAAC,EAAEe,SAAS,CAACf,CADK;QAElBC,CAAC,EAAE;MAFe,CAAd,CAAN;IAID,CAVD,MAUO;MACL;MACAI,KAAK,GAAGI,KAAK,CAACQ,OAAN,CAAc;QACpBjB,CAAC,EAAE,CADiB;QAEpBC,CAAC,EAAEY,WAAW,CAACZ;MAFK,CAAd,CAAR;MAIAK,GAAG,GAAGG,KAAK,CAACQ,OAAN,CAAc;QAClBjB,CAAC,EAAE,CADe;QAElBC,CAAC,EAAEc,SAAS,CAACd;MAFK,CAAd,CAAN;IAID;;IACD,OAAO;MACLI,KAAK,OADA;MAELC,GAAG;IAFE,CAAP;EAID,CAtCS;;EAuCZ;AAAC,CA1CD,CAAsBT,QAAtB;;AA4CA,eAAeO,OAAf","names":["clamp","head","last","RectMask","clampPoint","point","x","y","__extends","_this","DimRect","start","end","points","dim","coord","context","view","getCoordinate","normalStart","invert","normalEnd","inPlot","convert"],"sourceRoot":"","sources":["../../../../src/interaction/action/mask/dim-rect.ts"],"sourcesContent":["import { clamp, head, last } from '@antv/util';\nimport { Region } from '../../../interface';\nimport RectMask from './rect';\n\nfunction clampPoint(point) {\n  point.x = clamp(point.x, 0, 1);\n  point.y = clamp(point.y, 0, 1);\n}\n\n/**\n * @ignore\n */\nclass DimRect extends RectMask {\n  protected dim = 'x';\n  protected inPlot = true;\n  protected getRegion(): Region {\n    let start = null;\n    let end = null;\n    const points = this.points;\n    const dim = this.dim;\n    const coord = this.context.view.getCoordinate();\n    const normalStart = coord.invert(head(points));\n    const normalEnd = coord.invert(last(points));\n    if (this.inPlot) {\n      // 约束到 0 - 1 范围内\n      clampPoint(normalStart);\n      clampPoint(normalEnd);\n    }\n    if (dim === 'x') {\n      // x 轴方向扩展, y 轴方向占满全部\n      start = coord.convert({\n        x: normalStart.x,\n        y: 0,\n      });\n      end = coord.convert({\n        x: normalEnd.x,\n        y: 1,\n      });\n    } else {\n      // y 轴方向扩展, x 轴方向占满全部\n      start = coord.convert({\n        x: 0,\n        y: normalStart.y,\n      });\n      end = coord.convert({\n        x: 1,\n        y: normalEnd.y,\n      });\n    }\n    return {\n      start,\n      end,\n    };\n  }\n}\n\nexport default DimRect;\n"]},"metadata":{},"sourceType":"module"}