{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { interaction, animation, theme, scale, pattern } from '../../adaptor/common';\nimport { flow, deepAssign, renderStatistic } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { getLiquidData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var percent = options.percent,\n      liquidStyle = options.liquidStyle,\n      radius = options.radius,\n      outline = options.outline,\n      wave = options.wave,\n      shape = options.shape,\n      animation = options.animation;\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1\n    }\n  });\n  chart.data(getLiquidData(percent));\n  var color = options.color || chart.getTheme().defaultColor;\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color: color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge'\n      }\n    }\n  });\n  var ext = interval(p).ext;\n  var geometry = ext.geometry;\n  var background = chart.getTheme().background;\n  var customInfo = {\n    radius: radius,\n    outline: outline,\n    wave: wave,\n    shape: shape,\n    background: background,\n    animation: animation\n  }; // 将 radius 传入到自定义 shape 中\n\n  geometry.customInfo(customInfo); // 关闭组件\n\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n  return params;\n}\n/**\n * 统计指标文档\n * @param params\n */\n\n\nexport function statistic(params, updated) {\n  var chart = params.chart,\n      options = params.options;\n  var statistic = options.statistic,\n      percent = options.percent,\n      meta = options.meta; // 先清空标注，再重新渲染\n\n  chart.getController('annotation').clear(true);\n\n  var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n    return (v * 100).toFixed(2) + \"%\";\n  };\n\n  var contentOpt = statistic.content;\n\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n    });\n  }\n\n  renderStatistic(chart, {\n    statistic: __assign(__assign({}, statistic), {\n      content: contentOpt\n    }),\n    plotType: 'liquid'\n  }, {\n    percent: percent\n  });\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}","map":{"version":3,"mappings":"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","names":["get","isNil","interaction","animation","theme","scale","pattern","flow","deepAssign","renderStatistic","interval","getLiquidData","geometry","params","options","liquidStyle","radius","outline","wave","shape","chart","percent","min","max","data","color","getTheme","defaultColor","p","xField","yField","widthRatio","style","ext","background","customInfo","legend","axis","tooltip","statistic","updated","meta","getController","clear","metaFormatter","v","toFixed","contentOpt","content","plotType","render","adaptor"],"sourceRoot":"","sources":["../../../src/plots/liquid/adaptor.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { get, isNil } from '@antv/util';\nimport { interaction, animation, theme, scale, pattern } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign, renderStatistic } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { LiquidOptions, CustomInfo } from './types';\nimport { getLiquidData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<LiquidOptions>): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { percent, liquidStyle, radius, outline, wave, shape, animation } = options;\n\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1,\n    },\n  });\n\n  chart.data(getLiquidData(percent));\n\n  const color = options.color || chart.getTheme().defaultColor;\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge',\n      },\n    },\n  });\n  const { ext } = interval(p);\n  const geometry = ext.geometry as Geometry;\n  const { background } = chart.getTheme();\n  const customInfo: CustomInfo = {\n    radius,\n    outline,\n    wave,\n    shape,\n    background,\n    animation,\n  };\n\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo(customInfo);\n\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n\n  return params;\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nexport function statistic(params: Params<LiquidOptions>, updated?: boolean): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n\n  const metaFormatter = get(meta, ['percent', 'formatter']) || ((v) => `${(v * 100).toFixed(2)}%`);\n  let contentOpt = statistic.content;\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent),\n    });\n  }\n\n  renderStatistic(chart, { statistic: { ...statistic, content: contentOpt }, plotType: 'liquid' }, { percent });\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<LiquidOptions>) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}\n"]},"metadata":{},"sourceType":"module"}