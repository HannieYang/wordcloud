{"ast":null,"code":"var MAX_MIX_LEVEL = 5; // 最大比对层级\n\nvar toString = {}.toString; // 类型检测\n\nvar isType = function (value, type) {\n  return toString.call(value) === '[object ' + type + ']';\n};\n\nvar isArray = function (value) {\n  return isType(value, 'Array');\n};\n\nvar isObjectLike = function (value) {\n  /**\n   * isObjectLike({}) => true\n   * isObjectLike([1, 2, 3]) => true\n   * isObjectLike(Function) => false\n   */\n  return typeof value === 'object' && value !== null;\n};\n\nvar isPlainObject = function (value) {\n  /**\n   * isObjectLike(new Foo) => false\n   * isObjectLike([1, 2, 3]) => false\n   * isObjectLike({ x: 0, y: 0 }) => true\n   */\n  if (!isObjectLike(value) || !isType(value, 'Object')) {\n    return false;\n  }\n\n  var proto = value;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(value) === proto;\n};\n/***\n * @param {any} dist\n * @param {any} src\n * @param {number} level 当前层级\n * @param {number} maxLevel 最大层级\n */\n\n\nvar deep = function (dist, src, level, maxLevel) {\n  level = level || 0;\n  maxLevel = maxLevel || MAX_MIX_LEVEL;\n\n  for (var key in src) {\n    if (Object.prototype.hasOwnProperty.call(src, key)) {\n      var value = src[key];\n\n      if (!value) {\n        // null 、 undefined 等情况直接赋值\n        dist[key] = value;\n      } else {\n        if (isPlainObject(value)) {\n          if (!isPlainObject(dist[key])) {\n            dist[key] = {};\n          }\n\n          if (level < maxLevel) {\n            deep(dist[key], value, level + 1, maxLevel);\n          } else {\n            // 层级过深直接赋值，性能问题\n            dist[key] = src[key];\n          }\n        } else if (isArray(value)) {\n          dist[key] = [];\n          dist[key] = dist[key].concat(value);\n        } else {\n          dist[key] = value;\n        }\n      }\n    }\n  }\n};\n/**\n * deepAssign 功能类似 deepMix\n * 不同点在于 deepAssign 会将 null undefined 等类型直接覆盖给 source\n * 详细参考： __tests__/unit/utils/deep-assign-spec.ts\n */\n\n\nexport var deepAssign = function (rst) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  for (var i = 0; i < args.length; i += 1) {\n    deep(rst, args[i]);\n  }\n\n  return rst;\n};","map":{"version":3,"mappings":"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","names":["MAX_MIX_LEVEL","toString","isType","value","type","call","isArray","isObjectLike","isPlainObject","proto","Object","getPrototypeOf","deep","dist","src","level","maxLevel","key","prototype","hasOwnProperty","concat","deepAssign","rst","args","i","length"],"sourceRoot":"","sources":["../../src/utils/deep-assign.ts"],"sourcesContent":["const MAX_MIX_LEVEL = 5; // 最大比对层级\n\nconst toString = {}.toString;\n\n// 类型检测\nconst isType = (value: any, type: string): boolean => toString.call(value) === '[object ' + type + ']';\n\nconst isArray = (value: any): value is Array<any> => {\n  return isType(value, 'Array');\n};\n\nconst isObjectLike = (value: any): value is object => {\n  /**\n   * isObjectLike({}) => true\n   * isObjectLike([1, 2, 3]) => true\n   * isObjectLike(Function) => false\n   */\n  return typeof value === 'object' && value !== null;\n};\n\nconst isPlainObject = (value: any): value is object => {\n  /**\n   * isObjectLike(new Foo) => false\n   * isObjectLike([1, 2, 3]) => false\n   * isObjectLike({ x: 0, y: 0 }) => true\n   */\n  if (!isObjectLike(value) || !isType(value, 'Object')) {\n    return false;\n  }\n  let proto = value;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(value) === proto;\n};\n\n/***\n * @param {any} dist\n * @param {any} src\n * @param {number} level 当前层级\n * @param {number} maxLevel 最大层级\n */\nconst deep = (dist, src, level?, maxLevel?) => {\n  level = level || 0;\n  maxLevel = maxLevel || MAX_MIX_LEVEL;\n  for (const key in src) {\n    if (Object.prototype.hasOwnProperty.call(src, key)) {\n      const value = src[key];\n      if (!value) {\n        // null 、 undefined 等情况直接赋值\n        dist[key] = value;\n      } else {\n        if (isPlainObject(value)) {\n          if (!isPlainObject(dist[key])) {\n            dist[key] = {};\n          }\n          if (level < maxLevel) {\n            deep(dist[key], value, level + 1, maxLevel);\n          } else {\n            // 层级过深直接赋值，性能问题\n            dist[key] = src[key];\n          }\n        } else if (isArray(value)) {\n          dist[key] = [];\n          dist[key] = dist[key].concat(value);\n        } else {\n          dist[key] = value;\n        }\n      }\n    }\n  }\n};\n\n/**\n * deepAssign 功能类似 deepMix\n * 不同点在于 deepAssign 会将 null undefined 等类型直接覆盖给 source\n * 详细参考： __tests__/unit/utils/deep-assign-spec.ts\n */\nexport const deepAssign = (rst: any, ...args: any[]) => {\n  for (let i = 0; i < args.length; i += 1) {\n    deep(rst, args[i]);\n  }\n  return rst;\n};\n"]},"metadata":{},"sourceType":"module"}