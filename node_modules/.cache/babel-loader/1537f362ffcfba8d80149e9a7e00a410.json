{"ast":null,"code":"import CallbackAction from './callback';\nimport { get } from '@antv/util'; // Action 类的缓存\n\nvar ActionCache = {};\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\n\nexport function createAction(actionName, context) {\n  var actionOption = ActionCache[actionName];\n  var action = null;\n\n  if (actionOption) {\n    var ActionClass = actionOption.ActionClass,\n        cfg = actionOption.cfg;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n\n  return action;\n}\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\n\nexport function getActionClass(actionName) {\n  var actionOption = ActionCache[actionName];\n  return get(actionOption, 'ActionClass');\n}\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\n\nexport function registerAction(actionName, ActionClass, cfg) {\n  ActionCache[actionName] = {\n    ActionClass: ActionClass,\n    cfg: cfg\n  };\n}\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\n\nexport function unregisterAction(actionName) {\n  delete ActionCache[actionName];\n}\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\n\nexport function createCallbackAction(callback, context) {\n  var action = new CallbackAction(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}","map":{"version":3,"mappings":"AAEA,OAAOA,cAAP,MAA2B,YAA3B;AACA,SAASC,GAAT,QAAoB,YAApB,C,CAWA;;AACA,IAAMC,WAAW,GAAiC,EAAlD;AAEA;;;;;;;AAMA,OAAM,SAAUC,YAAV,CAAuBC,UAAvB,EAA2CC,OAA3C,EAAuE;EAC3E,IAAMC,YAAY,GAAGJ,WAAW,CAACE,UAAD,CAAhC;EACA,IAAIG,MAAM,GAAG,IAAb;;EACA,IAAID,YAAJ,EAAkB;IACR,eAAW,GAAUA,YAAY,YAAjC;IAAA,IAAaE,GAAG,GAAKF,YAAY,IAAjC;IACRC,MAAM,GAAG,IAAIE,WAAJ,CAAgBJ,OAAhB,EAAyBG,GAAzB,CAAT;IACAD,MAAM,CAACG,IAAP,GAAcN,UAAd;IACAG,MAAM,CAACI,IAAP;EACD;;EACD,OAAOJ,MAAP;AACD;AAED;;;;;AAIA,OAAM,SAAUK,cAAV,CAAyBR,UAAzB,EAA2C;EAC/C,IAAME,YAAY,GAAGJ,WAAW,CAACE,UAAD,CAAhC;EACA,OAAOH,GAAG,CAACK,YAAD,EAAe,aAAf,CAAV;AACD;AAED;;;;;;AAKA,OAAM,SAAUO,cAAV,CAAyBT,UAAzB,EAA6CK,WAA7C,EAA6ED,GAA7E,EAA8F;EAClGN,WAAW,CAACE,UAAD,CAAX,GAA0B;IACxBK,WAAW,aADa;IAExBD,GAAG;EAFqB,CAA1B;AAID;AAED;;;;;AAIA,OAAM,SAAUM,gBAAV,CAA2BV,UAA3B,EAA6C;EACjD,OAAOF,WAAW,CAACE,UAAD,CAAlB;AACD;AAED;;;;;;;AAMA,OAAM,SAAUW,oBAAV,CAA+BC,QAA/B,EAAyDX,OAAzD,EAAqF;EACzF,IAAME,MAAM,GAAG,IAAIP,cAAJ,CAAmBK,OAAnB,CAAf;EACAE,MAAM,CAACS,QAAP,GAAkBA,QAAlB;EACAT,MAAM,CAACG,IAAP,GAAc,UAAd;EACA,OAAOH,MAAP;AACD","names":["CallbackAction","get","ActionCache","createAction","actionName","context","actionOption","action","cfg","ActionClass","name","init","getActionClass","registerAction","unregisterAction","createCallbackAction","callback"],"sourceRoot":"","sources":["../../../src/interaction/action/register.ts"],"sourcesContent":["import { ActionCallback, IInteractionContext, LooseObject } from '../../interface';\nimport Action from './base';\nimport CallbackAction from './callback';\nimport { get } from '@antv/util';\n\n/** Action 构造函数 */\ntype ActionConstructor = new (context: IInteractionContext, cfg?: LooseObject) => Action;\n\n/** @ignore */\ninterface ActionOption {\n  ActionClass: ActionConstructor;\n  cfg: LooseObject;\n}\n\n// Action 类的缓存\nconst ActionCache: Record<string, ActionOption> = {};\n\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createAction(actionName: string, context: IInteractionContext): Action {\n  const actionOption = ActionCache[actionName];\n  let action = null;\n  if (actionOption) {\n    const { ActionClass, cfg } = actionOption;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n  return action;\n}\n\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\nexport function getActionClass(actionName: string): ActionConstructor {\n  const actionOption = ActionCache[actionName];\n  return get(actionOption, 'ActionClass');\n}\n\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\nexport function registerAction(actionName: string, ActionClass: ActionConstructor, cfg?: LooseObject) {\n  ActionCache[actionName] = {\n    ActionClass,\n    cfg,\n  };\n}\n\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\nexport function unregisterAction(actionName: string) {\n  delete ActionCache[actionName];\n}\n\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createCallbackAction(callback: ActionCallback, context: IInteractionContext): CallbackAction {\n  const action = new CallbackAction(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}\n"]},"metadata":{},"sourceType":"module"}