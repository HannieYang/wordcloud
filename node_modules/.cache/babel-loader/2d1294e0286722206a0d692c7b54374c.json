{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { DODGE_RATIO, MARGIN_RATIO } from '../constant';\nimport Adjust from './adjust';\n\nvar Dodge =\n/** @class */\nfunction (_super) {\n  __extends(Dodge, _super);\n\n  function Dodge(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.cacheMap = {};\n    _this.adjustDataArray = [];\n    _this.mergeData = [];\n    var _a = cfg.marginRatio,\n        marginRatio = _a === void 0 ? MARGIN_RATIO : _a,\n        _b = cfg.dodgeRatio,\n        dodgeRatio = _b === void 0 ? DODGE_RATIO : _b,\n        dodgeBy = cfg.dodgeBy,\n        intervalPadding = cfg.intervalPadding,\n        dodgePadding = cfg.dodgePadding,\n        xDimensionLength = cfg.xDimensionLength,\n        groupNum = cfg.groupNum,\n        defaultSize = cfg.defaultSize,\n        maxColumnWidth = cfg.maxColumnWidth,\n        minColumnWidth = cfg.minColumnWidth,\n        columnWidthRatio = cfg.columnWidthRatio,\n        customOffset = cfg.customOffset;\n    _this.marginRatio = marginRatio;\n    _this.dodgeRatio = dodgeRatio;\n    _this.dodgeBy = dodgeBy;\n    _this.intervalPadding = intervalPadding;\n    _this.dodgePadding = dodgePadding;\n    _this.xDimensionLegenth = xDimensionLength;\n    _this.groupNum = groupNum;\n    _this.defaultSize = defaultSize;\n    _this.maxColumnWidth = maxColumnWidth;\n    _this.minColumnWidth = minColumnWidth;\n    _this.columnWidthRatio = columnWidthRatio;\n    _this.customOffset = customOffset;\n    return _this;\n  }\n\n  Dodge.prototype.process = function (groupDataArray) {\n    var groupedDataArray = _.clone(groupDataArray); // 将数据数组展开一层\n\n\n    var mergeData = _.flatten(groupedDataArray);\n\n    var dodgeBy = this.dodgeBy; // 如果指定了分组 dim 的字段\n\n    var adjustDataArray = dodgeBy ? _.group(mergeData, dodgeBy) : groupedDataArray;\n    this.cacheMap = {};\n    this.adjustDataArray = adjustDataArray;\n    this.mergeData = mergeData;\n    this.adjustData(adjustDataArray, mergeData);\n    this.adjustDataArray = [];\n    this.mergeData = [];\n    return groupedDataArray;\n  };\n\n  Dodge.prototype.adjustDim = function (dim, values, data, frameIndex) {\n    var _this = this;\n\n    var customOffset = this.customOffset;\n    var map = this.getDistribution(dim);\n    var groupData = this.groupData(data, dim); // 根据值分组\n\n    _.each(groupData, function (group, key) {\n      var range; // xField 中只有一个值，不需要做 dodge\n\n      if (values.length === 1) {\n        range = {\n          pre: values[0] - 1,\n          next: values[0] + 1\n        };\n      } else {\n        // 如果有多个，则需要获取调整的范围\n        range = _this.getAdjustRange(dim, parseFloat(key), values);\n      }\n\n      _.each(group, function (d) {\n        var value = d[dim];\n        var valueArr = map[value];\n        var valIndex = valueArr.indexOf(frameIndex);\n\n        if (!_.isNil(customOffset)) {\n          var pre = range.pre,\n              next = range.next;\n          d[dim] = _.isFunction(customOffset) ? customOffset(d, range) : (pre + next) / 2 + customOffset;\n        } else {\n          d[dim] = _this.getDodgeOffset(range, valIndex, valueArr.length);\n        }\n      });\n    });\n\n    return [];\n  };\n\n  Dodge.prototype.getDodgeOffset = function (range, idx, len) {\n    var _a = this,\n        dodgeRatio = _a.dodgeRatio,\n        marginRatio = _a.marginRatio,\n        intervalPadding = _a.intervalPadding,\n        dodgePadding = _a.dodgePadding;\n\n    var pre = range.pre,\n        next = range.next;\n    var tickLength = next - pre;\n    var position; // 分多种输入情况\n\n    if (!_.isNil(intervalPadding) && _.isNil(dodgePadding) && intervalPadding >= 0) {\n      // 仅配置intervalPadding\n      var offset = this.getIntervalOnlyOffset(len, idx);\n      position = pre + offset;\n    } else if (!_.isNil(dodgePadding) && _.isNil(intervalPadding) && dodgePadding >= 0) {\n      // 仅配置dodgePadding\n      var offset = this.getDodgeOnlyOffset(len, idx);\n      position = pre + offset;\n    } else if (!_.isNil(intervalPadding) && !_.isNil(dodgePadding) && intervalPadding >= 0 && dodgePadding >= 0) {\n      // 同时配置intervalPadding和dodgePadding\n      var offset = this.getIntervalAndDodgeOffset(len, idx);\n      position = pre + offset;\n    } else {\n      // 默认情况\n      var width = tickLength * dodgeRatio / len;\n      var margin = marginRatio * width;\n      var offset = 1 / 2 * (tickLength - len * width - (len - 1) * margin) + ((idx + 1) * width + idx * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n      position = (pre + next) / 2 + offset;\n    }\n\n    return position;\n  };\n\n  Dodge.prototype.getIntervalOnlyOffset = function (len, idx) {\n    var _a = this,\n        defaultSize = _a.defaultSize,\n        intervalPadding = _a.intervalPadding,\n        xDimensionLegenth = _a.xDimensionLegenth,\n        groupNum = _a.groupNum,\n        dodgeRatio = _a.dodgeRatio,\n        maxColumnWidth = _a.maxColumnWidth,\n        minColumnWidth = _a.minColumnWidth,\n        columnWidthRatio = _a.columnWidthRatio;\n\n    var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n    var normalizedDodgePadding = (1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum * dodgeRatio / (len - 1);\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len; // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n\n    geomWidth = !_.isNil(columnWidthRatio) ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n\n    if (!_.isNil(maxColumnWidth)) {\n      var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n      geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n    }\n\n    if (!_.isNil(minColumnWidth)) {\n      var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n      geomWidth = Math.max(geomWidth, normalizedMinWidht);\n    }\n\n    geomWidth = defaultSize ? defaultSize / xDimensionLegenth : geomWidth; // 调整组内间隔\n\n    normalizedDodgePadding = ((1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum - len * geomWidth) / (len - 1);\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n\n  Dodge.prototype.getDodgeOnlyOffset = function (len, idx) {\n    var _a = this,\n        defaultSize = _a.defaultSize,\n        dodgePadding = _a.dodgePadding,\n        xDimensionLegenth = _a.xDimensionLegenth,\n        groupNum = _a.groupNum,\n        marginRatio = _a.marginRatio,\n        maxColumnWidth = _a.maxColumnWidth,\n        minColumnWidth = _a.minColumnWidth,\n        columnWidthRatio = _a.columnWidthRatio;\n\n    var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n    var normalizedIntervalPadding = 1 * marginRatio / (groupNum - 1);\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len; // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n\n    geomWidth = columnWidthRatio ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n\n    if (!_.isNil(maxColumnWidth)) {\n      var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n      geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n    }\n\n    if (!_.isNil(minColumnWidth)) {\n      var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n      geomWidth = Math.max(geomWidth, normalizedMinWidht);\n    }\n\n    geomWidth = defaultSize ? defaultSize / xDimensionLegenth : geomWidth; // 调整组间距\n\n    normalizedIntervalPadding = (1 - (geomWidth * len + normalizedDodgePadding * (len - 1)) * groupNum) / (groupNum - 1);\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n\n  Dodge.prototype.getIntervalAndDodgeOffset = function (len, idx) {\n    var _a = this,\n        intervalPadding = _a.intervalPadding,\n        dodgePadding = _a.dodgePadding,\n        xDimensionLegenth = _a.xDimensionLegenth,\n        groupNum = _a.groupNum;\n\n    var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n    var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n\n  Dodge.prototype.getDistribution = function (dim) {\n    var groupedDataArray = this.adjustDataArray;\n    var cacheMap = this.cacheMap;\n    var map = cacheMap[dim];\n\n    if (!map) {\n      map = {};\n\n      _.each(groupedDataArray, function (data, index) {\n        var values = _.valuesOfKey(data, dim);\n\n        if (!values.length) {\n          values.push(0);\n        }\n\n        _.each(values, function (val) {\n          if (!map[val]) {\n            map[val] = [];\n          }\n\n          map[val].push(index);\n        });\n      });\n\n      cacheMap[dim] = map;\n    }\n\n    return map;\n  };\n\n  return Dodge;\n}(Adjust);\n\nexport default Dodge;","map":{"version":3,"mappings":"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","names":["_","DODGE_RATIO","MARGIN_RATIO","Adjust","__extends","cfg","_super","_this","_a","_b","dodgeRatio","dodgeBy","intervalPadding","dodgePadding","xDimensionLength","groupNum","defaultSize","maxColumnWidth","minColumnWidth","columnWidthRatio","customOffset","marginRatio","xDimensionLegenth","Dodge","groupDataArray","groupedDataArray","clone","mergeData","flatten","adjustDataArray","group","cacheMap","adjustData","dim","values","data","frameIndex","map","getDistribution","groupData","each","key","range","length","pre","next","getAdjustRange","parseFloat","d","value","valueArr","valIndex","indexOf","isNil","isFunction","getDodgeOffset","idx","len","tickLength","position","offset","getIntervalOnlyOffset","getDodgeOnlyOffset","getIntervalAndDodgeOffset","width","margin","normalizedIntervalPadding","normalizedDodgePadding","geomWidth","normalizedMaxWidht","Math","min","normalizedMinWidht","max","index","valuesOfKey","push","val"],"sourceRoot":"","sources":["../../src/adjusts/dodge.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}