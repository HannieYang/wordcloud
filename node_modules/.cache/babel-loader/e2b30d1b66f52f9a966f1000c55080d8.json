{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isNil, get } from '@antv/util';\nimport { getCurrentElement, getDelegationObject, getElements, getElementValue, getScaleByField, isElementChange, isList } from '../util';\nimport StateBase from './state-base';\n\nfunction getItem(shape) {\n  return get(shape.get('delegateObject'), 'item');\n}\n/**\n * 状态量 Action 的基类，允许多个 Element 同时拥有某个状态\n * @class\n * @ignore\n */\n\n\nvar ElementState =\n/** @class */\nfunction (_super) {\n  __extends(ElementState, _super);\n\n  function ElementState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ignoreListItemStates = ['unchecked'];\n    return _this;\n  } // 是否忽略触发的列表项\n\n\n  ElementState.prototype.isItemIgnore = function (item, list) {\n    var states = this.ignoreListItemStates;\n    var filtered = states.filter(function (state) {\n      return list.hasState(item, state);\n    });\n    return !!filtered.length;\n  }; // 设置由组件选项导致的状态变化\n\n\n  ElementState.prototype.setStateByComponent = function (component, item, enable) {\n    var view = this.context.view;\n    var field = component.get('field');\n    var elements = getElements(view);\n    this.setElementsStateByItem(elements, field, item, enable);\n  }; // 处理触发源由 element 导致的状态变化\n\n\n  ElementState.prototype.setStateByElement = function (element, enable) {\n    this.setElementState(element, enable);\n  };\n  /** 组件的选项是否同 element 匹配 */\n\n\n  ElementState.prototype.isMathItem = function (element, field, item) {\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    return !isNil(value) && item.name === scale.getText(value);\n  };\n\n  ElementState.prototype.setElementsStateByItem = function (elements, field, item, enable) {\n    var _this = this;\n\n    each(elements, function (el) {\n      if (_this.isMathItem(el, field, item)) {\n        el.setState(_this.stateName, enable);\n      }\n    });\n  };\n  /** 设置状态是否激活 */\n\n\n  ElementState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      // 触发源由于 element 导致\n      if (isElementChange(this.context)) {\n        this.setStateByElement(element, enable);\n      }\n    } else {\n      // 触发源由组件导致\n      var delegateObject = getDelegationObject(this.context); // 如果触发源时列表，图例、坐标轴\n\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n            component = delegateObject.component;\n\n        if (item && component && !this.isItemIgnore(item, component)) {\n          var event_1 = this.context.event.gEvent; // 防止闪烁\n\n          if (event_1 && event_1.fromShape && event_1.toShape && getItem(event_1.fromShape) === getItem(event_1.toShape)) {\n            return;\n          }\n\n          this.setStateByComponent(component, item, enable);\n        }\n      }\n    }\n  };\n  /**\n   * 切换状态\n   */\n\n\n  ElementState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      var hasState = element.hasState(this.stateName);\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n\n\n  ElementState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n\n  return ElementState;\n}(StateBase);\n\nexport default ElementState;","map":{"version":3,"mappings":"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","names":["each","isNil","get","getCurrentElement","getDelegationObject","getElements","getElementValue","getScaleByField","isElementChange","isList","StateBase","getItem","shape","__extends","_this","ElementState","item","list","states","ignoreListItemStates","filtered","filter","state","hasState","length","component","enable","view","context","field","elements","setElementsStateByItem","element","setElementState","scale","value","name","getText","el","isMathItem","setState","stateName","setStateByElement","delegateObject","isItemIgnore","event_1","event","gEvent","fromShape","toShape","setStateByComponent","setStateEnable"],"sourceRoot":"","sources":["../../../../src/interaction/action/element/state.ts"],"sourcesContent":["import { each, isNil, get } from '@antv/util';\nimport { ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element/';\nimport {\n  getCurrentElement,\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isElementChange,\n  isList,\n} from '../util';\nimport StateBase from './state-base';\n\nfunction getItem(shape) {\n  return get(shape.get('delegateObject'), 'item');\n}\n\n/**\n * 状态量 Action 的基类，允许多个 Element 同时拥有某个状态\n * @class\n * @ignore\n */\nclass ElementState extends StateBase {\n  protected ignoreListItemStates = ['unchecked'];\n\n  // 是否忽略触发的列表项\n  private isItemIgnore(item: ListItem, list) {\n    const states = this.ignoreListItemStates;\n    const filtered = states.filter((state) => {\n      return list.hasState(item, state);\n    });\n    return !!filtered.length;\n  }\n\n  // 设置由组件选项导致的状态变化\n  private setStateByComponent(component, item: ListItem, enable: boolean) {\n    const view = this.context.view;\n    const field = component.get('field');\n    const elements = getElements(view);\n    this.setElementsStateByItem(elements, field, item, enable);\n  }\n\n  // 处理触发源由 element 导致的状态变化\n  protected setStateByElement(element: Element, enable: boolean) {\n    this.setElementState(element, enable);\n  }\n\n  /** 组件的选项是否同 element 匹配 */\n  protected isMathItem(element: Element, field: string, item: ListItem) {\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    return !isNil(value) && item.name === scale.getText(value);\n  }\n\n  protected setElementsStateByItem(elements: Element[], field: string, item: ListItem, enable: boolean) {\n    each(elements, (el) => {\n      if (this.isMathItem(el, field, item)) {\n        el.setState(this.stateName, enable);\n      }\n    });\n  }\n\n  /** 设置状态是否激活 */\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 触发源由于 element 导致\n      if (isElementChange(this.context)) {\n        this.setStateByElement(element, enable);\n      }\n    } else {\n      // 触发源由组件导致\n      const delegateObject = getDelegationObject(this.context);\n      // 如果触发源时列表，图例、坐标轴\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (item && component && !this.isItemIgnore(item, component)) {\n          const event = this.context.event.gEvent;\n          // 防止闪烁\n          if (event && event.fromShape && event.toShape && getItem(event.fromShape) === getItem(event.toShape)) {\n            return;\n          }\n          this.setStateByComponent(component, item, enable);\n        }\n      }\n    }\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = element.hasState(this.stateName);\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementState;\n"]},"metadata":{},"sourceType":"module"}