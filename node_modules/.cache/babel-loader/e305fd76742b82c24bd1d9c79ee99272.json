{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { omit } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { pick } from '../../utils';\nimport { partition } from '../../utils/hierarchy/partition';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { SUNBURST_ANCESTOR_FIELD, SUNBURST_PATH_FIELD } from './constant';\n/**\n * sunburst 处理数据\n * @param options\n */\n\nexport function transformData(options) {\n  var data = options.data,\n      colorField = options.colorField,\n      rawFields = options.rawFields,\n      _a = options.hierarchyConfig,\n      hierarchyConfig = _a === void 0 ? {} : _a;\n  var activeDepth = hierarchyConfig.activeDepth;\n  var transform = {\n    partition: partition,\n    treemap: treemap\n  }; // @ts-ignore 兼容旧版本，支持 seriesField 来作为 hierarchyConfig.field\n\n  var seriesField = options.seriesField; // @ts-ignore 兼容旧版本，支持矩阵树图形状的旭日图\n\n  var type = options.type || 'partition';\n  var nodes = transform[type](data, __assign(__assign({\n    field: seriesField || 'value'\n  }, omit(hierarchyConfig, ['activeDepth'])), {\n    // @ts-ignore\n    type: \"hierarchy.\" + type,\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    var _a;\n\n    var _b, _c, _d, _e, _f;\n\n    if (node.depth === 0) {\n      return null;\n    }\n\n    if (activeDepth > 0 && node.depth > activeDepth) {\n      return null;\n    }\n\n    var path = node.data.name;\n\n    var ancestorNode = __assign({}, node);\n\n    while (ancestorNode.depth > 1) {\n      path = ((_b = ancestorNode.parent.data) === null || _b === void 0 ? void 0 : _b.name) + \" / \" + path;\n      ancestorNode = ancestorNode.parent;\n    }\n\n    var nodeInfo = __assign(__assign(__assign({}, pick(node.data, __spreadArrays(rawFields || [], [hierarchyConfig.field]))), (_a = {}, _a[SUNBURST_PATH_FIELD] = path, _a[SUNBURST_ANCESTOR_FIELD] = ancestorNode.data.name, _a)), node); // note: 兼容旧版本\n\n\n    if (seriesField) {\n      nodeInfo[seriesField] = node.data[seriesField] || ((_d = (_c = node.parent) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d[seriesField]);\n    }\n\n    if (colorField) {\n      nodeInfo[colorField] = node.data[colorField] || ((_f = (_e = node.parent) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f[colorField]);\n    }\n\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = {\n      hierarchyConfig: hierarchyConfig,\n      colorField: colorField,\n      rawFields: rawFields\n    };\n    result.push(nodeInfo);\n  });\n  return result;\n}","map":{"version":3,"mappings":"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","names":["omit","HIERARCHY_DATA_TRANSFORM_PARAMS","pick","partition","treemap","SUNBURST_ANCESTOR_FIELD","SUNBURST_PATH_FIELD","transformData","options","colorField","rawFields","_a","hierarchyConfig","transform","seriesField","type","nodes","data","__assign","field","as","result","forEach","node","depth","activeDepth","path","name","ancestorNode","parent","_b","nodeInfo","__spreadArrays","_c","_d","_e","_f","ext","push"],"sourceRoot":"","sources":["../../../src/plots/sunburst/utils.ts"],"sourcesContent":["import { omit } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { pick } from '../../utils';\nimport { partition } from '../../utils/hierarchy/partition';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { SUNBURST_ANCESTOR_FIELD, SUNBURST_PATH_FIELD } from './constant';\nimport { SunburstOptions } from './types';\n\n/**\n * sunburst 处理数据\n * @param options\n */\nexport function transformData(options: Pick<SunburstOptions, 'data' | 'colorField' | 'rawFields' | 'hierarchyConfig'>) {\n  const { data, colorField, rawFields, hierarchyConfig = {} } = options;\n  const { activeDepth } = hierarchyConfig;\n  const transform = {\n    partition: partition,\n    treemap: treemap,\n  };\n  // @ts-ignore 兼容旧版本，支持 seriesField 来作为 hierarchyConfig.field\n  const seriesField = options.seriesField;\n  // @ts-ignore 兼容旧版本，支持矩阵树图形状的旭日图\n  const type = options.type || 'partition';\n\n  const nodes = transform[type](data, {\n    field: seriesField || 'value',\n    ...omit(hierarchyConfig, ['activeDepth']),\n    // @ts-ignore\n    type: `hierarchy.${type}`,\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n\n  nodes.forEach((node) => {\n    if (node.depth === 0) {\n      return null;\n    }\n    if (activeDepth > 0 && node.depth > activeDepth) {\n      return null;\n    }\n\n    let path = node.data.name;\n    let ancestorNode = { ...node };\n    while (ancestorNode.depth > 1) {\n      path = `${ancestorNode.parent.data?.name} / ${path}`;\n      ancestorNode = ancestorNode.parent;\n    }\n\n    const nodeInfo = {\n      ...pick(node.data, [...(rawFields || []), hierarchyConfig.field]),\n      [SUNBURST_PATH_FIELD]: path,\n      [SUNBURST_ANCESTOR_FIELD]: ancestorNode.data.name,\n      ...node,\n    };\n    // note: 兼容旧版本\n    if (seriesField) {\n      nodeInfo[seriesField] = node.data[seriesField] || node.parent?.data?.[seriesField];\n    }\n    if (colorField) {\n      nodeInfo[colorField] = node.data[colorField] || node.parent?.data?.[colorField];\n    }\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = { hierarchyConfig, colorField, rawFields };\n    result.push(nodeInfo);\n  });\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}