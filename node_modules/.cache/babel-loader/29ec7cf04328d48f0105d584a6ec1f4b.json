{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { each, isNil, isObject } from '@antv/util';\nimport { AXIS_META_CONFIG_KEYS } from '../constant';\nimport { pick, deepAssign } from '../utils';\n/**\n * 通用 legend 配置, 适用于带 colorField 或 seriesField 的图表\n * @param params\n */\n\nexport function legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField,\n      seriesField = options.seriesField;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField || seriesField) {\n    chart.legend(colorField || seriesField, legend);\n  }\n\n  return params;\n}\n/**\n * 通用 tooltip 配置\n * @param params\n */\n\nexport function tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n\n  if (tooltip !== undefined) {\n    chart.tooltip(tooltip);\n  }\n\n  return params;\n}\n/**\n * Interaction 配置\n * @param params\n */\n\nexport function interaction(params) {\n  var chart = params.chart,\n      options = params.options;\n  var interactions = options.interactions;\n  each(interactions, function (i) {\n    if (i.enable === false) {\n      chart.removeInteraction(i.type);\n    } else {\n      chart.interaction(i.type, i.cfg || {});\n    }\n  });\n  return params;\n}\n/**\n * 动画\n * @param params\n */\n\nexport function animation(params) {\n  var chart = params.chart,\n      options = params.options;\n  var animation = options.animation; // 同时设置整个 view 动画选项\n\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  } // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n\n\n  each(chart.geometries, function (g) {\n    g.animate(animation);\n  });\n  return params;\n}\n/**\n * 设置全局主题配置\n * @param params\n */\n\nexport function theme(params) {\n  var chart = params.chart,\n      options = params.options;\n  var theme = options.theme; // 存在主题才设置主题\n\n  if (theme) {\n    chart.theme(theme);\n  }\n\n  return params;\n}\n/**\n * 状态 state 配置\n * @param params\n */\n\nexport function state(params) {\n  var chart = params.chart,\n      options = params.options;\n  var state = options.state;\n\n  if (state) {\n    each(chart.geometries, function (geometry) {\n      geometry.state(state);\n    });\n  }\n\n  return params;\n}\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\n\nexport function slider(params) {\n  var chart = params.chart,\n      options = params.options;\n  var slider = options.slider;\n  chart.option('slider', slider);\n  return params;\n}\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\n\nexport function scrollbar(params) {\n  var chart = params.chart,\n      options = params.options;\n  var scrollbar = options.scrollbar;\n  chart.option('scrollbar', scrollbar);\n  return params;\n}\n/**\n * scale 的 adaptor\n * @param axes\n */\n\nexport function scale(axes, meta) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options; // 1. 轴配置中的 scale 信息\n\n    var scales = {};\n    each(axes, function (axis, field) {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    }); // 2. meta 直接是 scale 的信息\n\n    scales = deepAssign({}, meta, options.meta, scales);\n    chart.scale(scales);\n    return params;\n  };\n}\n/**\n * annotation 配置\n * @param params\n */\n\nexport function annotation(annotationOptions) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options;\n    var annotationController = chart.getController('annotation');\n    /** 自定义 annotation */\n\n    each(__spreadArrays(options.annotations || [], annotationOptions || []), function (annotationOption) {\n      // @ts-ignore\n      annotationController.annotation(annotationOption);\n    });\n    return params;\n  };\n}\n/**\n * 自动设置 limitInPlot\n * @param params\n */\n\nexport function limitInPlot(params) {\n  var chart = params.chart,\n      options = params.options;\n  var yAxis = options.yAxis,\n      limitInPlot = options.limitInPlot;\n  var value = limitInPlot; // 用户没有设置 limitInPlot，则自动根据 yAxis 是否有 min/max 来设置 limitInPlot\n\n  if (isObject(yAxis) && isNil(limitInPlot)) {\n    if (Object.values(pick(yAxis, ['min', 'max', 'minLimit', 'maxLimit'])).some(function (value) {\n      return !isNil(value);\n    })) {\n      value = true;\n    } else {\n      value = false;\n    }\n  }\n\n  chart.limitInPlot = value;\n  return params;\n}\n/**\n * 坐标系转换\n */\n\nexport function transformations(coordinateType) {\n  if (coordinateType === void 0) {\n    coordinateType = 'rect';\n  }\n\n  return function (params) {\n    var chart = params.chart,\n        options = params.options;\n    var coordinate = options.coordinate;\n    var actions = Array.from(coordinate || []).map(function (cfg) {\n      if (cfg.type === 'reflectX') return ['reflect', 'x'];\n      if (cfg.type === 'reflectY') return ['reflect', 'y'];\n      if (cfg.type === 'transpose') return ['transpose'];\n      return null;\n    }).filter(function (d) {\n      return !!d;\n    });\n\n    if (actions.length !== 0) {\n      chart.coordinate({\n        type: coordinateType,\n        actions: actions\n      });\n    }\n\n    return params;\n  };\n}\nexport { pattern } from './pattern';","map":{"version":3,"mappings":"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","names":["each","isNil","isObject","AXIS_META_CONFIG_KEYS","pick","deepAssign","legend","params","options","colorField","seriesField","chart","tooltip","undefined","interaction","interactions","i","enable","removeInteraction","type","cfg","animation","animate","geometries","g","theme","state","geometry","slider","option","scrollbar","scale","axes","meta","scales","axis","field","annotation","annotationOptions","annotationController","getController","annotations","annotationOption","limitInPlot","value","yAxis","Object","values","some","transformations","coordinateType","actions","Array","from","coordinate","map","filter","d","length","pattern"],"sourceRoot":"","sources":["../../src/adaptor/common.ts"],"sourcesContent":["import { Geometry, Types } from '@antv/g2';\nimport { each, isNil, isObject } from '@antv/util';\nimport { Params } from '../core/adaptor';\nimport { Options } from '../types';\nimport { Interaction } from '../types/interaction';\nimport { Transformations } from '../types/coordinate';\nimport { Axis } from '../types/axis';\nimport { AXIS_META_CONFIG_KEYS } from '../constant';\nimport { pick, deepAssign } from '../utils';\n\n/**\n * 通用 legend 配置, 适用于带 colorField 或 seriesField 的图表\n * @param params\n */\nexport function legend<O extends Pick<Options, 'legend'> & { colorField?: string; seriesField?: string }>(\n  params: Params<O>\n): Params<O> {\n  const { chart, options } = params;\n  const { legend, colorField, seriesField } = options;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField || seriesField) {\n    chart.legend(colorField || seriesField, legend);\n  }\n\n  return params;\n}\n\n/**\n * 通用 tooltip 配置\n * @param params\n */\nexport function tooltip<O extends Pick<Options, 'tooltip'>>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  if (tooltip !== undefined) {\n    chart.tooltip(tooltip);\n  }\n\n  return params;\n}\n\n/**\n * Interaction 配置\n * @param params\n */\nexport function interaction<O extends Pick<Options, 'interactions'>>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { interactions } = options;\n\n  each(interactions, (i: Interaction) => {\n    if (i.enable === false) {\n      chart.removeInteraction(i.type);\n    } else {\n      chart.interaction(i.type, i.cfg || {});\n    }\n  });\n\n  return params;\n}\n\n/**\n * 动画\n * @param params\n */\nexport function animation<O extends Pick<Options, 'animation'>>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  each(chart.geometries, (g: Geometry) => {\n    g.animate(animation);\n  });\n\n  return params;\n}\n\n/**\n * 设置全局主题配置\n * @param params\n */\nexport function theme<O extends Pick<Options, 'theme'>>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { theme } = options;\n\n  // 存在主题才设置主题\n  if (theme) {\n    chart.theme(theme);\n  }\n  return params;\n}\n\n/**\n * 状态 state 配置\n * @param params\n */\nexport function state<O extends Options>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { state } = options;\n\n  if (state) {\n    each(chart.geometries, (geometry: Geometry) => {\n      geometry.state(state);\n    });\n  }\n\n  return params;\n}\n\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\nexport function slider(params: Params<Options>): Params<Options> {\n  const { chart, options } = params;\n  const { slider } = options;\n\n  chart.option('slider', slider);\n\n  return params;\n}\n\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\nexport function scrollbar(params: Params<Options>): Params<Options> {\n  const { chart, options } = params;\n  const { scrollbar } = options;\n\n  chart.option('scrollbar', scrollbar);\n\n  return params;\n}\n\n/**\n * scale 的 adaptor\n * @param axes\n */\nexport function scale(axes: Record<string, Axis>, meta?: Options['meta']) {\n  return function <O extends Pick<Options, 'meta'>>(params: Params<O>): Params<O> {\n    const { chart, options } = params;\n\n    // 1. 轴配置中的 scale 信息\n    let scales: Record<string, any> = {};\n    each(axes, (axis: Axis, field: string) => {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n\n    // 2. meta 直接是 scale 的信息\n    scales = deepAssign({}, meta, options.meta, scales);\n\n    chart.scale(scales);\n\n    return params;\n  };\n}\n\n/**\n * annotation 配置\n * @param params\n */\nexport function annotation(annotationOptions?: Options['annotations']) {\n  return function <O extends Pick<Options, 'annotations'>>(params: Params<O>): Params<O> {\n    const { chart, options } = params;\n\n    const annotationController = chart.getController('annotation');\n\n    /** 自定义 annotation */\n    each([...(options.annotations || []), ...(annotationOptions || [])], (annotationOption) => {\n      // @ts-ignore\n      annotationController.annotation(annotationOption);\n    });\n\n    return params;\n  };\n}\n\n/**\n * 自动设置 limitInPlot\n * @param params\n */\nexport function limitInPlot(params: Params<Options>): Params<Options> {\n  const { chart, options } = params;\n  const { yAxis, limitInPlot } = options;\n\n  let value = limitInPlot;\n\n  // 用户没有设置 limitInPlot，则自动根据 yAxis 是否有 min/max 来设置 limitInPlot\n  if (isObject(yAxis) && isNil(limitInPlot)) {\n    if (Object.values(pick(yAxis, ['min', 'max', 'minLimit', 'maxLimit'])).some((value) => !isNil(value))) {\n      value = true;\n    } else {\n      value = false;\n    }\n  }\n  chart.limitInPlot = value;\n\n  return params;\n}\n\n/**\n * 坐标系转换\n */\nexport function transformations(coordinateType: Types.CoordinateOption['type'] = 'rect') {\n  return (params: Params<Options & { coordinate: Transformations }>) => {\n    const { chart, options } = params;\n    const { coordinate } = options;\n\n    const actions: Types.CoordinateActions[] = Array.from(coordinate || [])\n      .map((cfg) => {\n        if (cfg.type === 'reflectX') return ['reflect', 'x'] as Types.CoordinateActions;\n        if (cfg.type === 'reflectY') return ['reflect', 'y'] as Types.CoordinateActions;\n        if (cfg.type === 'transpose') return ['transpose'] as Types.CoordinateActions;\n\n        return null;\n      })\n      .filter((d) => !!d);\n\n    if (actions.length !== 0) {\n      chart.coordinate({ type: coordinateType, actions });\n    }\n\n    return params;\n  };\n}\n\nexport { pattern } from './pattern';\n"]},"metadata":{},"sourceType":"module"}