{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nvar STATUS_UNACTIVE = 'inactive';\nvar STATUS_ACTIVE = 'active';\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\n\nvar ListHighlight =\n/** @class */\nfunction (_super) {\n  __extends(ListHighlight, _super);\n\n  function ListHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stateName = STATUS_ACTIVE;\n    _this.ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n\n    return _this;\n  } // 如果 item.name 匹配，则设置 highlight 以及取消\n\n\n  ListHighlight.prototype.setItemsState = function (list, name, enable) {\n    this.setHighlightBy(list, function (item) {\n      return item.name === name;\n    }, enable);\n  }; // 单个 item 设置状态\n\n\n  ListHighlight.prototype.setItemState = function (list, item, enable) {\n    var items = list.getItems();\n    this.setHighlightBy(list, function (el) {\n      return el === item;\n    }, enable);\n  }; // 根据条件设置 highlight\n\n\n  ListHighlight.prototype.setHighlightBy = function (list, callback, enable) {\n    var items = list.getItems();\n\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      var activeItems = list.getItemsByState(STATUS_ACTIVE);\n      var allCancel_1 = true; // 检测 activeItems 是否要全部取消\n\n      each(activeItems, function (item) {\n        if (!callback(item)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n\n      if (allCancel_1) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, function (item) {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n\n\n  ListHighlight.prototype.highlight = function () {\n    this.setState();\n  }; // 需要全部清理 active 和 unactive\n\n\n  ListHighlight.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  };\n\n  return ListHighlight;\n}(ListState);\n\nexport default ListHighlight;","map":{"version":3,"mappings":"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","names":["each","clearList","ListState","STATUS_UNACTIVE","STATUS_ACTIVE","__extends","_this","ListHighlight","list","name","enable","setHighlightBy","item","items","getItems","el","callback","hasState","setItemState","activeItems","getItemsByState","allCancel_1","clear","setState","triggerInfo","getTriggerListInfo","components","getAllowComponents","component","clearItemsState"],"sourceRoot":"","sources":["../../../../src/interaction/action/component/list-highlight.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nclass ListHighlight extends ListState {\n  protected stateName: string = STATUS_ACTIVE;\n  protected ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    this.setHighlightBy(list, (item) => item.name === name, enable);\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    const items = list.getItems();\n    this.setHighlightBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 highlight\n  private setHighlightBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      const activeItems = list.getItemsByState(STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, (item) => {\n        if (!callback(item)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, (item) => {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  public highlight() {\n    this.setState();\n  }\n\n  // 需要全部清理 active 和 unactive\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  }\n}\n\nexport default ListHighlight;\n"]},"metadata":{},"sourceType":"module"}