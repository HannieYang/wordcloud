{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __extends, __read } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getDelegationObject, getElements, getElementValue, getScaleByField, isList, isSlider, isMask, getMaskedElements } from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\n\nvar ElementFilter =\n/** @class */\nfunction (_super) {\n  __extends(ElementFilter, _super);\n\n  function ElementFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 过滤\n   */\n\n\n  ElementFilter.prototype.filter = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var view = this.context.view;\n    var elements = getElements(view);\n\n    if (isMask(this.context)) {\n      var maskElements_1 = getMaskedElements(this.context, 10);\n\n      if (maskElements_1) {\n        each(elements, function (el) {\n          if (maskElements_1.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      var component = delegateObject.component;\n      var field_1 = component.get('field'); // 列表类的组件能够触发\n\n      if (isList(delegateObject)) {\n        if (field_1) {\n          var unCheckedItems = component.getItemsByState('unchecked');\n          var scale_1 = getScaleByField(view, field_1);\n          var names_1 = unCheckedItems.map(function (item) {\n            return item.name;\n          }); // 直接控制显示、隐藏\n\n          each(elements, function (el) {\n            var value = getElementValue(el, field_1);\n            var text = scale_1.getText(value);\n\n            if (names_1.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        var range = component.getValue();\n\n        var _a = __read(range, 2),\n            min_1 = _a[0],\n            max_1 = _a[1];\n\n        each(elements, function (el) {\n          var value = getElementValue(el, field_1);\n\n          if (value >= min_1 && value <= max_1) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  };\n  /**\n   * 清除过滤\n   */\n\n\n  ElementFilter.prototype.clear = function () {\n    var elements = getElements(this.context.view);\n    each(elements, function (el) {\n      el.show();\n    });\n  };\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n\n\n  ElementFilter.prototype.reset = function () {\n    this.clear();\n  };\n\n  return ElementFilter;\n}(Action);\n\nexport default ElementFilter;","map":{"version":3,"mappings":"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","names":["each","Action","getDelegationObject","getElements","getElementValue","getScaleByField","isList","isSlider","isMask","getMaskedElements","__extends","ElementFilter","delegateObject","context","view","elements","maskElements_1","el","includes","show","hide","field_1","component","get","unCheckedItems","getItemsByState","scale_1","names_1","map","item","name","value","text","getText","indexOf","range","getValue","min_1","max_1","clear"],"sourceRoot":"","sources":["../../../../src/interaction/action/element/filter.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport Action from '../base';\nimport {\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isList,\n  isSlider,\n  isMask,\n  getMaskedElements,\n} from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\nclass ElementFilter extends Action {\n  /**\n   * 过滤\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    const view = this.context.view;\n    const elements = getElements(view);\n    if (isMask(this.context)) {\n      const maskElements = getMaskedElements(this.context, 10);\n      if (maskElements) {\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names = unCheckedItems.map((item) => item.name);\n          // 直接控制显示、隐藏\n          each(elements, (el) => {\n            const value = getElementValue(el, field);\n            const text = scale.getText(value);\n            if (names.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        each(elements, (el) => {\n          const value = getElementValue(el, field);\n          if (value >= min && value <= max) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * 清除过滤\n   */\n  public clear() {\n    const elements = getElements(this.context.view);\n    each(elements, (el) => {\n      el.show();\n    });\n  }\n\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n  public reset() {\n    this.clear();\n  }\n}\n\nexport default ElementFilter;\n"]},"metadata":{},"sourceType":"module"}