{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { interaction, animation, theme, scale, tooltip, legend, annotation } from '../../adaptor/common';\nimport { flow, deepAssign, findGeometry, transformLabel } from '../../utils';\nimport { interval, point } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { processIllegalData } from '../../utils';\nimport { getScaleMax, getStackedData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var style = options.barStyle,\n      color = options.color,\n      tooltip = options.tooltip,\n      colorField = options.colorField,\n      type = options.type,\n      xField = options.xField,\n      yField = options.yField,\n      data = options.data; // 处理不合法的数据\n\n  var processData = processIllegalData(data, yField);\n  chart.data(processData);\n  var p = deepAssign({}, params, {\n    options: {\n      tooltip: tooltip,\n      seriesField: colorField,\n      interval: {\n        style: style,\n        color: color,\n        shape: type === 'line' ? 'line' : 'intervel'\n      },\n      // 柱子的一些样式设置：柱子最小宽度、柱子最大宽度、柱子背景\n      minColumnWidth: options.minBarWidth,\n      maxColumnWidth: options.maxBarWidth,\n      columnBackground: options.barBackground\n    }\n  });\n  interval(p);\n\n  if (type === 'line') {\n    point({\n      chart: chart,\n      options: {\n        xField: xField,\n        yField: yField,\n        seriesField: colorField,\n        point: {\n          shape: 'circle',\n          color: color\n        }\n      }\n    });\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  var _a;\n\n  var options = params.options;\n  var yField = options.yField,\n      xField = options.xField,\n      data = options.data,\n      isStack = options.isStack,\n      isGroup = options.isGroup,\n      colorField = options.colorField,\n      maxAngle = options.maxAngle;\n  var actualData = isStack && !isGroup && colorField ? getStackedData(data, xField, yField) : data;\n  var processData = processIllegalData(actualData, yField);\n  return flow(scale((_a = {}, _a[yField] = {\n    min: 0,\n    max: getScaleMax(maxAngle, yField, processData)\n  }, _a)))(params);\n}\n/**\n * coordinate 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var radius = options.radius,\n      innerRadius = options.innerRadius,\n      startAngle = options.startAngle,\n      endAngle = options.endAngle;\n  chart.coordinate({\n    type: 'polar',\n    cfg: {\n      radius: radius,\n      innerRadius: innerRadius,\n      startAngle: startAngle,\n      endAngle: endAngle\n    }\n  }).transpose();\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nexport function axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      xAxis = options.xAxis;\n  chart.axis(xField, xAxis);\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      yField = options.yField;\n  var intervalGeometry = findGeometry(chart, 'interval'); // label 为 false, 空 则不显示 label\n\n  if (!label) {\n    intervalGeometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    intervalGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign(__assign({}, transformLabel(cfg)), {\n        type: 'polar'\n      })\n    });\n  }\n\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(pattern('barStyle'), geometry, meta, axis, coordinate, interaction, animation, theme, tooltip, legend, annotation(), label)(params);\n}","map":{"version":3,"mappings":"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","names":["interaction","animation","theme","scale","tooltip","legend","annotation","flow","deepAssign","findGeometry","transformLabel","interval","point","pattern","processIllegalData","getScaleMax","getStackedData","geometry","params","options","style","color","colorField","type","xField","yField","data","processData","chart","p","seriesField","shape","minColumnWidth","minBarWidth","maxColumnWidth","maxBarWidth","columnBackground","barBackground","meta","isStack","isGroup","maxAngle","actualData","_a","min","max","coordinate","innerRadius","startAngle","endAngle","cfg","radius","transpose","axis","xAxis","label","intervalGeometry","fields","callback","adaptor"],"sourceRoot":"","sources":["../../../src/plots/radial-bar/adaptor.ts"],"sourcesContent":["import { interaction, animation, theme, scale, tooltip, legend, annotation } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign, findGeometry, transformLabel } from '../../utils';\nimport { interval, point } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { processIllegalData } from '../../utils';\nimport { RadialBarOptions } from './types';\nimport { getScaleMax, getStackedData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { barStyle: style, color, tooltip, colorField, type, xField, yField, data } = options;\n\n  // 处理不合法的数据\n  const processData = processIllegalData(data, yField);\n  chart.data(processData);\n\n  const p = deepAssign({}, params, {\n    options: {\n      tooltip,\n      seriesField: colorField,\n      interval: {\n        style,\n        color,\n        shape: type === 'line' ? 'line' : 'intervel',\n      },\n      // 柱子的一些样式设置：柱子最小宽度、柱子最大宽度、柱子背景\n      minColumnWidth: options.minBarWidth,\n      maxColumnWidth: options.maxBarWidth,\n      columnBackground: options.barBackground,\n    },\n  });\n  interval(p);\n  if (type === 'line') {\n    point({\n      chart,\n      options: { xField, yField, seriesField: colorField, point: { shape: 'circle', color } },\n    });\n  }\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { options } = params;\n  const { yField, xField, data, isStack, isGroup, colorField, maxAngle } = options;\n\n  const actualData = isStack && !isGroup && colorField ? getStackedData(data, xField, yField) : data;\n  const processData = processIllegalData(actualData, yField);\n  return flow(\n    scale({\n      [yField]: {\n        min: 0,\n        max: getScaleMax(maxAngle, yField, processData),\n      },\n    })\n  )(params);\n}\n\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { radius, innerRadius, startAngle, endAngle } = options;\n\n  chart\n    .coordinate({\n      type: 'polar',\n      cfg: {\n        radius,\n        innerRadius,\n        startAngle,\n        endAngle,\n      },\n    })\n    .transpose();\n  return params;\n}\n\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { xField, xAxis } = options;\n  chart.axis(xField, xAxis);\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { label, yField } = options;\n\n  const intervalGeometry = findGeometry(chart, 'interval');\n\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    intervalGeometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    intervalGeometry.label({\n      fields: [yField],\n      callback,\n      cfg: {\n        ...transformLabel(cfg),\n        type: 'polar',\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<RadialBarOptions>) {\n  return flow(\n    pattern('barStyle'),\n    geometry,\n    meta,\n    axis,\n    coordinate,\n    interaction,\n    animation,\n    theme,\n    tooltip,\n    legend,\n    annotation(),\n    label\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module"}