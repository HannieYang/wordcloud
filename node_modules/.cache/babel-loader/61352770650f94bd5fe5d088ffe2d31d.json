{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport colorUtil from '@antv/color-util';\n/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\n\nvar each = function (f) {\n  return function (c0, c1) {\n    var out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n  };\n};\n/**\n * 混合方法集合\n */\n\n\nvar blendObject = {\n  normal: function (a) {\n    return a;\n  },\n  multiply: function (a, b) {\n    return a * b / 255;\n  },\n  screen: function (a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  },\n  overlay: function (a, b) {\n    return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n  },\n  darken: function (a, b) {\n    return a > b ? b : a;\n  },\n  lighten: function (a, b) {\n    return a > b ? a : b;\n  },\n  dodge: function (a, b) {\n    if (a === 255) return 255;\n    a = 255 * (b / 255) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n  },\n  burn: function (a, b) {\n    // 参考 w3c 的写法，考虑除数为 0 的情况\n    if (b === 255) return 255;else if (a === 0) return 0;else return 255 * (1 - Math.min(1, (1 - b / 255) / (a / 255)));\n  }\n};\n/**\n * 获取混合方法\n */\n\nexport var innerBlend = function (mode) {\n  if (!blendObject[mode]) {\n    throw new Error('unknown blend mode ' + mode);\n  }\n\n  return blendObject[mode];\n};\n/**\n * 混合颜色，并处理透明度情况\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c0\n * @param c1\n * @param mode 混合模式\n * @return rbga\n */\n\nexport function blend(c0, c1, mode) {\n  if (mode === void 0) {\n    mode = 'normal';\n  } // blendRgbArr: 生成不考虑透明度的 blend color: [r, g, b]\n\n\n  var blendRgbArr = each(innerBlend(mode))(colorToArr(c0), colorToArr(c1));\n\n  var _a = colorToArr(c0),\n      r0 = _a[0],\n      g0 = _a[1],\n      b0 = _a[2],\n      a0 = _a[3];\n\n  var _b = colorToArr(c1),\n      r1 = _b[0],\n      g1 = _b[1],\n      b1 = _b[2],\n      a1 = _b[3];\n\n  var a = Number((a0 + a1 * (1 - a0)).toFixed(2));\n  var r = Math.round((a0 * (1 - a1) * (r0 / 255) + a0 * a1 * (blendRgbArr[0] / 255) + (1 - a0) * a1 * (r1 / 255)) / a * 255);\n  var g = Math.round((a0 * (1 - a1) * (g0 / 255) + a0 * a1 * (blendRgbArr[1] / 255) + (1 - a0) * a1 * (g1 / 255)) / a * 255);\n  var b = Math.round((a0 * (1 - a1) * (b0 / 255) + a0 * a1 * (blendRgbArr[2] / 255) + (1 - a0) * a1 * (b1 / 255)) / a * 255);\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n/**\n * 统一颜色输入的格式 [r, g, b, a]\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c color\n * @return [r, g, b, a]\n */\n\nexport function colorToArr(c) {\n  var color = c.replace('/s+/g', ''); // 去除所有空格\n\n  var rgbaArr; // 'red' -> [r, g, b, 1]\n\n  if (typeof color === 'string' && !color.startsWith('rgba') && !color.startsWith('#')) {\n    return rgbaArr = colorUtil.rgb2arr(colorUtil.toRGB(color)).concat([1]);\n  } // rgba(255, 200, 125, 0.5) -> [r, g, b, a]\n\n\n  if (color.startsWith('rgba')) rgbaArr = color.replace('rgba(', '').replace(')', '').split(','); // '#fff000' -> [r, g, b, 1]\n\n  if (color.startsWith('#')) rgbaArr = colorUtil.rgb2arr(color).concat([1]); // 如果是 16 进制（6 位数），默认透明度 1\n  // [r, g, b, a] 前三位取整\n\n  return rgbaArr.map(function (item, index) {\n    return index === 3 ? Number(item) : item | 0;\n  });\n}","map":{"version":3,"mappings":"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","names":["colorUtil","each","f","c0","c1","out","blendObject","normal","a","multiply","b","screen","overlay","darken","lighten","dodge","burn","Math","min","innerBlend","mode","Error","blend","blendRgbArr","colorToArr","r0","g0","b0","a0","r1","g1","b1","a1","Number","toFixed","r","round","g","c","color","replace","rgbaArr","startsWith","rgb2arr","toRGB","concat","split","map","item","index"],"sourceRoot":"","sources":["../../../src/utils/color/blend.ts"],"sourcesContent":["import colorUtil from '@antv/color-util';\n/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\n\nconst each =\n  (f) =>\n  (c0: number[], c1: number[]): number[] => {\n    const out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n  };\n\n/**\n * 混合方法集合\n */\nconst blendObject = {\n  normal: (a: number) => a,\n  multiply: (a: number, b: number) => (a * b) / 255,\n  screen: (a: number, b: number) => 255 * (1 - (1 - a / 255) * (1 - b / 255)),\n  overlay: (a: number, b: number) => (b < 128 ? (2 * a * b) / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255))),\n  darken: (a: number, b: number) => (a > b ? b : a),\n  lighten: (a: number, b: number) => (a > b ? a : b),\n  dodge: (a: number, b: number) => {\n    if (a === 255) return 255;\n    a = (255 * (b / 255)) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n  },\n  burn: (a: number, b: number) => {\n    // 参考 w3c 的写法，考虑除数为 0 的情况\n    if (b === 255) return 255;\n    else if (a === 0) return 0;\n    else return 255 * (1 - Math.min(1, (1 - b / 255) / (a / 255)));\n  },\n};\n\n/**\n * 获取混合方法\n */\nexport const innerBlend = (mode: string) => {\n  if (!blendObject[mode]) {\n    throw new Error('unknown blend mode ' + mode);\n  }\n  return blendObject[mode];\n};\n\n/**\n * 混合颜色，并处理透明度情况\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c0\n * @param c1\n * @param mode 混合模式\n * @return rbga\n */\nexport function blend(c0: string, c1: string, mode = 'normal') {\n  // blendRgbArr: 生成不考虑透明度的 blend color: [r, g, b]\n  const blendRgbArr = each(innerBlend(mode))(colorToArr(c0), colorToArr(c1));\n\n  const [r0, g0, b0, a0] = colorToArr(c0);\n  const [r1, g1, b1, a1] = colorToArr(c1);\n\n  const a = Number((a0 + a1 * (1 - a0)).toFixed(2));\n\n  const r = Math.round(\n    ((a0 * (1 - a1) * (r0 / 255) + a0 * a1 * (blendRgbArr[0] / 255) + (1 - a0) * a1 * (r1 / 255)) / a) * 255\n  );\n  const g = Math.round(\n    ((a0 * (1 - a1) * (g0 / 255) + a0 * a1 * (blendRgbArr[1] / 255) + (1 - a0) * a1 * (g1 / 255)) / a) * 255\n  );\n  const b = Math.round(\n    ((a0 * (1 - a1) * (b0 / 255) + a0 * a1 * (blendRgbArr[2] / 255) + (1 - a0) * a1 * (b1 / 255)) / a) * 255\n  );\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\n/**\n * 统一颜色输入的格式 [r, g, b, a]\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c color\n * @return [r, g, b, a]\n */\nexport function colorToArr(c: string): number[] {\n  const color = c.replace('/s+/g', ''); // 去除所有空格\n  let rgbaArr: any[];\n\n  // 'red' -> [r, g, b, 1]\n  if (typeof color === 'string' && !color.startsWith('rgba') && !color.startsWith('#')) {\n    return (rgbaArr = colorUtil.rgb2arr(colorUtil.toRGB(color)).concat([1]));\n  }\n\n  // rgba(255, 200, 125, 0.5) -> [r, g, b, a]\n  if (color.startsWith('rgba')) rgbaArr = color.replace('rgba(', '').replace(')', '').split(',');\n\n  // '#fff000' -> [r, g, b, 1]\n  if (color.startsWith('#')) rgbaArr = colorUtil.rgb2arr(color).concat([1]); // 如果是 16 进制（6 位数），默认透明度 1\n\n  // [r, g, b, a] 前三位取整\n  return rgbaArr.map((item, index) => (index === 3 ? Number(item) : item | 0));\n}\n"]},"metadata":{},"sourceType":"module"}