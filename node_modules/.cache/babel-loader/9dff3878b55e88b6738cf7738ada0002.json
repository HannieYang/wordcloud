{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { deepMix, get, isBoolean } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getName } from './scale';\nimport { vec2 } from '@antv/matrix-util';\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is rect\n * @param direction\n * @returns axis coordinate region\n */\n\nexport function getLineAxisRelativeRegion(direction) {\n  var start;\n  var end;\n\n  switch (direction) {\n    case DIRECTION.TOP:\n      start = {\n        x: 0,\n        y: 1\n      };\n      end = {\n        x: 1,\n        y: 1\n      };\n      break;\n\n    case DIRECTION.RIGHT:\n      start = {\n        x: 1,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 1\n      };\n      break;\n\n    case DIRECTION.BOTTOM:\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 0\n      };\n      break;\n\n    case DIRECTION.LEFT:\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 0,\n        y: 1\n      };\n      break;\n\n    default:\n      start = end = {\n        x: 0,\n        y: 0\n      };\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is polar\n * @param coordinate\n * @returns axis coordinate region\n */\n\nexport function getCircleAxisRelativeRegion(coordinate) {\n  var start;\n  var end;\n\n  if (coordinate.isTransposed) {\n    start = {\n      x: 0,\n      y: 0\n    };\n    end = {\n      x: 1,\n      y: 0\n    };\n  } else {\n    start = {\n      x: 0,\n      y: 0\n    };\n    end = {\n      x: 0,\n      y: 1\n    };\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * @ignore\n * get the axis region from coordinate\n * @param coordinate\n * @param direction\n * @returns the axis region (start point, end point)\n */\n\nexport function getAxisRegion(coordinate, direction) {\n  var region = {\n    start: {\n      x: 0,\n      y: 0\n    },\n    end: {\n      x: 0,\n      y: 0\n    }\n  };\n\n  if (coordinate.isRect) {\n    region = getLineAxisRelativeRegion(direction);\n  } else if (coordinate.isPolar) {\n    region = getCircleAxisRelativeRegion(coordinate);\n  }\n\n  var start = region.start,\n      end = region.end;\n  return {\n    start: coordinate.convert(start),\n    end: coordinate.convert(end)\n  };\n}\n/**\n * @ignore\n * get axis factor\n * @param coordinate\n * @param direction\n * @returns factor\n */\n\nexport function getAxisFactor(coordinate, direction) {\n  // rect coordinate, by direction\n  if (coordinate.isRect) {\n    return coordinate.isTransposed ? [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(direction) ? 1 : -1 : [DIRECTION.BOTTOM, DIRECTION.RIGHT].includes(direction) ? -1 : 1;\n  } // polar y axis, by angle\n\n\n  if (coordinate.isPolar) {\n    var startAngle = coordinate.x.start;\n    return startAngle < 0 ? -1 : 1;\n  }\n\n  return 1;\n}\n/**\n * @ignore\n * whether the axis isVertical\n * @param region\n * @returns isVertical\n */\n\nexport function isVertical(region) {\n  var start = region.start,\n      end = region.end;\n  return start.x === end.x;\n}\n/**\n * @ignore\n * get factor by region (real position)\n * @param region\n * @param center\n * @returns factor\n */\n\nexport function getAxisFactorByRegion(region, center) {\n  var start = region.start,\n      end = region.end;\n  var isAxisVertical = isVertical(region); // 垂直\n\n  if (isAxisVertical) {\n    // 左方,从下到上、右方,从上到下\n    if ((start.y - end.y) * (center.x - start.x) > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  } else {\n    // 下方,从左到右、上方,从右到做\n    if ((end.x - start.x) * (start.y - center.y) > 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n/**\n * @ignore\n * get the axis cfg from theme, will mix the common cfg of legend theme\n *\n * @param theme view theme object\n * @param direction axis direction\n * @returns axis theme cfg\n */\n\nexport function getAxisThemeCfg(theme, direction) {\n  var axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common'], {}), deepMix({}, get(axisTheme, [direction], {})));\n}\n/**\n * get the options of axis title，mix the cfg from theme, avoid common themeCfg not work\n * @param theme\n * @param direction\n * @param axisOptions\n * @returns axis title options\n */\n\nexport function getAxisTitleOptions(theme, direction, axisOptions) {\n  var axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common', 'title'], {}), deepMix({}, get(axisTheme, [direction, 'title'], {})), axisOptions);\n}\n/**\n * @ignore\n * get circle axis center and radius\n * @param coordinate\n */\n\nexport function getCircleAxisCenterRadius(coordinate) {\n  // @ts-ignore\n  var x = coordinate.x,\n      y = coordinate.y,\n      center = coordinate.circleCenter;\n  var isReflectY = y.start > y.end;\n  var start = coordinate.isTransposed ? coordinate.convert({\n    x: isReflectY ? 0 : 1,\n    y: 0\n  }) : coordinate.convert({\n    x: 0,\n    y: isReflectY ? 0 : 1\n  });\n  var startVector = [start.x - center.x, start.y - center.y];\n  var normalVector = [1, 0];\n  var startAngle = start.y > center.y ? vec2.angle(startVector, normalVector) : vec2.angle(startVector, normalVector) * -1;\n  var endAngle = startAngle + (x.end - x.start);\n  var radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));\n  return {\n    center: center,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}\n/**\n * @ignore\n * 从配置中获取单个字段的 axis 配置\n * @param axes\n * @param field\n * @returns the axis option of field\n */\n\nexport function getAxisOption(axes, field) {\n  if (isBoolean(axes)) {\n    return axes === false ? false : {};\n  }\n\n  return get(axes, [field]);\n}\n/**\n * @ignore\n * 如果配置了 position，则使用配置\n * @param axisOption\n * @param def\n */\n\nexport function getAxisDirection(axisOption, def) {\n  return get(axisOption, 'position', def);\n}\n/**\n * 获取 axis 的 title 文本\n * @param scale\n * @param axisOption\n */\n\nexport function getAxisTitleText(scale, axisOption) {\n  return get(axisOption, ['title', 'text'], getName(scale));\n}","map":{"version":3,"mappings":"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","names":["deepMix","get","isBoolean","DIRECTION","getName","vec2","getLineAxisRelativeRegion","direction","start","end","TOP","x","y","RIGHT","BOTTOM","LEFT","getCircleAxisRelativeRegion","coordinate","isTransposed","getAxisRegion","region","isRect","isPolar","convert","getAxisFactor","includes","startAngle","isVertical","getAxisFactorByRegion","center","isAxisVertical","getAxisThemeCfg","theme","axisTheme","getAxisTitleOptions","axisOptions","getCircleAxisCenterRadius","isReflectY","startVector","normalVector","angle","endAngle","radius","Math","sqrt","getAxisOption","axes","field","getAxisDirection","axisOption","def","getAxisTitleText","scale"],"sourceRoot":"","sources":["../../src/util/axis.ts"],"sourcesContent":["import { deepMix, get, isBoolean } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { Coordinate, Scale } from '../dependents';\nimport { AxisCfg, AxisOption, Point, Region } from '../interface';\nimport { getName } from './scale';\nimport { vec2 } from '@antv/matrix-util';\n\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is rect\n * @param direction\n * @returns axis coordinate region\n */\nexport function getLineAxisRelativeRegion(direction: DIRECTION): Region {\n  let start;\n  let end;\n\n  switch (direction) {\n    case DIRECTION.TOP:\n      start = { x: 0, y: 1 };\n      end = { x: 1, y: 1 };\n      break;\n    case DIRECTION.RIGHT:\n      start = { x: 1, y: 0 };\n      end = { x: 1, y: 1 };\n      break;\n    case DIRECTION.BOTTOM:\n      start = { x: 0, y: 0 };\n      end = { x: 1, y: 0 };\n      break;\n    case DIRECTION.LEFT:\n      start = { x: 0, y: 0 };\n      end = { x: 0, y: 1 };\n      break;\n    default:\n      start = end = { x: 0, y: 0 };\n  }\n\n  return { start, end };\n}\n\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is polar\n * @param coordinate\n * @returns axis coordinate region\n */\nexport function getCircleAxisRelativeRegion(coordinate: Coordinate) {\n  let start;\n  let end;\n  if (coordinate.isTransposed) {\n    start = {\n      x: 0,\n      y: 0,\n    };\n    end = {\n      x: 1,\n      y: 0,\n    };\n  } else {\n    start = {\n      x: 0,\n      y: 0,\n    };\n    end = {\n      x: 0,\n      y: 1,\n    };\n  }\n\n  return { start, end };\n}\n\n/**\n * @ignore\n * get the axis region from coordinate\n * @param coordinate\n * @param direction\n * @returns the axis region (start point, end point)\n */\nexport function getAxisRegion(coordinate: Coordinate, direction: DIRECTION): Region {\n  let region = { start: { x: 0, y: 0 }, end: { x: 0, y: 0 } };\n  if (coordinate.isRect) {\n    region = getLineAxisRelativeRegion(direction);\n  } else if (coordinate.isPolar) {\n    region = getCircleAxisRelativeRegion(coordinate);\n  }\n\n  const { start, end } = region;\n  return {\n    start: coordinate.convert(start),\n    end: coordinate.convert(end),\n  };\n}\n\n/**\n * @ignore\n * get axis factor\n * @param coordinate\n * @param direction\n * @returns factor\n */\nexport function getAxisFactor(coordinate: Coordinate, direction: DIRECTION): number {\n  // rect coordinate, by direction\n  if (coordinate.isRect) {\n    return coordinate.isTransposed\n      ? [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(direction)\n        ? 1\n        : -1\n      : [DIRECTION.BOTTOM, DIRECTION.RIGHT].includes(direction)\n      ? -1\n      : 1;\n  }\n\n  // polar y axis, by angle\n  if (coordinate.isPolar) {\n    const startAngle = coordinate.x.start;\n    return startAngle < 0 ? -1 : 1;\n  }\n\n  return 1;\n}\n\n/**\n * @ignore\n * whether the axis isVertical\n * @param region\n * @returns isVertical\n */\nexport function isVertical(region: Region): boolean {\n  const { start, end } = region;\n\n  return start.x === end.x;\n}\n\n/**\n * @ignore\n * get factor by region (real position)\n * @param region\n * @param center\n * @returns factor\n */\nexport function getAxisFactorByRegion(region: Region, center: Point): number {\n  const { start, end } = region;\n\n  const isAxisVertical = isVertical(region);\n\n  // 垂直\n  if (isAxisVertical) {\n    // 左方,从下到上、右方,从上到下\n    if ((start.y - end.y) * (center.x - start.x) > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  } else {\n    // 下方,从左到右、上方,从右到做\n    if ((end.x - start.x) * (start.y - center.y) > 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\n/**\n * @ignore\n * get the axis cfg from theme, will mix the common cfg of legend theme\n *\n * @param theme view theme object\n * @param direction axis direction\n * @returns axis theme cfg\n */\nexport function getAxisThemeCfg(theme: object, direction: string): object {\n  const axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common'], {}), deepMix({}, get(axisTheme, [direction], {})));\n}\n\n/**\n * get the options of axis title，mix the cfg from theme, avoid common themeCfg not work\n * @param theme\n * @param direction\n * @param axisOptions\n * @returns axis title options\n */\nexport function getAxisTitleOptions(theme: object, direction: string, axisOptions?: object): object {\n  const axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix(\n    {},\n    get(axisTheme, ['common', 'title'], {}),\n    deepMix({}, get(axisTheme, [direction, 'title'], {})),\n    axisOptions\n  );\n}\n\n/**\n * @ignore\n * get circle axis center and radius\n * @param coordinate\n */\nexport function getCircleAxisCenterRadius(coordinate: Coordinate) {\n  // @ts-ignore\n  const { x, y, circleCenter: center } = coordinate;\n  const isReflectY = y.start > y.end;\n  const start = coordinate.isTransposed\n    ? coordinate.convert({\n        x: isReflectY ? 0 : 1,\n        y: 0,\n      })\n    : coordinate.convert({\n        x: 0,\n        y: isReflectY ? 0 : 1,\n      });\n\n  const startVector: [number, number] = [start.x - center.x, start.y - center.y];\n  const normalVector: [number, number] = [1, 0];\n  const startAngle =\n    start.y > center.y ? vec2.angle(startVector, normalVector) : vec2.angle(startVector, normalVector) * -1;\n  const endAngle = startAngle + (x.end - x.start);\n  const radius = Math.sqrt((start.x - center.x) ** 2 + (start.y - center.y) ** 2);\n\n  return {\n    center,\n    radius,\n    startAngle,\n    endAngle,\n  };\n}\n\n/**\n * @ignore\n * 从配置中获取单个字段的 axis 配置\n * @param axes\n * @param field\n * @returns the axis option of field\n */\nexport function getAxisOption(axes: Record<string, AxisOption> | boolean, field: string) {\n  if (isBoolean(axes)) {\n    return axes === false ? false : {};\n  }\n  return get(axes, [field]);\n}\n\n/**\n * @ignore\n * 如果配置了 position，则使用配置\n * @param axisOption\n * @param def\n */\nexport function getAxisDirection(axisOption: AxisOption, def: DIRECTION): DIRECTION {\n  return get(axisOption, 'position', def);\n}\n\n/**\n * 获取 axis 的 title 文本\n * @param scale\n * @param axisOption\n */\nexport function getAxisTitleText(scale: Scale, axisOption: AxisCfg): string {\n  return get(axisOption, ['title', 'text'], getName(scale));\n}\n"]},"metadata":{},"sourceType":"module"}