{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { __extends } from \"tslib\";\nimport { each, isArray, isFunction, isString, debounce, throttle } from '@antv/util';\nimport { createAction, createCallbackAction } from './action/register';\nimport InteractionContext from './context';\nimport Interaction from './interaction'; // 将字符串转换成 action\n\nexport function parseAction(actionStr, context, arg) {\n  var arr = actionStr.split(':');\n  var actionName = arr[0]; // 如果已经初始化过 action ，则直接引用之前的 action\n\n  var action = context.getAction(actionName) || createAction(actionName, context);\n\n  if (!action) {\n    throw new Error(\"There is no action named \".concat(actionName));\n  }\n\n  var methodName = arr[1];\n  return {\n    action: action,\n    methodName: methodName,\n    arg: arg\n  };\n} // 执行 Action\n\nfunction executeAction(actionObject) {\n  var action = actionObject.action,\n      methodName = actionObject.methodName,\n      arg = actionObject.arg;\n\n  if (action[methodName]) {\n    action[methodName](arg);\n  } else {\n    throw new Error(\"Action(\".concat(action.name, \") doesn't have a method called \").concat(methodName));\n  }\n}\n\nvar STEP_NAMES = {\n  START: 'start',\n  SHOW_ENABLE: 'showEnable',\n  END: 'end',\n  ROLLBACK: 'rollback',\n  PROCESSING: 'processing'\n};\n/**\n * 支持语法的交互类\n */\n\nvar GrammarInteraction =\n/** @class */\nfunction (_super) {\n  __extends(GrammarInteraction, _super);\n\n  function GrammarInteraction(view, steps) {\n    var _this = _super.call(this, view, steps) || this;\n\n    _this.callbackCaches = {}; // 某个触发和反馈在本环节是否执行或\n\n    _this.emitCaches = {};\n    _this.steps = steps;\n    return _this;\n  }\n  /**\n   * 初始化\n   */\n\n\n  GrammarInteraction.prototype.init = function () {\n    this.initContext();\n\n    _super.prototype.init.call(this);\n  };\n  /**\n   * 清理资源\n   */\n\n\n  GrammarInteraction.prototype.destroy = function () {\n    _super.prototype.destroy.call(this); // 先清理事件\n\n\n    this.steps = null;\n\n    if (this.context) {\n      this.context.destroy();\n      this.context = null;\n    }\n\n    this.callbackCaches = null;\n    this.view = null;\n  };\n  /**\n   * 绑定事件\n   */\n\n\n  GrammarInteraction.prototype.initEvents = function () {\n    var _this = this;\n\n    each(this.steps, function (stepArr, stepName) {\n      each(stepArr, function (step) {\n        var callback = _this.getActionCallback(stepName, step);\n\n        if (callback) {\n          // 如果存在 callback，才绑定，有时候会出现无 callback 的情况\n          _this.bindEvent(step.trigger, callback);\n        }\n      });\n    });\n  };\n  /**\n   * 清理绑定的事件\n   */\n\n\n  GrammarInteraction.prototype.clearEvents = function () {\n    var _this = this;\n\n    each(this.steps, function (stepArr, stepName) {\n      each(stepArr, function (step) {\n        var callback = _this.getActionCallback(stepName, step);\n\n        if (callback) {\n          _this.offEvent(step.trigger, callback);\n        }\n      });\n    });\n  }; // 初始化上下文，并初始化 action\n\n\n  GrammarInteraction.prototype.initContext = function () {\n    var view = this.view;\n    var context = new InteractionContext(view);\n    this.context = context;\n    var steps = this.steps; // 生成具体的 Action\n\n    each(steps, function (subSteps) {\n      each(subSteps, function (step) {\n        if (isFunction(step.action)) {\n          // 如果传入回调函数，则直接生成 CallbackAction\n          step.actionObject = {\n            action: createCallbackAction(step.action, context),\n            methodName: 'execute'\n          };\n        } else if (isString(step.action)) {\n          // 如果是字符串\n          step.actionObject = parseAction(step.action, context, step.arg);\n        } else if (isArray(step.action)) {\n          // 如果是数组\n          var actionArr = step.action;\n          var argArr_1 = isArray(step.arg) ? step.arg : [step.arg];\n          step.actionObject = [];\n          each(actionArr, function (actionStr, idx) {\n            step.actionObject.push(parseAction(actionStr, context, argArr_1[idx]));\n          });\n        } // 如果 action 既不是字符串，也不是函数，则不会生成 actionObject\n\n      });\n    });\n  }; // 是否允许指定阶段名称执行\n\n\n  GrammarInteraction.prototype.isAllowStep = function (stepName) {\n    var currentStepName = this.currentStepName;\n    var steps = this.steps; // 相同的阶段允许同时执行\n\n    if (currentStepName === stepName) {\n      return true;\n    }\n\n    if (stepName === STEP_NAMES.SHOW_ENABLE) {\n      // 示能在整个过程中都可用\n      return true;\n    }\n\n    if (stepName === STEP_NAMES.PROCESSING) {\n      // 只有当前是 start 时，才允许 processing\n      return currentStepName === STEP_NAMES.START;\n    }\n\n    if (stepName === STEP_NAMES.START) {\n      // 如果当前是 processing，则无法 start，必须等待 end 后才能执行\n      return currentStepName !== STEP_NAMES.PROCESSING;\n    }\n\n    if (stepName === STEP_NAMES.END) {\n      return currentStepName === STEP_NAMES.PROCESSING || currentStepName === STEP_NAMES.START;\n    }\n\n    if (stepName === STEP_NAMES.ROLLBACK) {\n      if (steps[STEP_NAMES.END]) {\n        // 如果定义了 end, 只有 end 时才允许回滚\n        return currentStepName === STEP_NAMES.END;\n      } else if (currentStepName === STEP_NAMES.START) {\n        // 如果未定义 end, 则判断是否是开始\n        return true;\n      }\n    }\n\n    return false;\n  }; // 具体的指定阶段是否允许执行\n\n\n  GrammarInteraction.prototype.isAllowExecute = function (stepName, step) {\n    if (this.isAllowStep(stepName)) {\n      var key = this.getKey(stepName, step); // 如果是在本环节内仅允许触发一次，同时已经触发过，则不允许再触发\n\n      if (step.once && this.emitCaches[key]) {\n        return false;\n      } // 如果是允许的阶段，则验证 isEnable 方法\n\n\n      if (step.isEnable) {\n        return step.isEnable(this.context);\n      }\n\n      return true; // 如果没有 isEnable 则允许执行\n    }\n\n    return false;\n  };\n\n  GrammarInteraction.prototype.enterStep = function (stepName) {\n    this.currentStepName = stepName;\n    this.emitCaches = {}; // 清除所有本环节触发的缓存\n  }; // 执行完某个触发和反馈（子环节）\n\n\n  GrammarInteraction.prototype.afterExecute = function (stepName, step) {\n    // show enable 不计入正常的流程，其他情况则设置当前的 step\n    if (stepName !== STEP_NAMES.SHOW_ENABLE && this.currentStepName !== stepName) {\n      this.enterStep(stepName);\n    }\n\n    var key = this.getKey(stepName, step); // 一旦执行，则缓存标记为，一直保持到跳出改环节\n\n    this.emitCaches[key] = true;\n  }; // 获取某个环节的唯一的键值\n\n\n  GrammarInteraction.prototype.getKey = function (stepName, step) {\n    return stepName + step.trigger + step.action;\n  }; // 获取 step 的回调函数，如果已经生成，则直接返回，如果未生成，则创建\n\n\n  GrammarInteraction.prototype.getActionCallback = function (stepName, step) {\n    var _this = this;\n\n    var context = this.context;\n    var callbackCaches = this.callbackCaches;\n    var actionObject = step.actionObject;\n\n    if (step.action && actionObject) {\n      var key = this.getKey(stepName, step);\n\n      if (!callbackCaches[key]) {\n        // 动态生成执行的方法，执行对应 action 的名称\n        var actionCallback = function (event) {\n          context.event = event; // 保证检测时的 event\n\n          if (_this.isAllowExecute(stepName, step)) {\n            // 如果是数组时，则依次执行\n            if (isArray(actionObject)) {\n              each(actionObject, function (obj) {\n                context.event = event; // 可能触发新的事件，保证执行前的 context.event 是正确的\n\n                executeAction(obj);\n              });\n            } else {\n              context.event = event; // 保证执行前的 context.event 是正确的\n\n              executeAction(actionObject);\n            }\n\n            _this.afterExecute(stepName, step);\n\n            if (step.callback) {\n              context.event = event; // 保证执行前的 context.event 是正确的\n\n              step.callback(context);\n            }\n          } else {\n            // 如果未通过验证，则事件不要绑定在上面\n            context.event = null;\n          }\n        }; // 如果设置了 debounce\n\n\n        if (step.debounce) {\n          callbackCaches[key] = debounce(actionCallback, step.debounce.wait, step.debounce.immediate);\n        } else if (step.throttle) {\n          // 设置 throttle\n          callbackCaches[key] = throttle(actionCallback, step.throttle.wait, {\n            leading: step.throttle.leading,\n            trailing: step.throttle.trailing\n          });\n        } else {\n          // 直接设置\n          callbackCaches[key] = actionCallback;\n        }\n      }\n\n      return callbackCaches[key];\n    }\n\n    return null;\n  };\n\n  GrammarInteraction.prototype.bindEvent = function (eventName, callback) {\n    var nameArr = eventName.split(':');\n\n    if (nameArr[0] === 'window') {\n      window.addEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.addEventListener(nameArr[1], callback);\n    } else {\n      this.view.on(eventName, callback);\n    }\n  };\n\n  GrammarInteraction.prototype.offEvent = function (eventName, callback) {\n    var nameArr = eventName.split(':');\n\n    if (nameArr[0] === 'window') {\n      window.removeEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.removeEventListener(nameArr[1], callback);\n    } else {\n      this.view.off(eventName, callback);\n    }\n  };\n\n  return GrammarInteraction;\n}(Interaction);\n\nexport default GrammarInteraction;","map":{"version":3,"mappings":"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","names":["each","isArray","isFunction","isString","debounce","throttle","createAction","createCallbackAction","InteractionContext","Interaction","parseAction","actionStr","context","arg","arr","split","actionName","action","getAction","Error","methodName","executeAction","actionObject","name","concat","STEP_NAMES","START","SHOW_ENABLE","END","ROLLBACK","PROCESSING","__extends","view","steps","_super","_this","GrammarInteraction","initContext","init","call","destroy","callbackCaches","stepArr","stepName","step","callback","getActionCallback","bindEvent","trigger","offEvent","subSteps","actionArr","argArr_1","idx","push","currentStepName","isAllowStep","key","getKey","once","emitCaches","isEnable","enterStep","actionCallback","event","isAllowExecute","obj","afterExecute","wait","immediate","leading","trailing","eventName","nameArr","window","addEventListener","document","on","removeEventListener","off"],"sourceRoot":"","sources":["../../src/interaction/grammar-interaction.ts"],"sourcesContent":["import { each, isArray, isFunction, isString, debounce, throttle } from '@antv/util';\nimport { View } from '../chart';\nimport { ActionCallback, IAction, IInteractionContext, LooseObject } from '../interface';\nimport { createAction, createCallbackAction } from './action/register';\nimport InteractionContext from './context';\nimport Interaction from './interaction';\n\n// 将字符串转换成 action\nexport function parseAction(actionStr: string, context: IInteractionContext, arg?: any): ActionObject {\n  const arr = actionStr.split(':');\n  const actionName = arr[0];\n  // 如果已经初始化过 action ，则直接引用之前的 action\n  const action = context.getAction(actionName) || createAction(actionName, context);\n  if (!action) {\n    throw new Error(`There is no action named ${actionName}`);\n  }\n  const methodName = arr[1];\n  return {\n    action,\n    methodName,\n    arg,\n  };\n}\n\n// 执行 Action\nfunction executeAction(actionObject: ActionObject) {\n  const { action, methodName, arg } = actionObject;\n  if (action[methodName]) {\n    action[methodName](arg);\n  } else {\n    throw new Error(`Action(${action.name}) doesn't have a method called ${methodName}`);\n  }\n}\n\nconst STEP_NAMES = {\n  START: 'start',\n  SHOW_ENABLE: 'showEnable',\n  END: 'end',\n  ROLLBACK: 'rollback',\n  PROCESSING: 'processing',\n};\n\n/** 交互环节的定义 */\nexport interface InteractionStep {\n  /**\n   * 触发事件，支持 view，chart 的各种事件，也支持 document、window 的事件\n   */\n  trigger: string;\n  /**\n   * 是否可以触发 action\n   * @param context - 交互的上下文\n   */\n  isEnable?: (context: IInteractionContext) => boolean;\n  /**\n   * 反馈，支持三种方式：\n   * - action:method : action 的名字和方法的组合\n   * - [’action1:method1‘, ’action2:method‘]\n   * - ActionCallback: 回调函数\n   */\n  action: string | string[] | ActionCallback;\n  /**\n   * 反馈，具体 action method 的参数：\n   * - 当传递多个 action 时，args 必须是一个数组\n   */\n  arg?: any | any[];\n  /**\n   * 回调函数，action 执行后执行\n   */\n  callback?: (context: IInteractionContext) => void;\n  /**\n   * @private\n   * 不需要用户传入，通过上面的属性计算出来的属性\n   */\n  actionObject?: ActionObject | ActionObject[];\n  /**\n   * 在一个环节内是否只允许执行一次\n   */\n  once?: boolean;\n  /**\n   * 是否增加节流\n   */\n  throttle?: ThrottleOption;\n  /**\n   * 是否延迟\n   */\n  debounce?: DebounceOption;\n}\n\n// action 执行时支持 debounce 和 throttle，可以参考：https://css-tricks.com/debouncing-throttling-explained-examples/\n/**\n * debounce 的配置\n */\nexport interface DebounceOption {\n  /**\n   * 等待时间\n   */\n  wait: number;\n  /**\n   * 是否马上执行\n   */\n  immediate?: boolean;\n}\n\n/**\n * throttle 的配置\n */\nexport interface ThrottleOption {\n  /**\n   * 等待时间\n   */\n  wait: number;\n  /**\n   * 马上就执行\n   */\n  leading?: boolean;\n  /**\n   * 执行完毕后再执行一次\n   */\n  trailing?: boolean;\n}\n\n/** 缓存 action 对象，仅用于当前文件 */\ninterface ActionObject {\n  /**\n   * 缓存的 action\n   */\n  action: IAction;\n  /**\n   * action 的方法\n   */\n  methodName: string;\n  /**\n   * 用户传递的 action 方法的参数\n   */\n  arg?: any;\n}\n\n/** 交互的所有环节 */\nexport interface InteractionSteps {\n  /**\n   * 显示交互可以进行\n   */\n  showEnable?: InteractionStep[];\n  /**\n   * 交互开始\n   */\n  start?: InteractionStep[];\n  /**\n   * 交互持续\n   */\n  processing?: InteractionStep[];\n  /**\n   * 交互结束\n   */\n  end?: InteractionStep[];\n  /**\n   * 交互回滚\n   */\n  rollback?: InteractionStep[];\n}\n\n/**\n * 支持语法的交互类\n */\nexport default class GrammarInteraction extends Interaction {\n  // 存储的交互环节\n  private steps: InteractionSteps;\n  /** 当前执行到的阶段 */\n  public currentStepName: string;\n  /**\n   * 当前交互的上下文\n   */\n  public context: IInteractionContext;\n\n  private callbackCaches: LooseObject = {};\n  // 某个触发和反馈在本环节是否执行或\n  private emitCaches: LooseObject = {};\n\n  constructor(view: View, steps: InteractionSteps) {\n    super(view, steps);\n    this.steps = steps;\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {\n    this.initContext();\n    super.init();\n  }\n\n  /**\n   * 清理资源\n   */\n  public destroy() {\n    super.destroy(); // 先清理事件\n    this.steps = null;\n    if (this.context) {\n      this.context.destroy();\n      this.context = null;\n    }\n\n    this.callbackCaches = null;\n    this.view = null;\n  }\n\n  /**\n   * 绑定事件\n   */\n  protected initEvents() {\n    each(this.steps, (stepArr, stepName) => {\n      each(stepArr, (step) => {\n        const callback = this.getActionCallback(stepName, step);\n        if (callback) {\n          // 如果存在 callback，才绑定，有时候会出现无 callback 的情况\n          this.bindEvent(step.trigger, callback);\n        }\n      });\n    });\n  }\n\n  /**\n   * 清理绑定的事件\n   */\n  protected clearEvents() {\n    each(this.steps, (stepArr, stepName) => {\n      each(stepArr, (step) => {\n        const callback = this.getActionCallback(stepName, step);\n        if (callback) {\n          this.offEvent(step.trigger, callback);\n        }\n      });\n    });\n  }\n\n  // 初始化上下文，并初始化 action\n  private initContext() {\n    const view = this.view;\n    const context = new InteractionContext(view);\n    this.context = context;\n    const steps = this.steps;\n    // 生成具体的 Action\n    each(steps, (subSteps: InteractionStep[]) => {\n      each(subSteps, (step: InteractionStep) => {\n        if (isFunction(step.action)) {\n          // 如果传入回调函数，则直接生成 CallbackAction\n          step.actionObject = {\n            action: createCallbackAction(step.action, context),\n            methodName: 'execute',\n          };\n        } else if (isString(step.action)) {\n          // 如果是字符串\n          step.actionObject = parseAction(step.action, context, step.arg);\n        } else if (isArray(step.action)) {\n          // 如果是数组\n          const actionArr = step.action;\n          const argArr = isArray(step.arg) ? step.arg : [step.arg];\n          step.actionObject = [];\n          each(actionArr, (actionStr, idx) => {\n            (step.actionObject as ActionObject[]).push(parseAction(actionStr, context, argArr[idx]));\n          });\n        }\n        // 如果 action 既不是字符串，也不是函数，则不会生成 actionObject\n      });\n    });\n  }\n\n  // 是否允许指定阶段名称执行\n  private isAllowStep(stepName: string): boolean {\n    const currentStepName = this.currentStepName;\n    const steps = this.steps;\n    // 相同的阶段允许同时执行\n    if (currentStepName === stepName) {\n      return true;\n    }\n\n    if (stepName === STEP_NAMES.SHOW_ENABLE) {\n      // 示能在整个过程中都可用\n      return true;\n    }\n\n    if (stepName === STEP_NAMES.PROCESSING) {\n      // 只有当前是 start 时，才允许 processing\n      return currentStepName === STEP_NAMES.START;\n    }\n\n    if (stepName === STEP_NAMES.START) {\n      // 如果当前是 processing，则无法 start，必须等待 end 后才能执行\n      return currentStepName !== STEP_NAMES.PROCESSING;\n    }\n\n    if (stepName === STEP_NAMES.END) {\n      return currentStepName === STEP_NAMES.PROCESSING || currentStepName === STEP_NAMES.START;\n    }\n\n    if (stepName === STEP_NAMES.ROLLBACK) {\n      if (steps[STEP_NAMES.END]) {\n        // 如果定义了 end, 只有 end 时才允许回滚\n        return currentStepName === STEP_NAMES.END;\n      } else if (currentStepName === STEP_NAMES.START) {\n        // 如果未定义 end, 则判断是否是开始\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // 具体的指定阶段是否允许执行\n  private isAllowExecute(stepName: string, step: InteractionStep): boolean {\n    if (this.isAllowStep(stepName)) {\n      const key = this.getKey(stepName, step);\n      // 如果是在本环节内仅允许触发一次，同时已经触发过，则不允许再触发\n      if (step.once && this.emitCaches[key]) {\n        return false;\n      }\n      // 如果是允许的阶段，则验证 isEnable 方法\n      if (step.isEnable) {\n        return step.isEnable(this.context);\n      }\n      return true; // 如果没有 isEnable 则允许执行\n    }\n    return false;\n  }\n\n  private enterStep(stepName: string) {\n    this.currentStepName = stepName;\n    this.emitCaches = {}; // 清除所有本环节触发的缓存\n  }\n\n  // 执行完某个触发和反馈（子环节）\n  private afterExecute(stepName: string, step) {\n    // show enable 不计入正常的流程，其他情况则设置当前的 step\n    if (stepName !== STEP_NAMES.SHOW_ENABLE && this.currentStepName !== stepName) {\n      this.enterStep(stepName);\n    }\n    const key = this.getKey(stepName, step);\n    // 一旦执行，则缓存标记为，一直保持到跳出改环节\n    this.emitCaches[key] = true;\n  }\n  // 获取某个环节的唯一的键值\n  private getKey(stepName, step) {\n    return stepName + step.trigger + step.action;\n  }\n\n  // 获取 step 的回调函数，如果已经生成，则直接返回，如果未生成，则创建\n  private getActionCallback(stepName: string, step: InteractionStep): (e: object) => void {\n    const context = this.context;\n    const callbackCaches = this.callbackCaches;\n    const actionObject = step.actionObject;\n    if (step.action && actionObject) {\n      const key = this.getKey(stepName, step);\n      if (!callbackCaches[key]) {\n        // 动态生成执行的方法，执行对应 action 的名称\n        const actionCallback = (event) => {\n          context.event = event; // 保证检测时的 event\n          if (this.isAllowExecute(stepName, step)) {\n            // 如果是数组时，则依次执行\n            if (isArray(actionObject)) {\n              each(actionObject, (obj: ActionObject) => {\n                context.event = event; // 可能触发新的事件，保证执行前的 context.event 是正确的\n                executeAction(obj);\n              });\n            } else {\n              context.event = event; // 保证执行前的 context.event 是正确的\n              executeAction(actionObject);\n            }\n            this.afterExecute(stepName, step);\n            if (step.callback) {\n              context.event = event; // 保证执行前的 context.event 是正确的\n              step.callback(context);\n            }\n          } else {\n            // 如果未通过验证，则事件不要绑定在上面\n            context.event = null;\n          }\n        };\n        // 如果设置了 debounce\n        if (step.debounce) {\n          callbackCaches[key] = debounce(actionCallback, step.debounce.wait, step.debounce.immediate);\n        } else if (step.throttle) {\n          // 设置 throttle\n          callbackCaches[key] = throttle(actionCallback, step.throttle.wait, {\n            leading: step.throttle.leading,\n            trailing: step.throttle.trailing,\n          });\n        } else {\n          // 直接设置\n          callbackCaches[key] = actionCallback;\n        }\n      }\n      return callbackCaches[key];\n    }\n    return null;\n  }\n\n  private bindEvent(eventName, callback) {\n    const nameArr = eventName.split(':');\n    if (nameArr[0] === 'window') {\n      window.addEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.addEventListener(nameArr[1], callback);\n    } else {\n      this.view.on(eventName, callback);\n    }\n  }\n\n  private offEvent(eventName, callback) {\n    const nameArr = eventName.split(':');\n    if (nameArr[0] === 'window') {\n      window.removeEventListener(nameArr[1], callback);\n    } else if (nameArr[0] === 'document') {\n      document.removeEventListener(nameArr[1], callback);\n    } else {\n      this.view.off(eventName, callback);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}