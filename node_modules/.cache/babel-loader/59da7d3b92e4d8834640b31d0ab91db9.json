{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { map, find, each, isObject } from '@antv/util';\nimport { getTheme } from '@antv/g2';\nimport { deepAssign } from '../utils';\nimport { conversionTagFormatter } from '../utils/conversion';\n\nfunction getConversionTagOptionsWithDefaults(options, horizontal) {\n  return deepAssign({\n    size: horizontal ? 32 : 80,\n    spacing: horizontal ? 8 : 12,\n    offset: horizontal ? 32 : 0,\n    arrow: options.arrow !== false && {\n      headSize: 12,\n      style: {\n        fill: 'rgba(0, 0, 0, 0.05)'\n      }\n    },\n    text: options.text !== false && {\n      style: {\n        fontSize: 12,\n        fill: 'rgba(0, 0, 0, 0.85)',\n        textAlign: 'center',\n        textBaseline: 'middle'\n      },\n      formatter: conversionTagFormatter\n    }\n  }, options);\n}\n\nfunction parsePoints(coordinate, element) {\n  // @ts-ignore\n  return map(element.getModel().points, function (point) {\n    return coordinate.convertPoint(point);\n  });\n}\n\nfunction renderArrowTag(config, elemPrev, elemNext) {\n  var view = config.view,\n      geometry = config.geometry,\n      group = config.group,\n      options = config.options,\n      horizontal = config.horizontal;\n  var offset = options.offset,\n      size = options.size,\n      arrow = options.arrow;\n  var coordinate = view.getCoordinate();\n  var pointPrev = parsePoints(coordinate, elemPrev)[3];\n  var pointNext = parsePoints(coordinate, elemNext)[0];\n  var totalHeight = pointNext.y - pointPrev.y;\n  var totalWidth = pointNext.x - pointPrev.x;\n\n  if (typeof arrow === 'boolean') {\n    return;\n  }\n\n  var headSize = arrow.headSize;\n  var spacing = options.spacing;\n  var points;\n\n  if (horizontal) {\n    if ((totalWidth - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalWidth - headSize) / 2);\n      points = [[pointPrev.x + spacing, pointPrev.y - offset], [pointPrev.x + spacing, pointPrev.y - offset - size], [pointNext.x - spacing, pointNext.y - offset - size / 2]];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [[pointPrev.x + spacing, pointPrev.y - offset], [pointPrev.x + spacing, pointPrev.y - offset - size], [pointNext.x - spacing - headSize, pointNext.y - offset - size], [pointNext.x - spacing, pointNext.y - offset - size / 2], [pointNext.x - spacing - headSize, pointNext.y - offset]];\n    }\n  } else {\n    if ((totalHeight - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalHeight - headSize) / 2);\n      points = [[pointPrev.x + offset, pointPrev.y + spacing], [pointPrev.x + offset + size, pointPrev.y + spacing], [pointNext.x + offset + size / 2, pointNext.y - spacing]];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [[pointPrev.x + offset, pointPrev.y + spacing], [pointPrev.x + offset + size, pointPrev.y + spacing], [pointNext.x + offset + size, pointNext.y - spacing - headSize], [pointNext.x + offset + size / 2, pointNext.y - spacing], [pointNext.x + offset, pointNext.y - spacing - headSize]];\n    }\n  }\n\n  group.addShape('polygon', {\n    id: view.id + \"-conversion-tag-arrow-\" + geometry.getElementId(elemPrev.getModel().mappingData),\n    name: 'conversion-tag-arrow',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext\n    },\n    attrs: __assign(__assign({}, arrow.style || {}), {\n      points: points\n    })\n  });\n}\n\nfunction renderTextTag(config, elemPrev, elemNext) {\n  var _a, _b, _c;\n\n  var view = config.view,\n      geometry = config.geometry,\n      group = config.group,\n      options = config.options,\n      field = config.field,\n      horizontal = config.horizontal;\n  var offset = options.offset,\n      size = options.size;\n\n  if (typeof options.text === 'boolean') {\n    return;\n  }\n\n  var coordinate = view.getCoordinate();\n  var text = ((_a = options.text) === null || _a === void 0 ? void 0 : _a.formatter) && ((_b = options.text) === null || _b === void 0 ? void 0 : _b.formatter(elemPrev.getData()[field], elemNext.getData()[field]));\n  var pointPrev = parsePoints(coordinate, elemPrev)[horizontal ? 3 : 0];\n  var pointNext = parsePoints(coordinate, elemNext)[horizontal ? 0 : 3];\n  var textShape = group.addShape('text', {\n    id: view.id + \"-conversion-tag-text-\" + geometry.getElementId(elemPrev.getModel().mappingData),\n    name: 'conversion-tag-text',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext\n    },\n    attrs: __assign(__assign({}, ((_c = options.text) === null || _c === void 0 ? void 0 : _c.style) || {}), {\n      text: text,\n      x: horizontal ? (pointPrev.x + pointNext.x) / 2 : pointPrev.x + offset + size / 2,\n      y: horizontal ? pointPrev.y - offset - size / 2 : (pointPrev.y + pointNext.y) / 2\n    })\n  });\n\n  if (horizontal) {\n    var totalWidth = pointNext.x - pointPrev.x;\n    var textWidth = textShape.getBBox().width;\n\n    if (textWidth > totalWidth) {\n      var cWidth = textWidth / text.length;\n      var cEnd = Math.max(1, Math.ceil(totalWidth / cWidth) - 1);\n      var textAdjusted = text.slice(0, cEnd) + \"...\";\n      textShape.attr('text', textAdjusted);\n    }\n  }\n}\n\nfunction renderTag(options, elemPrev, elemNext) {\n  renderArrowTag(options, elemPrev, elemNext);\n  renderTextTag(options, elemPrev, elemNext);\n}\n/**\n * 返回支持转化率组件的 adaptor，适用于柱形图/条形图\n * @param field 用户转化率计算的字段\n * @param horizontal 是否水平方向的转化率\n * @param disabled 是否禁用\n */\n\n\nexport function conversionTag(field, horizontal, disabled) {\n  if (horizontal === void 0) {\n    horizontal = true;\n  }\n\n  if (disabled === void 0) {\n    disabled = false;\n  }\n\n  return function (params) {\n    var options = params.options,\n        chart = params.chart;\n    var conversionTag = options.conversionTag,\n        theme = options.theme;\n\n    if (conversionTag && !disabled) {\n      // 有转化率组件时，柱子宽度占比自动为 1/3\n      chart.theme(deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n        columnWidthRatio: 1 / 3\n      })); // 使用  shape annotation 绘制转化率组件\n\n      chart.annotation().shape({\n        render: function (container, view) {\n          var group = container.addGroup({\n            id: chart.id + \"-conversion-tag-group\",\n            name: 'conversion-tag-group'\n          });\n          var interval = find(chart.geometries, function (geom) {\n            return geom.type === 'interval';\n          });\n          var config = {\n            view: view,\n            geometry: interval,\n            group: group,\n            field: field,\n            horizontal: horizontal,\n            options: getConversionTagOptionsWithDefaults(conversionTag, horizontal)\n          };\n          var elements = interval.elements;\n          each(elements, function (elem, idx) {\n            if (idx > 0) {\n              renderTag(config, elements[idx - 1], elem);\n            }\n          });\n        }\n      });\n    }\n\n    return params;\n  };\n}","map":{"version":3,"mappings":"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","names":["map","find","each","isObject","getTheme","deepAssign","conversionTagFormatter","getConversionTagOptionsWithDefaults","options","horizontal","size","spacing","offset","arrow","headSize","style","fill","text","fontSize","textAlign","textBaseline","formatter","parsePoints","coordinate","element","getModel","points","point","convertPoint","renderArrowTag","config","elemPrev","elemNext","geometry","group","view","getCoordinate","pointPrev","pointNext","totalHeight","y","totalWidth","x","Math","max","addShape","id","getElementId","mappingData","name","origin","nextElement","attrs","renderTextTag","field","_a","_b","getData","textShape","_c","textWidth","getBBox","width","cWidth","length","cEnd","ceil","textAdjusted","slice","attr","renderTag","conversionTag","disabled","params","chart","theme","columnWidthRatio","annotation","shape","render","container","addGroup","interval","geometries","geom","type","elements","elem","idx"],"sourceRoot":"","sources":["../../src/adaptor/conversion-tag.ts"],"sourcesContent":["import { map, find, each, isObject } from '@antv/util';\nimport { Coordinate, IGroup, ShapeAttrs, Element, Geometry, View, getTheme } from '@antv/g2';\nimport { Params } from '../core/adaptor';\nimport { deepAssign } from '../utils';\nimport { conversionTagFormatter } from '../utils/conversion';\nimport { Options } from '../types';\n\n/** 转化率组件配置选项 */\nexport interface ConversionTagOptions {\n  /** tag 高度 */\n  size?: number;\n  /** tag 对柱子间距 */\n  spacing?: number;\n  /** tag 距离轴线距离 */\n  offset?: number;\n  /** 箭头形状配置 */\n  arrow?:\n    | {\n        /** 箭头宽度 */\n        headSize?: number;\n        /** 箭头样式 */\n        style?: ShapeAttrs;\n      }\n    | false;\n  /** 文本配置 */\n  text?:\n    | {\n        /** 文字大小 */\n        size?: number;\n        /** 文字样式 */\n        style?: ShapeAttrs;\n        /** 文本格式化 */\n        formatter?: (prev: number, next: number) => string;\n      }\n    | false;\n}\n\nexport interface OptionWithConversionTag {\n  conversionTag?: ConversionTagOptions | false;\n}\n\n/** 控制转化率组件绘制的选项 */\ntype TagRenderConfig = {\n  /** 所在的 View */\n  view: View;\n  /** 所属的 geometry */\n  geometry: Geometry;\n  /** 转化率组件的 group */\n  group: IGroup;\n  /** 转化率配置 */\n  options: ConversionTagOptions;\n  /** 用于转化率计算的字段 */\n  field: string;\n  /** 水平/垂直 */\n  horizontal: boolean;\n};\n\nfunction getConversionTagOptionsWithDefaults(options: ConversionTagOptions, horizontal: boolean): ConversionTagOptions {\n  return deepAssign(\n    {\n      size: horizontal ? 32 : 80,\n      spacing: horizontal ? 8 : 12,\n      offset: horizontal ? 32 : 0,\n      arrow: options.arrow !== false && {\n        headSize: 12,\n        style: {\n          fill: 'rgba(0, 0, 0, 0.05)',\n        },\n      },\n      text: options.text !== false && {\n        style: {\n          fontSize: 12,\n          fill: 'rgba(0, 0, 0, 0.85)',\n          textAlign: 'center',\n          textBaseline: 'middle',\n        },\n        formatter: conversionTagFormatter,\n      },\n    },\n    options\n  );\n}\n\nfunction parsePoints(coordinate: Coordinate, element: Element): { x: number; y: number }[] {\n  // @ts-ignore\n  return map(element.getModel().points, (point) => coordinate.convertPoint(point));\n}\n\nfunction renderArrowTag(config: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  const { view, geometry, group, options, horizontal } = config;\n  const { offset, size, arrow } = options;\n  const coordinate = view.getCoordinate();\n  const pointPrev = parsePoints(coordinate, elemPrev)[3];\n  const pointNext = parsePoints(coordinate, elemNext)[0];\n  const totalHeight = pointNext.y - pointPrev.y;\n  const totalWidth = pointNext.x - pointPrev.x;\n\n  if (typeof arrow === 'boolean') {\n    return;\n  }\n  const { headSize } = arrow;\n  let spacing = options.spacing;\n  let points;\n\n  if (horizontal) {\n    if ((totalWidth - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalWidth - headSize) / 2);\n      points = [\n        [pointPrev.x + spacing, pointPrev.y - offset],\n        [pointPrev.x + spacing, pointPrev.y - offset - size],\n        [pointNext.x - spacing, pointNext.y - offset - size / 2],\n      ];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [\n        [pointPrev.x + spacing, pointPrev.y - offset],\n        [pointPrev.x + spacing, pointPrev.y - offset - size],\n        [pointNext.x - spacing - headSize, pointNext.y - offset - size],\n        [pointNext.x - spacing, pointNext.y - offset - size / 2],\n        [pointNext.x - spacing - headSize, pointNext.y - offset],\n      ];\n    }\n  } else {\n    if ((totalHeight - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalHeight - headSize) / 2);\n      points = [\n        [pointPrev.x + offset, pointPrev.y + spacing],\n        [pointPrev.x + offset + size, pointPrev.y + spacing],\n        [pointNext.x + offset + size / 2, pointNext.y - spacing],\n      ];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [\n        [pointPrev.x + offset, pointPrev.y + spacing],\n        [pointPrev.x + offset + size, pointPrev.y + spacing],\n        [pointNext.x + offset + size, pointNext.y - spacing - headSize],\n        [pointNext.x + offset + size / 2, pointNext.y - spacing],\n        [pointNext.x + offset, pointNext.y - spacing - headSize],\n      ];\n    }\n  }\n\n  group.addShape('polygon', {\n    id: `${view.id}-conversion-tag-arrow-${geometry.getElementId(elemPrev.getModel().mappingData)}`,\n    name: 'conversion-tag-arrow',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext,\n    },\n    attrs: {\n      ...(arrow.style || {}),\n      points,\n    },\n  });\n}\n\nfunction renderTextTag(config: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  const { view, geometry, group, options, field, horizontal } = config;\n  const { offset, size } = options;\n  if (typeof options.text === 'boolean') {\n    return;\n  }\n  const coordinate = view.getCoordinate();\n  const text = options.text?.formatter && options.text?.formatter(elemPrev.getData()[field], elemNext.getData()[field]);\n\n  const pointPrev = parsePoints(coordinate, elemPrev)[horizontal ? 3 : 0];\n  const pointNext = parsePoints(coordinate, elemNext)[horizontal ? 0 : 3];\n\n  const textShape = group.addShape('text', {\n    id: `${view.id}-conversion-tag-text-${geometry.getElementId(elemPrev.getModel().mappingData)}`,\n    name: 'conversion-tag-text',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext,\n    },\n    attrs: {\n      ...(options.text?.style || {}),\n      text,\n      x: horizontal ? (pointPrev.x + pointNext.x) / 2 : pointPrev.x + offset + size / 2,\n      y: horizontal ? pointPrev.y - offset - size / 2 : (pointPrev.y + pointNext.y) / 2,\n    },\n  });\n\n  if (horizontal) {\n    const totalWidth = pointNext.x - pointPrev.x;\n    const { width: textWidth } = textShape.getBBox();\n    if (textWidth > totalWidth) {\n      const cWidth = textWidth / text.length;\n      const cEnd = Math.max(1, Math.ceil(totalWidth / cWidth) - 1);\n      const textAdjusted = `${text.slice(0, cEnd)}...`;\n      textShape.attr('text', textAdjusted);\n    }\n  }\n}\n\nfunction renderTag(options: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  renderArrowTag(options, elemPrev, elemNext);\n  renderTextTag(options, elemPrev, elemNext);\n}\n\n/**\n * 返回支持转化率组件的 adaptor，适用于柱形图/条形图\n * @param field 用户转化率计算的字段\n * @param horizontal 是否水平方向的转化率\n * @param disabled 是否禁用\n */\nexport function conversionTag<O extends OptionWithConversionTag & Options>(\n  field: string,\n  horizontal = true,\n  disabled = false\n) {\n  return function (params: Params<O>): Params<O> {\n    const { options, chart } = params;\n    const { conversionTag, theme } = options;\n\n    if (conversionTag && !disabled) {\n      // 有转化率组件时，柱子宽度占比自动为 1/3\n      chart.theme(\n        deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n          columnWidthRatio: 1 / 3,\n        })\n      );\n      // 使用  shape annotation 绘制转化率组件\n      chart.annotation().shape({\n        render: (container, view) => {\n          const group = container.addGroup({\n            id: `${chart.id}-conversion-tag-group`,\n            name: 'conversion-tag-group',\n          });\n          const interval = find(chart.geometries, (geom: Geometry) => geom.type === 'interval');\n          const config: TagRenderConfig = {\n            view,\n            geometry: interval,\n            group,\n            field,\n            horizontal,\n            options: getConversionTagOptionsWithDefaults(conversionTag, horizontal),\n          };\n          const elements = interval.elements;\n          each(elements, (elem: Element, idx: number) => {\n            if (idx > 0) {\n              renderTag(config, elements[idx - 1], elem);\n            }\n          });\n        },\n      });\n    }\n\n    return params;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}