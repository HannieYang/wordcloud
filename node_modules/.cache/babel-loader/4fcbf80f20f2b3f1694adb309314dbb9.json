{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { adaptor, statistic } from './adaptor';\nimport { INDICATEOR_VIEW_ID, RANGE_VIEW_ID, DEFAULT_OPTIONS } from './constants';\nimport { getIndicatorData, getRangeData } from './utils'; // 注册 shape\n\nimport './shapes/indicator';\nimport './shapes/meter-gauge';\n/**\n * 仪表盘\n */\n\nvar Gauge =\n/** @class */\nfunction (_super) {\n  __extends(Gauge, _super);\n\n  function Gauge() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'gauge';\n    return _this;\n  }\n  /**\n   * 获取 仪表盘 默认配置项\n   * 供外部使用\n   */\n\n\n  Gauge.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 更新数据\n   * @param percent\n   */\n\n\n  Gauge.prototype.changeData = function (percent) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    this.updateOption({\n      percent: percent\n    });\n    var indicatorView = this.chart.views.find(function (v) {\n      return v.id === INDICATEOR_VIEW_ID;\n    });\n\n    if (indicatorView) {\n      indicatorView.data(getIndicatorData(percent));\n    }\n\n    var rangeView = this.chart.views.find(function (v) {\n      return v.id === RANGE_VIEW_ID;\n    });\n\n    if (rangeView) {\n      rangeView.data(getRangeData(percent, this.options.range));\n    } // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n\n\n    statistic({\n      chart: this.chart,\n      options: this.options\n    }, true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /**\n   * 获取默认配置\n   * 供 base 使用\n   */\n\n\n  Gauge.prototype.getDefaultOptions = function () {\n    return Gauge.getDefaultOptions();\n  };\n  /**\n   * 获取适配器\n   */\n\n\n  Gauge.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return Gauge;\n}(Plot);\n\nexport { Gauge };","map":{"version":3,"mappings":";AAAA,SAASA,gBAAT,EAA2BC,KAA3B,QAAwC,UAAxC;AACA,SAASC,IAAT,QAAqB,iBAArB;AAGA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,WAAnC;AACA,SAASC,kBAAT,EAA6BC,aAA7B,EAA4CC,eAA5C,QAAmE,aAAnE;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,SAA/C,C,CAEA;;AACA,OAAO,oBAAP;AACA,OAAO,sBAAP;AAIA;;;;AAGA;AAAA;AAAA;EAA2BC;;EAA3B;IAAA;IASE;;;IACOC,aAAe,OAAf;;EA6CR;EAtDC;;;;;;EAIOC,0BAAP;IACE,OAAOL,eAAP;EACD,CAFM;EAOP;;;;;;EAIOK,6BAAP,UAAkBC,OAAlB,EAAiC;IAC/B,KAAKC,KAAL,CAAWC,IAAX,CACEf,gBAAgB,CAACgB,kBADnB,EAEEf,KAAK,CAACgB,QAAN,CAAe,KAAKH,KAApB,EAA2Bd,gBAAgB,CAACgB,kBAA5C,EAAgE,IAAhE,CAFF;IAKA,KAAKE,YAAL,CAAkB;MAAEL,OAAO;IAAT,CAAlB;IACA,IAAMM,aAAa,GAAG,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,IAAjB,CAAsB,UAACC,CAAD,EAAE;MAAK,QAAC,CAACC,EAAF,KAASlB,kBAAT;IAA2B,CAAxD,CAAtB;;IACA,IAAIc,aAAJ,EAAmB;MACjBA,aAAa,CAACK,IAAd,CAAmBhB,gBAAgB,CAACK,OAAD,CAAnC;IACD;;IAED,IAAMY,SAAS,GAAG,KAAKX,KAAL,CAAWM,KAAX,CAAiBC,IAAjB,CAAsB,UAACC,CAAD,EAAE;MAAK,QAAC,CAACC,EAAF,KAASjB,aAAT;IAAsB,CAAnD,CAAlB;;IACA,IAAImB,SAAJ,EAAe;MACbA,SAAS,CAACD,IAAV,CAAef,YAAY,CAACI,OAAD,EAAU,KAAKa,OAAL,CAAaC,KAAvB,CAA3B;IACD,CAf8B,CAgB/B;;;IACAvB,SAAS,CAAC;MAAEU,KAAK,EAAE,KAAKA,KAAd;MAAqBY,OAAO,EAAE,KAAKA;IAAnC,CAAD,EAA+C,IAA/C,CAAT;IAEA,KAAKZ,KAAL,CAAWC,IAAX,CACEf,gBAAgB,CAAC4B,iBADnB,EAEE3B,KAAK,CAACgB,QAAN,CAAe,KAAKH,KAApB,EAA2Bd,gBAAgB,CAAC4B,iBAA5C,EAA+D,IAA/D,CAFF;EAID,CAvBM;EAyBP;;;;;;EAIUhB,oCAAV;IACE,OAAOA,KAAK,CAACiB,iBAAN,EAAP;EACD,CAFS;EAIV;;;;;EAGUjB,mCAAV;IACE,OAAOT,OAAP;EACD,CAFS;;EAGZ;AAAC,CAvDD,CAA2BD,IAA3B","names":["VIEW_LIFE_CIRCLE","Event","Plot","adaptor","statistic","INDICATEOR_VIEW_ID","RANGE_VIEW_ID","DEFAULT_OPTIONS","getIndicatorData","getRangeData","__extends","_this","Gauge","percent","chart","emit","BEFORE_CHANGE_DATA","fromData","updateOption","indicatorView","views","find","v","id","data","rangeView","options","range","AFTER_CHANGE_DATA","getDefaultOptions"],"sourceRoot":"","sources":["../../../src/plots/gauge/index.ts"],"sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { GaugeOptions } from './types';\nimport { adaptor, statistic } from './adaptor';\nimport { INDICATEOR_VIEW_ID, RANGE_VIEW_ID, DEFAULT_OPTIONS } from './constants';\nimport { getIndicatorData, getRangeData } from './utils';\n\n// 注册 shape\nimport './shapes/indicator';\nimport './shapes/meter-gauge';\n\nexport type { GaugeOptions };\n\n/**\n * 仪表盘\n */\nexport class Gauge extends Plot<GaugeOptions> {\n  /**\n   * 获取 仪表盘 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<GaugeOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'gauge';\n\n  /**\n   * 更新数据\n   * @param percent\n   */\n  public changeData(percent: number) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n\n    this.updateOption({ percent });\n    const indicatorView = this.chart.views.find((v) => v.id === INDICATEOR_VIEW_ID);\n    if (indicatorView) {\n      indicatorView.data(getIndicatorData(percent));\n    }\n\n    const rangeView = this.chart.views.find((v) => v.id === RANGE_VIEW_ID);\n    if (rangeView) {\n      rangeView.data(getRangeData(percent, this.options.range));\n    }\n    // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n    statistic({ chart: this.chart, options: this.options }, true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  /**\n   * 获取默认配置\n   * 供 base 使用\n   */\n  protected getDefaultOptions() {\n    return Gauge.getDefaultOptions();\n  }\n\n  /**\n   * 获取适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<GaugeOptions> {\n    return adaptor;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}