{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { registerShape } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getRectPath } from './util';\n/** 描边柱状图 */\n\nregisterShape('interval', 'hollow-rect', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, true, false);\n    var group = container;\n    var backgroundCfg = cfg === null || cfg === void 0 ? void 0 : cfg.background;\n\n    if (backgroundCfg) {\n      group = container.addGroup();\n      var backgroundStyle = getBackgroundRectStyle(cfg);\n      var backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points), this.coordinate);\n      group.addShape('path', {\n        attrs: __assign(__assign({}, backgroundStyle), {\n          path: backgroundPath\n        }),\n        zIndex: -1,\n        name: BACKGROUND_SHAPE\n      });\n    }\n\n    var path = this.parsePath(getRectPath(cfg.points));\n    var shape = group.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return backgroundCfg ? group : shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color,\n        isInPolar = markerCfg.isInPolar;\n\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null\n        }\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        stroke: color,\n        fill: null\n      }\n    };\n  }\n});","map":{"version":3,"mappings":";AAGA,SAASA,aAAT,QAA8B,SAA9B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,sBAAT,EAAiCC,QAAjC,QAAiD,mBAAjD;AACA,SAASC,qBAAT,EAAgCC,WAAhC,QAAmD,QAAnD;AAEA;;AACAL,aAAa,CAAC,UAAD,EAAa,aAAb,EAA4B;EACvCM,IAAI,EAAJ,UAAKC,GAAL,EAAqBC,SAArB,EAAsC;IACpC,IAAMC,KAAK,GAAGN,QAAQ,CAACI,GAAD,EAAM,IAAN,EAAY,KAAZ,CAAtB;IACA,IAAIG,KAAK,GAAGF,SAAZ;IACA,IAAMG,aAAa,GAAGJ,GAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEK,UAA3B;;IACA,IAAID,aAAJ,EAAmB;MACjBD,KAAK,GAAGF,SAAS,CAACK,QAAV,EAAR;MACA,IAAMC,eAAe,GAAGZ,sBAAsB,CAACK,GAAD,CAA9C;MACA,IAAMQ,cAAc,GAAGX,qBAAqB,CAACG,GAAD,EAAM,KAAKS,WAAL,CAAiBT,GAAG,CAACU,MAArB,CAAN,EAA+C,KAAKC,UAApD,CAA5C;MACAR,KAAK,CAACS,QAAN,CAAe,MAAf,EAAuB;QACrBC,KAAK,wBACAN,eADA,GACe;UAClBO,IAAI,EAAEN;QADY,CADf,CADgB;QAKrBO,MAAM,EAAE,CAAC,CALY;QAMrBC,IAAI,EAAEtB;MANe,CAAvB;IAQD;;IAED,IAAMoB,IAAI,GAAG,KAAKG,SAAL,CAAenB,WAAW,CAACE,GAAG,CAACU,MAAL,CAA1B,CAAb;IACA,IAAMQ,KAAK,GAAGf,KAAK,CAACS,QAAN,CAAe,MAAf,EAAuB;MACnCC,KAAK,wBACAX,KADA,GACK;QACRY,IAAI;MADI,CADL,CAD8B;MAKnCE,IAAI,EAAE;IAL6B,CAAvB,CAAd;IAQA,OAAOZ,aAAa,GAAGD,KAAH,GAAWe,KAA/B;EACD,CA7BsC;EA8BvCC,SAAS,EAAT,UAAUC,SAAV,EAAmC;IACzB,SAAK,GAAgBA,SAAS,MAA9B;IAAA,IAAOC,SAAS,GAAKD,SAAS,UAA9B;;IACR,IAAIC,SAAJ,EAAe;MACb,OAAO;QACLC,MAAM,EAAE,QADH;QAELpB,KAAK,EAAE;UACLqB,CAAC,EAAE,GADE;UAELC,MAAM,EAAEC,KAFH;UAGLC,IAAI,EAAE;QAHD;MAFF,CAAP;IAQD;;IAED,OAAO;MACLJ,MAAM,EAAE,QADH;MAELpB,KAAK,EAAE;QACLqB,CAAC,EAAE,CADE;QAELC,MAAM,EAAEC,KAFH;QAGLC,IAAI,EAAE;MAHD;IAFF,CAAP;EAQD;AAnDsC,CAA5B,CAAb","names":["registerShape","BACKGROUND_SHAPE","getBackgroundRectStyle","getStyle","getBackgroundRectPath","getRectPath","draw","cfg","container","style","group","backgroundCfg","background","addGroup","backgroundStyle","backgroundPath","parsePoints","points","coordinate","addShape","attrs","path","zIndex","name","parsePath","shape","getMarker","markerCfg","isInPolar","symbol","r","stroke","color","fill"],"sourceRoot":"","sources":["../../../../src/geometry/shape/interval/hollow-rect.ts"],"sourcesContent":["import { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getRectPath } from './util';\n\n/** 描边柱状图 */\nregisterShape('interval', 'hollow-rect', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false);\n    let group = container;\n    const backgroundCfg = cfg?.background;\n    if (backgroundCfg) {\n      group = container.addGroup();\n      const backgroundStyle = getBackgroundRectStyle(cfg);\n      const backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points) as Point[], this.coordinate);\n      group.addShape('path', {\n        attrs: {\n          ...backgroundStyle,\n          path: backgroundPath,\n        },\n        zIndex: -1,\n        name: BACKGROUND_SHAPE,\n      });\n    }\n\n    const path = this.parsePath(getRectPath(cfg.points as Point[]));\n    const shape = group.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return backgroundCfg ? group : shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color, isInPolar } = markerCfg;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null,\n        },\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        stroke: color,\n        fill: null,\n      },\n    };\n  },\n});\n"]},"metadata":{},"sourceType":"module"}