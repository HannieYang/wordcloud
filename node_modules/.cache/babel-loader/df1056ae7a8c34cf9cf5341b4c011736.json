{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { getUnitPatternSize, initCanvas, drawBackground, getSymbolsPosition, transformMatrix, getPixelRatio } from './util';\n/**\n * dotPattern的默认配置\n */\n\nexport var defaultDotPatternCfg = {\n  size: 6,\n  padding: 2,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0,\n  isStagger: true\n};\n/**\n * 绘制圆点\n *\n * @param context\n * @param cfg\n * @param x 圆点中心坐标x\n * @param y 圆点中心坐标y\n */\n\nexport function drawDot(context, cfg, x, y) {\n  var size = cfg.size,\n      fill = cfg.fill,\n      lineWidth = cfg.lineWidth,\n      stroke = cfg.stroke,\n      fillOpacity = cfg.fillOpacity;\n  context.beginPath();\n  context.globalAlpha = fillOpacity;\n  context.fillStyle = fill;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.arc(x, y, size / 2, 0, 2 * Math.PI, false);\n  context.fill();\n\n  if (lineWidth) {\n    context.stroke();\n  }\n\n  context.closePath();\n}\n/**\n * 创建 dot pattern，返回 HTMLCanvasElement\n *\n * @param cfg\n * @returns HTMLCanvasElement\n */\n\nexport function createDotPattern(cfg) {\n  var dotCfg = deepAssign({}, defaultDotPatternCfg, cfg);\n  var size = dotCfg.size,\n      padding = dotCfg.padding,\n      isStagger = dotCfg.isStagger,\n      rotation = dotCfg.rotation; // 计算 画布大小，dots的位置\n\n  var unitSize = getUnitPatternSize(size, padding, isStagger);\n  var dots = getSymbolsPosition(unitSize, isStagger); // 初始化 patternCanvas\n\n  var canvas = initCanvas(unitSize, unitSize);\n  var ctx = canvas.getContext('2d'); // 绘制 background，dots\n\n  drawBackground(ctx, dotCfg, unitSize);\n\n  for (var _i = 0, dots_1 = dots; _i < dots_1.length; _i++) {\n    var _a = dots_1[_i],\n        x = _a[0],\n        y = _a[1];\n    drawDot(ctx, dotCfg, x, y);\n  }\n\n  var pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}","map":{"version":3,"mappings":"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","names":["deepAssign","getUnitPatternSize","initCanvas","drawBackground","getSymbolsPosition","transformMatrix","getPixelRatio","defaultDotPatternCfg","size","padding","backgroundColor","opacity","rotation","fill","fillOpacity","stroke","lineWidth","isStagger","drawDot","context","cfg","x","y","beginPath","globalAlpha","fillStyle","strokeStyle","arc","Math","PI","closePath","createDotPattern","dotCfg","unitSize","dots","canvas","ctx","getContext","_i","pattern","createPattern","dpr","matrix","setTransform"],"sourceRoot":"","sources":["../../../src/utils/pattern/dot.ts"],"sourcesContent":["import { DotPatternCfg } from '../../types/pattern';\nimport { deepAssign } from '../../utils';\nimport {\n  getUnitPatternSize,\n  initCanvas,\n  drawBackground,\n  getSymbolsPosition,\n  transformMatrix,\n  getPixelRatio,\n} from './util';\n\n/**\n * dotPattern的默认配置\n */\nexport const defaultDotPatternCfg = {\n  size: 6,\n  padding: 2,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0,\n  isStagger: true,\n};\n\n/**\n * 绘制圆点\n *\n * @param context\n * @param cfg\n * @param x 圆点中心坐标x\n * @param y 圆点中心坐标y\n */\nexport function drawDot(context: CanvasRenderingContext2D, cfg: DotPatternCfg, x: number, y: number) {\n  const { size, fill, lineWidth, stroke, fillOpacity } = cfg;\n\n  context.beginPath();\n  context.globalAlpha = fillOpacity;\n  context.fillStyle = fill;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.arc(x, y, size / 2, 0, 2 * Math.PI, false);\n  context.fill();\n  if (lineWidth) {\n    context.stroke();\n  }\n  context.closePath();\n}\n\n/**\n * 创建 dot pattern，返回 HTMLCanvasElement\n *\n * @param cfg\n * @returns HTMLCanvasElement\n */\nexport function createDotPattern(cfg?: DotPatternCfg): CanvasPattern {\n  const dotCfg = deepAssign({}, defaultDotPatternCfg, cfg);\n\n  const { size, padding, isStagger, rotation } = dotCfg;\n\n  // 计算 画布大小，dots的位置\n  const unitSize = getUnitPatternSize(size, padding, isStagger);\n  const dots = getSymbolsPosition(unitSize, isStagger);\n\n  // 初始化 patternCanvas\n  const canvas = initCanvas(unitSize, unitSize);\n  const ctx = canvas.getContext('2d');\n\n  // 绘制 background，dots\n  drawBackground(ctx, dotCfg, unitSize);\n  for (const [x, y] of dots) {\n    drawDot(ctx, dotCfg, x, y);\n  }\n\n  const pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    const dpr = getPixelRatio();\n    const matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}\n"]},"metadata":{},"sourceType":"module"}