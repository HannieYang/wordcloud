{"ast":null,"code":"import { registerShape, Util } from '@antv/g2';\nimport { clamp } from '@antv/util';\n/**\n * 自定义 Shape 部分: 自定义米轨仪表盘\n * 定义 STEP, STEP_RATIO. 可绘制区域: 1 / (STEP + 1) * i -> 1 / (STEP + 1) * i + (STEP_RATIO / (STEP + 1))\n */\n\nregisterShape('interval', 'meter-gauge', {\n  draw: function (cfg, container) {\n    // 使用 customInfo 传递参数\n    var _a = cfg.customInfo.meter,\n        meter = _a === void 0 ? {} : _a;\n    var _b = meter.steps,\n        STEP = _b === void 0 ? 50 : _b,\n        _c = meter.stepRatio,\n        STEP_RATIO = _c === void 0 ? 0.5 : _c;\n    STEP = STEP < 1 ? 1 : STEP; // stepRatio 取值范围: (0, 1]\n\n    STEP_RATIO = clamp(STEP_RATIO, 0, 1);\n    var _d = this.coordinate,\n        COORD_START_ANGLE = _d.startAngle,\n        COORD_END_ANGLE = _d.endAngle;\n    var GAP = 0;\n\n    if (STEP_RATIO > 0 && STEP_RATIO < 1) {\n      var TOTAL = COORD_END_ANGLE - COORD_START_ANGLE;\n      GAP = TOTAL / STEP / (STEP_RATIO / (1 - STEP_RATIO) + 1 - 1 / STEP);\n    }\n\n    var INTERVAL = GAP / (1 - STEP_RATIO) * STEP_RATIO;\n    var group = container.addGroup(); // 绘制图形的时候，留下 gap\n\n    var center = this.coordinate.getCenter();\n    var radius = this.coordinate.getRadius();\n\n    var _e = Util.getAngle(cfg, this.coordinate),\n        START_ANGLE = _e.startAngle,\n        END_ANGLE = _e.endAngle;\n\n    for (var startAngle = START_ANGLE; startAngle < END_ANGLE;) {\n      var endAngle = void 0;\n      var r = (startAngle - COORD_START_ANGLE) % (INTERVAL + GAP);\n\n      if (r < INTERVAL) {\n        endAngle = startAngle + (INTERVAL - r);\n      } else {\n        startAngle += INTERVAL + GAP - r;\n        endAngle = startAngle + INTERVAL;\n      }\n\n      var path = Util.getSectorPath(center.x, center.y, radius, startAngle, Math.min(endAngle, END_ANGLE), radius * this.coordinate.innerRadius);\n      group.addShape('path', {\n        name: 'meter-gauge',\n        attrs: {\n          path: path,\n          fill: cfg.color,\n          stroke: cfg.color,\n          lineWidth: 0.5\n        }\n      });\n      startAngle = endAngle + GAP;\n    }\n\n    return group;\n  }\n});","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAA+BC,IAA/B,QAA2C,UAA3C;AACA,SAASC,KAAT,QAAsB,YAAtB;AAOA;;;;;AAIAF,aAAa,CAAC,UAAD,EAAa,aAAb,EAA4B;EACvCG,IAAI,EAAJ,UAAKC,GAAL,EAAoBC,SAApB,EAA6B;IAC3B;IACQ,SAAeD,GAAG,CAACE,UAAJ,CAAcC,KAA7B;IAAA,SAAK,mBAAG,EAAH,GAAKC,EAAV;IACF,SAAkDD,KAAK,MAAvD;IAAA,IAAOE,IAAI,mBAAG,EAAH,GAAKC,EAAhB;IAAA,IAAkBC,KAAgCJ,KAAK,UAAvD;IAAA,IAA6BK,UAAU,mBAAG,GAAH,GAAMD,EAA7C;IACNF,IAAI,GAAGA,IAAI,GAAG,CAAP,GAAW,CAAX,GAAeA,IAAtB,CAJ2B,CAK3B;;IACAG,UAAU,GAAGV,KAAK,CAACU,UAAD,EAAa,CAAb,EAAgB,CAAhB,CAAlB;IAEM,SAA+D,KAAKC,UAApE;IAAA,IAAcC,iBAAiB,gBAA/B;IAAA,IAA2CC,eAAe,cAA1D;IACN,IAAIC,GAAG,GAAG,CAAV;;IACA,IAAIJ,UAAU,GAAG,CAAb,IAAkBA,UAAU,GAAG,CAAnC,EAAsC;MACpC,IAAMK,KAAK,GAAGF,eAAe,GAAGD,iBAAhC;MACAE,GAAG,GAAGC,KAAK,GAAGR,IAAR,IAAgBG,UAAU,IAAI,IAAIA,UAAR,CAAV,GAAgC,CAAhC,GAAoC,IAAIH,IAAxD,CAAN;IACD;;IACD,IAAMS,QAAQ,GAAIF,GAAG,IAAI,IAAIJ,UAAR,CAAJ,GAA2BA,UAA5C;IAEA,IAAMO,KAAK,GAAGd,SAAS,CAACe,QAAV,EAAd,CAhB2B,CAiB3B;;IACA,IAAMC,MAAM,GAAG,KAAKR,UAAL,CAAgBS,SAAhB,EAAf;IACA,IAAMC,MAAM,GAAG,KAAKV,UAAL,CAAgBW,SAAhB,EAAf;;IACM,SAAmDvB,IAAI,CAACwB,QAAL,CAAcrB,GAAd,EAAmB,KAAKS,UAAxB,CAAnD;IAAA,IAAca,WAAW,gBAAzB;IAAA,IAAqCC,SAAS,cAA9C;;IAEN,KAAK,IAAIC,UAAU,GAAGF,WAAtB,EAAmCE,UAAU,GAAGD,SAAhD,GAA6D;MAC3D,IAAIE,QAAQ,SAAZ;MACA,IAAMC,CAAC,GAAG,CAACF,UAAU,GAAGd,iBAAd,KAAoCI,QAAQ,GAAGF,GAA/C,CAAV;;MACA,IAAIc,CAAC,GAAGZ,QAAR,EAAkB;QAChBW,QAAQ,GAAGD,UAAU,IAAIV,QAAQ,GAAGY,CAAf,CAArB;MACD,CAFD,MAEO;QACLF,UAAU,IAAIV,QAAQ,GAAGF,GAAX,GAAiBc,CAA/B;QACAD,QAAQ,GAAGD,UAAU,GAAGV,QAAxB;MACD;;MACD,IAAMa,IAAI,GAAG9B,IAAI,CAAC+B,aAAL,CACXX,MAAM,CAACY,CADI,EAEXZ,MAAM,CAACa,CAFI,EAGXX,MAHW,EAIXK,UAJW,EAKXO,IAAI,CAACC,GAAL,CAASP,QAAT,EAAmBF,SAAnB,CALW,EAMXJ,MAAM,GAAG,KAAKV,UAAL,CAAgBwB,WANd,CAAb;MAQAlB,KAAK,CAACmB,QAAN,CAAe,MAAf,EAAuB;QACrBC,IAAI,EAAE,aADe;QAErBC,KAAK,EAAE;UACLT,IAAI,MADC;UAELU,IAAI,EAAErC,GAAG,CAACsC,KAFL;UAGLC,MAAM,EAAEvC,GAAG,CAACsC,KAHP;UAILE,SAAS,EAAE;QAJN;MAFc,CAAvB;MASAhB,UAAU,GAAGC,QAAQ,GAAGb,GAAxB;IACD;;IAED,OAAOG,KAAP;EACD;AArDsC,CAA5B,CAAb","names":["registerShape","Util","clamp","draw","cfg","container","customInfo","meter","_a","STEP","_b","_c","STEP_RATIO","coordinate","COORD_START_ANGLE","COORD_END_ANGLE","GAP","TOTAL","INTERVAL","group","addGroup","center","getCenter","radius","getRadius","getAngle","START_ANGLE","END_ANGLE","startAngle","endAngle","r","path","getSectorPath","x","y","Math","min","innerRadius","addShape","name","attrs","fill","color","stroke","lineWidth"],"sourceRoot":"","sources":["../../../../src/plots/gauge/shapes/meter-gauge.ts"],"sourcesContent":["import { registerShape, Types, Util } from '@antv/g2';\nimport { clamp } from '@antv/util';\nimport { GaugeCustomInfo } from '../types';\n\ntype ShapeCfg = Omit<Types.ShapeInfo, 'customInfo'> & {\n  customInfo: GaugeCustomInfo;\n};\n\n/**\n * 自定义 Shape 部分: 自定义米轨仪表盘\n * 定义 STEP, STEP_RATIO. 可绘制区域: 1 / (STEP + 1) * i -> 1 / (STEP + 1) * i + (STEP_RATIO / (STEP + 1))\n */\nregisterShape('interval', 'meter-gauge', {\n  draw(cfg: ShapeCfg, container) {\n    // 使用 customInfo 传递参数\n    const { meter = {} } = cfg.customInfo;\n    let { steps: STEP = 50, stepRatio: STEP_RATIO = 0.5 } = meter;\n    STEP = STEP < 1 ? 1 : STEP;\n    // stepRatio 取值范围: (0, 1]\n    STEP_RATIO = clamp(STEP_RATIO, 0, 1);\n\n    const { startAngle: COORD_START_ANGLE, endAngle: COORD_END_ANGLE } = this.coordinate;\n    let GAP = 0;\n    if (STEP_RATIO > 0 && STEP_RATIO < 1) {\n      const TOTAL = COORD_END_ANGLE - COORD_START_ANGLE;\n      GAP = TOTAL / STEP / (STEP_RATIO / (1 - STEP_RATIO) + 1 - 1 / STEP);\n    }\n    const INTERVAL = (GAP / (1 - STEP_RATIO)) * STEP_RATIO;\n\n    const group = container.addGroup();\n    // 绘制图形的时候，留下 gap\n    const center = this.coordinate.getCenter();\n    const radius = this.coordinate.getRadius();\n    const { startAngle: START_ANGLE, endAngle: END_ANGLE } = Util.getAngle(cfg, this.coordinate);\n\n    for (let startAngle = START_ANGLE; startAngle < END_ANGLE; ) {\n      let endAngle;\n      const r = (startAngle - COORD_START_ANGLE) % (INTERVAL + GAP);\n      if (r < INTERVAL) {\n        endAngle = startAngle + (INTERVAL - r);\n      } else {\n        startAngle += INTERVAL + GAP - r;\n        endAngle = startAngle + INTERVAL;\n      }\n      const path = Util.getSectorPath(\n        center.x,\n        center.y,\n        radius,\n        startAngle,\n        Math.min(endAngle, END_ANGLE),\n        radius * this.coordinate.innerRadius\n      );\n      group.addShape('path', {\n        name: 'meter-gauge',\n        attrs: {\n          path,\n          fill: cfg.color,\n          stroke: cfg.color,\n          lineWidth: 0.5,\n        },\n      });\n      startAngle = endAngle + GAP;\n    }\n\n    return group;\n  },\n});\n"]},"metadata":{},"sourceType":"module"}