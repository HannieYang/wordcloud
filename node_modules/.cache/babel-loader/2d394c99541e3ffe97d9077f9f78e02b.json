{"ast":null,"code":"import { assign, isString, isFunction } from '@antv/util';\nimport { sankey, left, right, center, justify } from './sankey';\nvar ALIGN_METHOD = {\n  left: left,\n  right: right,\n  center: center,\n  justify: justify\n};\n/**\n * 默认值\n */\n\nvar DEFAULT_OPTIONS = {\n  nodeId: function (node) {\n    return node.index;\n  },\n  nodeAlign: 'justify',\n  nodeWidth: 0.008,\n  nodePadding: 0.03,\n  nodeSort: undefined\n};\n/**\n * 获得 align function\n * @param nodeAlign\n * @param nodeDepth\n */\n\nexport function getNodeAlignFunction(nodeAlign) {\n  var func = isString(nodeAlign) ? ALIGN_METHOD[nodeAlign] : isFunction(nodeAlign) ? nodeAlign : null;\n  return func || justify;\n}\nexport function getDefaultOptions(sankeyLayoutOptions) {\n  return assign({}, DEFAULT_OPTIONS, sankeyLayoutOptions);\n}\n/**\n * 桑基图利用数据进行布局的函数，最终返回节点、边的位置（0 - 1 的信息）\n * 将会修改 data 数据\n * @param sankeyLayoutOptions\n * @param data\n */\n\nexport function sankeyLayout(sankeyLayoutOptions, data) {\n  var options = getDefaultOptions(sankeyLayoutOptions);\n  var nodeId = options.nodeId,\n      nodeSort = options.nodeSort,\n      nodeAlign = options.nodeAlign,\n      nodeWidth = options.nodeWidth,\n      nodePadding = options.nodePadding,\n      nodeDepth = options.nodeDepth;\n  var sankeyProcessor = sankey() // .links((d: any) => d.links)\n  // .nodes((d: any) => d.nodes)\n  .nodeSort(nodeSort).nodeWidth(nodeWidth).nodePadding(nodePadding).nodeDepth(nodeDepth).nodeAlign(getNodeAlignFunction(nodeAlign)).extent([[0, 0], [1, 1]]).nodeId(nodeId); // 进行桑基图布局处理\n\n  var layoutData = sankeyProcessor(data); // post process (x, y), etc.\n\n  var nodes = layoutData.nodes.map(function (node) {\n    var x0 = node.x0,\n        x1 = node.x1,\n        y0 = node.y0,\n        y1 = node.y1;\n    /* points\n     * 3---2\n     * |   |\n     * 0---1\n     */\n\n    node.x = [x0, x1, x1, x0];\n    node.y = [y0, y0, y1, y1];\n    return node;\n  }).filter(function (node) {\n    return node.name !== null;\n  });\n  var links = layoutData.links.map(function (edge) {\n    var source = edge.source,\n        target = edge.target;\n    var sx = source.x1;\n    var tx = target.x0;\n    edge.x = [sx, sx, tx, tx];\n    var offset = edge.width / 2;\n    edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];\n    return edge;\n  }).filter(function (edge) {\n    var source = edge.source,\n        target = edge.target;\n    return source.name !== null && target.name !== null;\n  });\n  return {\n    nodes: nodes,\n    links: links\n  };\n}","map":{"version":3,"mappings":"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","names":["assign","isString","isFunction","sankey","left","right","center","justify","ALIGN_METHOD","DEFAULT_OPTIONS","nodeId","node","index","nodeAlign","nodeWidth","nodePadding","nodeSort","undefined","getNodeAlignFunction","func","getDefaultOptions","sankeyLayoutOptions","sankeyLayout","data","options","nodeDepth","sankeyProcessor","extent","layoutData","nodes","map","x1","y0","y1","x","x0","y","filter","name","links","edge","target","sx","source","tx","offset","width"],"sourceRoot":"","sources":["../../../src/plots/sankey/layout.ts"],"sourcesContent":["import { assign, isString, isFunction } from '@antv/util';\nimport { Datum } from '../../types';\nimport { sankey, left, right, center, justify } from './sankey';\n\nconst ALIGN_METHOD = {\n  left,\n  right,\n  center,\n  justify,\n};\n\ntype InputNode = {\n  readonly name: string;\n};\n\ntype InputLink = {\n  readonly source: number;\n  readonly target: number;\n  readonly value: number;\n};\n\ntype OutputNode = {\n  readonly name: string;\n  readonly x0: number;\n  readonly x1: number;\n  readonly y0: number;\n  readonly y1: number;\n  readonly depth: number;\n  readonly value: number;\n\n  // 用于绘制 polygon\n  x: number[];\n  y: number[];\n};\n\ntype OutputLink = {\n  readonly source: OutputNode;\n  readonly target: OutputNode;\n  readonly value: number;\n  readonly width: number;\n  readonly y0: number;\n  readonly y1: number;\n\n  // 用于绘制 edge\n  x?: number[];\n  y?: number[];\n};\n\n/**\n * 桑基图布局的数据结构定义\n */\nexport type SankeyLayoutInputData = {\n  readonly nodes: InputNode[];\n  readonly links: InputLink[];\n};\n\ntype SankeyLayoutOutputData = {\n  readonly nodes: OutputNode[];\n  readonly links: OutputLink[];\n};\n\n/**\n * 对齐方式的类型定义\n */\nexport type NodeAlign = keyof typeof ALIGN_METHOD | Function;\n\n/**\n * 节点的 depth 自定义\n */\nexport type NodeDepth = (datum: Datum, maxDepth: number) => number;\n\n/**\n * 节点排序方法的类型定义\n */\nexport type NodeSort = (a: Datum, b: Datum) => number;\n\n/**\n * 布局参数的定义\n */\nexport type SankeyLayoutOptions = {\n  readonly nodeId?: (node: Datum) => any;\n  // readonly value?: (node: Datum) => any;\n  // readonly source?: (edge: Datum) => any;\n  // readonly target?: (edge: Datum) => any;\n  // sankey.nodeSort(undefined) is the default and resorts by ascending breadth during each iteration.\n  // sankey.nodeSort(null) specifies the input order of nodes and never sorts.\n  // sankey.nodeSort(function) specifies the given order as a comparator function and sorts once on initialization.\n  readonly nodeSort?: (a: any, b: any) => number;\n  readonly nodeAlign?: NodeAlign;\n  readonly nodeWidth?: number;\n  readonly nodePadding?: number;\n  readonly nodeDepth?: NodeDepth;\n};\n\n/**\n * 默认值\n */\nconst DEFAULT_OPTIONS: Partial<SankeyLayoutOptions> = {\n  nodeId: (node: Datum) => node.index,\n  nodeAlign: 'justify',\n  nodeWidth: 0.008,\n  nodePadding: 0.03,\n  nodeSort: undefined,\n};\n\n/**\n * 获得 align function\n * @param nodeAlign\n * @param nodeDepth\n */\nexport function getNodeAlignFunction(nodeAlign: NodeAlign) {\n  const func = isString(nodeAlign) ? ALIGN_METHOD[nodeAlign] : isFunction(nodeAlign) ? nodeAlign : null;\n\n  return func || justify;\n}\n\nexport function getDefaultOptions(sankeyLayoutOptions: SankeyLayoutOptions) {\n  return assign({}, DEFAULT_OPTIONS, sankeyLayoutOptions);\n}\n\n/**\n * 桑基图利用数据进行布局的函数，最终返回节点、边的位置（0 - 1 的信息）\n * 将会修改 data 数据\n * @param sankeyLayoutOptions\n * @param data\n */\nexport function sankeyLayout(\n  sankeyLayoutOptions: SankeyLayoutOptions,\n  data: SankeyLayoutInputData\n): SankeyLayoutOutputData {\n  const options = getDefaultOptions(sankeyLayoutOptions);\n\n  const { nodeId, nodeSort, nodeAlign, nodeWidth, nodePadding, nodeDepth } = options;\n\n  const sankeyProcessor = sankey()\n    // .links((d: any) => d.links)\n    // .nodes((d: any) => d.nodes)\n    .nodeSort(nodeSort)\n    .nodeWidth(nodeWidth)\n    .nodePadding(nodePadding)\n    .nodeDepth(nodeDepth)\n    .nodeAlign(getNodeAlignFunction(nodeAlign))\n    .extent([\n      [0, 0],\n      [1, 1],\n    ])\n    .nodeId(nodeId);\n\n  // 进行桑基图布局处理\n  const layoutData: SankeyLayoutOutputData = sankeyProcessor(data);\n\n  // post process (x, y), etc.\n  const nodes = layoutData.nodes\n    .map((node) => {\n      const { x0, x1, y0, y1 } = node;\n      /* points\n       * 3---2\n       * |   |\n       * 0---1\n       */\n      node.x = [x0, x1, x1, x0];\n      node.y = [y0, y0, y1, y1];\n\n      return node;\n    })\n    .filter((node) => {\n      return node.name !== null;\n    });\n\n  const links = layoutData.links\n    .map((edge) => {\n      const { source, target } = edge;\n      const sx = source.x1;\n      const tx = target.x0;\n      edge.x = [sx, sx, tx, tx];\n      const offset = edge.width / 2;\n      edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];\n\n      return edge;\n    })\n    .filter((edge) => {\n      const { source, target } = edge;\n      return source.name !== null && target.name !== null;\n    });\n\n  return { nodes, links };\n}\n"]},"metadata":{},"sourceType":"module"}