{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { isRealNumber, pick } from '../../utils';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { sankeyLayout } from './layout';\nimport { cutoffCircle } from './circle';\n/**\n * 是否是 node-link 类型的数据结构\n * @param dataTyp\n * @returns\n */\n\nfunction isNodeLink(dataType) {\n  return dataType === 'node-link';\n}\n\nexport function getNodeWidthRatio(nodeWidth, nodeWidthRatio, width) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\nexport function getNodePaddingRatio(nodePadding, nodePaddingRatio, height) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\n\nexport function transformToViewsData(options, width, height) {\n  var dataType = options.dataType,\n      data = options.data,\n      sourceField = options.sourceField,\n      targetField = options.targetField,\n      weightField = options.weightField,\n      nodeAlign = options.nodeAlign,\n      nodeSort = options.nodeSort,\n      nodePadding = options.nodePadding,\n      nodePaddingRatio = options.nodePaddingRatio,\n      nodeWidth = options.nodeWidth,\n      nodeWidthRatio = options.nodeWidthRatio,\n      nodeDepth = options.nodeDepth,\n      _a = options.rawFields,\n      rawFields = _a === void 0 ? [] : _a;\n  var sankeyLayoutInputData;\n\n  if (!isNodeLink(dataType)) {\n    sankeyLayoutInputData = transformDataToNodeLinkData(cutoffCircle(data, sourceField, targetField), sourceField, targetField, weightField, rawFields);\n  } else {\n    sankeyLayoutInputData = data;\n  } // 3. layout 之后的数据\n\n\n  var _b = sankeyLayout({\n    nodeAlign: nodeAlign,\n    nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n    nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n    nodeSort: nodeSort,\n    nodeDepth: nodeDepth\n  }, sankeyLayoutInputData),\n      nodes = _b.nodes,\n      links = _b.links; // 4. 生成绘图数据\n\n\n  return {\n    nodes: nodes.map(function (node) {\n      return __assign(__assign({}, pick(node, __spreadArrays(['x', 'y', 'name'], rawFields))), {\n        isNode: true\n      });\n    }),\n    edges: links.map(function (link) {\n      return __assign(__assign({\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name\n      }, pick(link, __spreadArrays(['x', 'y', 'value'], rawFields))), {\n        isNode: false\n      });\n    })\n  };\n}","map":{"version":3,"mappings":"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","names":["isRealNumber","pick","transformDataToNodeLinkData","sankeyLayout","cutoffCircle","isNodeLink","dataType","getNodeWidthRatio","nodeWidth","nodeWidthRatio","width","getNodePaddingRatio","nodePadding","nodePaddingRatio","height","transformToViewsData","options","data","sourceField","targetField","weightField","nodeAlign","nodeSort","nodeDepth","_a","rawFields","sankeyLayoutInputData","nodes","links","map","node","__spreadArrays","isNode","edges","link","source","name","target"],"sourceRoot":"","sources":["../../../src/plots/sankey/helper.ts"],"sourcesContent":["import { isRealNumber, pick } from '../../utils';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { Data } from '../../types';\nimport { sankeyLayout, SankeyLayoutInputData } from './layout';\nimport { cutoffCircle } from './circle';\nimport { SankeyOptions } from './types';\n\n/**\n * 是否是 node-link 类型的数据结构\n * @param dataTyp\n * @returns\n */\nfunction isNodeLink(dataType: string) {\n  return dataType === 'node-link';\n}\n\nexport function getNodeWidthRatio(nodeWidth: number, nodeWidthRatio: number, width: number) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\n\nexport function getNodePaddingRatio(nodePadding: number, nodePaddingRatio: number, height: number) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\nexport function transformToViewsData(options: SankeyOptions, width: number, height: number) {\n  const {\n    dataType,\n    data,\n    sourceField,\n    targetField,\n    weightField,\n    nodeAlign,\n    nodeSort,\n    nodePadding,\n    nodePaddingRatio,\n    nodeWidth,\n    nodeWidthRatio,\n    nodeDepth,\n    rawFields = [],\n  } = options;\n\n  let sankeyLayoutInputData: unknown;\n\n  if (!isNodeLink(dataType)) {\n    sankeyLayoutInputData = transformDataToNodeLinkData(\n      cutoffCircle(data as Data, sourceField, targetField),\n      sourceField,\n      targetField,\n      weightField,\n      rawFields\n    );\n  } else {\n    sankeyLayoutInputData = data;\n  }\n\n  // 3. layout 之后的数据\n  const { nodes, links } = sankeyLayout(\n    {\n      nodeAlign,\n      nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n      nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n      nodeSort,\n      nodeDepth,\n    },\n    sankeyLayoutInputData as SankeyLayoutInputData\n  );\n\n  // 4. 生成绘图数据\n  return {\n    nodes: nodes.map((node) => {\n      return {\n        ...pick(node, ['x', 'y', 'name', ...rawFields]),\n        isNode: true,\n      };\n    }),\n    edges: links.map((link) => {\n      return {\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name,\n        ...pick(link, ['x', 'y', 'value', ...rawFields]),\n        isNode: false,\n      };\n    }),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}