{"ast":null,"code":"import { Event as GEvent } from '../dependents';\n/**\n * @todo Whether it can(or necessary to) keep consistent with the structure of G.Event or directly use the structure of G.Event\n * G2 事件的事件包装类，基于 G.Event\n */\n\nvar Event =\n/** @class */\nfunction () {\n  function Event(view, gEvent, data) {\n    this.view = view;\n    this.gEvent = gEvent;\n    this.data = data;\n    this.type = gEvent.type;\n  }\n  /**\n   * 非交互产生的事件\n   * @param view\n   * @param type\n   * @param data\n   */\n\n\n  Event.fromData = function (view, type, data) {\n    return new Event(view, new GEvent(type, {}), data);\n  };\n\n  Object.defineProperty(Event.prototype, \"target\", {\n    // below props are proxy props of G.event convenient\n\n    /** the real trigger shape of the event */\n    get: function () {\n      // @todo G 中事件定义为 object 不正确，这里先 ignore\n      // @ts-ignore\n      return this.gEvent.target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"event\", {\n    /** 获取对应的 dom 原生时间 */\n    get: function () {\n      return this.gEvent.originalEvent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"x\", {\n    /** x 画布坐标 */\n    get: function () {\n      return this.gEvent.x;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"y\", {\n    /** y 画布坐标 */\n    get: function () {\n      return this.gEvent.y;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"clientX\", {\n    /** x 窗口坐标 */\n    get: function () {\n      return this.gEvent.clientX;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"clientY\", {\n    /** y 窗口坐标 */\n    get: function () {\n      return this.gEvent.clientY;\n    },\n    enumerable: false,\n    configurable: true\n  }); // end for proxy events\n\n  /**\n   * event string\n   * @returns string\n   */\n\n  Event.prototype.toString = function () {\n    return \"[Event (type=\".concat(this.type, \")]\");\n  };\n  /**\n   * clone a new event with same attributes\n   * @returns [[Event]]\n   */\n\n\n  Event.prototype.clone = function () {\n    return new Event(this.view, this.gEvent, this.data);\n  };\n\n  return Event;\n}();\n\nexport default Event;","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,IAAIC,MAAlB,QAAwC,eAAxC;AAIA;;;;;AAIA;AAAA;AAAA;EAUE,eAAYC,IAAZ,EAAwBC,MAAxB,EAAwCC,IAAxC,EAAoD;IAClD,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYF,MAAM,CAACE,IAAnB;EACD;EAED;;;;;;;;EAMcL,iBAAd,UAAuBE,IAAvB,EAAmCG,IAAnC,EAAiDD,IAAjD,EAA4D;IAC1D,OAAO,IAAIJ,KAAJ,CAAUE,IAAV,EAAgB,IAAID,MAAJ,CAAWI,IAAX,EAAiB,EAAjB,CAAhB,EAAsCD,IAAtC,CAAP;EACD,CAFa;;EAOdE,sBAAWN,eAAX,EAAW,QAAX,EAAiB;IAHjB;;IAEA;SACA;MACE;MACA;MACA,OAAO,KAAKG,MAAL,CAAYI,MAAnB;IACD,CAJgB;qBAAA;;EAAA,CAAjB;EAOAD,sBAAWN,eAAX,EAAW,OAAX,EAAgB;IADhB;SACA;MACE,OAAO,KAAKG,MAAL,CAAYK,aAAnB;IACD,CAFe;qBAAA;;EAAA,CAAhB;EAKAF,sBAAWN,eAAX,EAAW,GAAX,EAAY;IADZ;SACA;MACE,OAAO,KAAKG,MAAL,CAAYM,CAAnB;IACD,CAFW;qBAAA;;EAAA,CAAZ;EAKAH,sBAAWN,eAAX,EAAW,GAAX,EAAY;IADZ;SACA;MACE,OAAO,KAAKG,MAAL,CAAYO,CAAnB;IACD,CAFW;qBAAA;;EAAA,CAAZ;EAKAJ,sBAAWN,eAAX,EAAW,SAAX,EAAkB;IADlB;SACA;MACE,OAAO,KAAKG,MAAL,CAAYQ,OAAnB;IACD,CAFiB;qBAAA;;EAAA,CAAlB;EAKAL,sBAAWN,eAAX,EAAW,SAAX,EAAkB;IADlB;SACA;MACE,OAAO,KAAKG,MAAL,CAAYS,OAAnB;IACD,CAFiB;qBAAA;;EAAA,CAAlB,EAzDF,CA4DE;;EAEA;;;;;EAIOZ,2BAAP;IACE,OAAO,uBAAgB,KAAKK,IAArB,EAAyB,IAAzB,CAAP;EACD,CAFM;EAIP;;;;;;EAIOL,wBAAP;IACE,OAAO,IAAIA,KAAJ,CAAU,KAAKE,IAAf,EAAqB,KAAKC,MAA1B,EAAkC,KAAKC,IAAvC,CAAP;EACD,CAFM;;EAGT;AAAC,CA7ED","names":["Event","GEvent","view","gEvent","data","type","Object","target","originalEvent","x","y","clientX","clientY"],"sourceRoot":"","sources":["../../src/chart/event.ts"],"sourcesContent":["import { Event as GEvent, IShape } from '../dependents';\nimport { Datum } from '../interface';\nimport View from './view';\n\n/**\n * @todo Whether it can(or necessary to) keep consistent with the structure of G.Event or directly use the structure of G.Event\n * G2 事件的事件包装类，基于 G.Event\n */\nexport default class Event {\n  /** 当前 target 归属的 view 实例 */\n  public view: View;\n  /** 被包装的原生 G 事件 */\n  public gEvent: GEvent;\n  /** 原始数据 */\n  public data?: Datum;\n  /** 事件类型 */\n  public type: string;\n\n  constructor(view: View, gEvent: GEvent, data?: Datum) {\n    this.view = view;\n    this.gEvent = gEvent;\n    this.data = data;\n    this.type = gEvent.type;\n  }\n\n  /**\n   * 非交互产生的事件\n   * @param view\n   * @param type\n   * @param data\n   */\n  public static fromData(view: View, type: string, data: Datum) {\n    return new Event(view, new GEvent(type, {}), data);\n  }\n\n  // below props are proxy props of G.event convenient\n\n  /** the real trigger shape of the event */\n  public get target(): IShape {\n    // @todo G 中事件定义为 object 不正确，这里先 ignore\n    // @ts-ignore\n    return this.gEvent.target;\n  }\n\n  /** 获取对应的 dom 原生时间 */\n  public get event(): any {\n    return this.gEvent.originalEvent;\n  }\n\n  /** x 画布坐标 */\n  public get x(): number {\n    return this.gEvent.x;\n  }\n\n  /** y 画布坐标 */\n  public get y(): number {\n    return this.gEvent.y;\n  }\n\n  /** x 窗口坐标 */\n  public get clientX(): number {\n    return this.gEvent.clientX;\n  }\n\n  /** y 窗口坐标 */\n  public get clientY(): number {\n    return this.gEvent.clientY;\n  }\n  // end for proxy events\n\n  /**\n   * event string\n   * @returns string\n   */\n  public toString(): string {\n    return `[Event (type=${this.type})]`;\n  }\n\n  /**\n   * clone a new event with same attributes\n   * @returns [[Event]]\n   */\n  public clone(): Event {\n    return new Event(this.view, this.gEvent, this.data);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}