{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, max, map, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\n\nfunction normalizeSize(arr) {\n  if (!isArray(arr)) {\n    return [];\n  }\n\n  var maxValue = max(arr);\n  return map(arr, function (num) {\n    return num / maxValue;\n  });\n}\n\nvar ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints: function (pointInfo) {\n    var radius = pointInfo.size / 2;\n    var points = [];\n    var sizeArr = normalizeSize(pointInfo._size);\n    each(pointInfo.y, function (y, index) {\n      var offset = sizeArr[index] * radius;\n      var isMin = index === 0;\n      var isMax = index === pointInfo.y.length - 1;\n      points.push({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x - offset,\n        y: y\n      });\n      points.unshift({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x + offset,\n        y: y\n      });\n    });\n    return points;\n  }\n});\nregisterShape('violin', 'violin', {\n  draw: function (cfg, container) {\n    var shapeAttrs = getStyle(cfg, true, true);\n    var path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: __assign(__assign({}, shapeAttrs), {\n        path: path\n      }),\n      name: 'violin'\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default ViolinShapeFactory;","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,OAAzB,QAAwC,YAAxC;AAGA,SAASC,aAAT,EAAwBC,oBAAxB,QAAoD,SAApD;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAAoC;EAClC,IAAI,CAACN,OAAO,CAACM,GAAD,CAAZ,EAAmB;IACjB,OAAO,EAAP;EACD;;EACD,IAAMC,QAAQ,GAAGT,GAAG,CAACQ,GAAD,CAApB;EACA,OAAOP,GAAG,CAACO,GAAD,EAAM,UAACE,GAAD,EAAI;IAAK,UAAG,GAAGD,QAAN;EAAc,CAA7B,CAAV;AACD;;AAED,IAAME,kBAAkB,GAAGP,oBAAoB,CAAC,QAAD,EAAW;EACxDQ,gBAAgB,EAAE,QADsC;EAExDC,gBAAgB,EAAhB,UAAiBC,SAAjB,EAA4C;IAC1C,IAAMC,MAAM,GAAGD,SAAS,CAACE,IAAV,GAAiB,CAAhC;IACA,IAAMC,MAAM,GAAG,EAAf;IACA,IAAMC,OAAO,GAAGX,aAAa,CAACO,SAAS,CAACK,KAAX,CAA7B;IAEApB,IAAI,CAACe,SAAS,CAACM,CAAX,EAA0B,UAACA,CAAD,EAAIC,KAAJ,EAAS;MACrC,IAAMC,MAAM,GAAGJ,OAAO,CAACG,KAAD,CAAP,GAAiBN,MAAhC;MACA,IAAMQ,KAAK,GAAGF,KAAK,KAAK,CAAxB;MACA,IAAMG,KAAK,GAAGH,KAAK,KAAMP,SAAS,CAACM,CAAV,CAAyBK,MAAzB,GAAkC,CAA3D;MACAR,MAAM,CAACS,IAAP,CAAY;QACVH,KAAK,OADK;QAEVC,KAAK,OAFK;QAGVG,CAAC,EAAGb,SAAS,CAACa,CAAV,GAAyBL,MAHnB;QAIVF,CAAC;MAJS,CAAZ;MAMAH,MAAM,CAACW,OAAP,CAAe;QACbL,KAAK,OADQ;QAEbC,KAAK,OAFQ;QAGbG,CAAC,EAAGb,SAAS,CAACa,CAAV,GAAyBL,MAHhB;QAIbF,CAAC;MAJY,CAAf;IAMD,CAhBG,CAAJ;IAiBA,OAAOH,MAAP;EACD;AAzBuD,CAAX,CAA/C;AA4BAd,aAAa,CAAC,QAAD,EAAW,QAAX,EAAqB;EAChC0B,IAAI,EAAJ,UAAKC,GAAL,EAAqBC,SAArB,EAAsC;IACpC,IAAMC,UAAU,GAAG1B,QAAQ,CAACwB,GAAD,EAAM,IAAN,EAAY,IAAZ,CAA3B;IACA,IAAMG,IAAI,GAAG,KAAKC,SAAL,CAAe7B,aAAa,CAACyB,GAAG,CAACb,MAAL,CAA5B,CAAb;IACA,OAAOc,SAAS,CAACI,QAAV,CAAmB,MAAnB,EAA2B;MAChCC,KAAK,wBACAJ,UADA,GACU;QACbC,IAAI;MADS,CADV,CAD2B;MAKhCI,IAAI,EAAE;IAL0B,CAA3B,CAAP;EAOD,CAX+B;EAYhCC,SAAS,EAAT,UAAUC,SAAV,EAAmC;IACzB,SAAK,GAAKA,SAAS,MAAnB;IAER,OAAO;MACLC,MAAM,EAAE,QADH;MAELC,KAAK,EAAE;QACLC,CAAC,EAAE,CADE;QAELC,IAAI,EAAEC;MAFD;IAFF,CAAP;EAOD;AAtB+B,CAArB,CAAb;AAyBA,eAAejC,kBAAf","names":["each","max","map","isArray","registerShape","registerShapeFactory","getViolinPath","getStyle","normalizeSize","arr","maxValue","num","ViolinShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","radius","size","points","sizeArr","_size","y","index","offset","isMin","isMax","length","push","x","unshift","draw","cfg","container","shapeAttrs","path","parsePath","addShape","attrs","name","getMarker","markerCfg","symbol","style","r","fill","color"],"sourceRoot":"","sources":["../../../../src/geometry/shape/violin/index.ts"],"sourcesContent":["import { each, max, map, isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg, ViolinShapePoint } from '../../../interface';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\n\nfunction normalizeSize(arr: number[]) {\n  if (!isArray(arr)) {\n    return [];\n  }\n  const maxValue = max(arr);\n  return map(arr, (num) => num / maxValue);\n}\n\nconst ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints(pointInfo: ViolinShapePoint) {\n    const radius = pointInfo.size / 2;\n    const points = [];\n    const sizeArr = normalizeSize(pointInfo._size);\n\n    each(pointInfo.y as number[], (y, index) => {\n      const offset = sizeArr[index] * radius;\n      const isMin = index === 0;\n      const isMax = index === (pointInfo.y as number[]).length - 1;\n      points.push({\n        isMin,\n        isMax,\n        x: (pointInfo.x as number) - offset,\n        y,\n      });\n      points.unshift({\n        isMin,\n        isMax,\n        x: (pointInfo.x as number) + offset,\n        y,\n      });\n    });\n    return points;\n  },\n});\n\nregisterShape('violin', 'violin', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const shapeAttrs = getStyle(cfg, true, true);\n    const path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: {\n        ...shapeAttrs,\n        path,\n      },\n      name: 'violin',\n    });\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default ViolinShapeFactory;\n"]},"metadata":{},"sourceType":"module"}