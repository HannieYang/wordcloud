{"ast":null,"code":"import { clone, isPlainObject, lowerCase, mix } from '@antv/util';\nimport GrammarInteraction from './grammar-interaction';\nvar Interactions = {};\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\n\nexport function getInteraction(name) {\n  return Interactions[lowerCase(name)];\n}\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\n\nexport function registerInteraction(name, interaction) {\n  Interactions[lowerCase(name)] = interaction;\n}\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\n\nexport function createInteraction(name, view, cfg) {\n  var interaciton = getInteraction(name);\n\n  if (!interaciton) {\n    return null;\n  }\n\n  if (isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    var steps = mix(clone(interaciton), cfg);\n    return new GrammarInteraction(view, steps);\n  } else {\n    var cls = interaciton;\n    return new cls(view, cfg);\n  }\n}\nexport { default as Interaction } from './interaction';\nexport { Action, registerAction, getActionClass } from './action';","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,EAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,GAA1C,QAAqD,YAArD;AAGA,OAAOC,kBAAP,MAAqD,uBAArD;AAGA,IAAMC,YAAY,GAAgB,EAAlC;AAEA;;;;;;AAKA,OAAM,SAAUC,cAAV,CAAyBC,IAAzB,EAAqC;EACzC,OAAOF,YAAY,CAACH,SAAS,CAACK,IAAD,CAAV,CAAnB;AACD;AAED;;;;;;AAKA,OAAM,SAAUC,mBAAV,CAA8BD,IAA9B,EAA4CE,WAA5C,EAAkG;EACtGJ,YAAY,CAACH,SAAS,CAACK,IAAD,CAAV,CAAZ,GAAgCE,WAAhC;AACD;AAED;;;;;;;AAMA,OAAM,SAAUC,iBAAV,CAA4BH,IAA5B,EAA0CI,IAA1C,EAAsDC,GAAtD,EAAuE;EAC3E,IAAMC,WAAW,GAAGP,cAAc,CAACC,IAAD,CAAlC;;EACA,IAAI,CAACM,WAAL,EAAkB;IAChB,OAAO,IAAP;EACD;;EACD,IAAIZ,aAAa,CAACY,WAAD,CAAjB,EAAgC;IAC9B;IACA,IAAMC,KAAK,GAAGX,GAAG,CAACH,KAAK,CAACa,WAAD,CAAN,EAAqBD,GAArB,CAAjB;IACA,OAAO,IAAIR,kBAAJ,CAAuBO,IAAvB,EAA6BG,KAA7B,CAAP;EACD,CAJD,MAIO;IACL,IAAMC,GAAG,GAAGF,WAAZ;IACA,OAAO,IAAIE,GAAJ,CAAQJ,IAAR,EAAcC,GAAd,CAAP;EACD;AACF;AAED,SAASI,OAAO,IAAIC,WAApB,QAAuC,eAAvC;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,UAAvD","names":["clone","isPlainObject","lowerCase","mix","GrammarInteraction","Interactions","getInteraction","name","registerInteraction","interaction","createInteraction","view","cfg","interaciton","steps","cls","default","Interaction","Action","registerAction","getActionClass"],"sourceRoot":"","sources":["../../src/interaction/index.ts"],"sourcesContent":["import { clone, isPlainObject, lowerCase, mix } from '@antv/util';\nimport { View } from '../chart';\nimport { LooseObject } from '../interface';\nimport GrammarInteraction, { InteractionSteps } from './grammar-interaction';\nimport { InteractionConstructor } from './interaction';\n\nconst Interactions: LooseObject = {};\n\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\nexport function getInteraction(name: string): InteractionSteps | InteractionConstructor {\n  return Interactions[lowerCase(name)];\n}\n\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\nexport function registerInteraction(name: string, interaction: InteractionSteps | InteractionConstructor) {\n  Interactions[lowerCase(name)] = interaction;\n}\n\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\nexport function createInteraction(name: string, view: View, cfg?: LooseObject) {\n  const interaciton = getInteraction(name);\n  if (!interaciton) {\n    return null;\n  }\n  if (isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    const steps = mix(clone(interaciton), cfg) as InteractionSteps;\n    return new GrammarInteraction(view, steps);\n  } else {\n    const cls = interaciton as InteractionConstructor;\n    return new cls(view, cfg);\n  }\n}\n\nexport { default as Interaction } from './interaction';\nexport { Action, registerAction, getActionClass } from './action';\n"]},"metadata":{},"sourceType":"module"}