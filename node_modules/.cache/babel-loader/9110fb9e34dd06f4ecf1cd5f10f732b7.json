{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { Util } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { getCanvasPattern } from '../utils/pattern';\nimport { deepAssign } from '../utils';\n/**\n * Pattern 通道，处理图案填充\n * 🚀 目前支持图表类型：饼图、柱状图、条形图、玉珏图等（不支持在多 view 图表中，后续按需扩展）\n *\n * @param key key of style property\n * @returns\n */\n\nexport function pattern(key) {\n  var _this = this;\n\n  return function (params) {\n    var _a;\n\n    var options = params.options,\n        chart = params.chart;\n    var patternOption = options.pattern; // 没有 pattern 配置，则直接返回\n\n    if (!patternOption) {\n      return params;\n    }\n    /** ~~~~~~~ 进行贴图图案处理 ~~~~~~~ */\n\n\n    var style = function (datum) {\n      var _a, _b, _c;\n\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      var defaultColor = chart.getTheme().defaultColor;\n      var color = defaultColor;\n      var colorAttribute = (_b = (_a = chart.geometries) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.getAttribute('color');\n\n      if (colorAttribute) {\n        var colorField = colorAttribute.getFields()[0];\n        var seriesValue = get(datum, colorField);\n        color = Util.getMappingValue(colorAttribute, seriesValue, ((_c = colorAttribute.values) === null || _c === void 0 ? void 0 : _c[0]) || defaultColor);\n      }\n\n      var pattern = patternOption; // 1. 如果 patternOption 是一个回调，则获取回调结果。`(datum: Datum, color: string) => CanvasPattern`\n\n      if (typeof patternOption === 'function') {\n        pattern = patternOption.call(_this, datum, color);\n      } // 2. 如果 pattern 不是 CanvasPattern，则进一步处理，否则直接赋予给 fill\n\n\n      if (pattern instanceof CanvasPattern === false) {\n        // 通过 createPattern(PatternStyle) 转换为 CanvasPattern\n        pattern = getCanvasPattern(deepAssign({}, {\n          cfg: {\n            backgroundColor: color\n          }\n        }, pattern));\n      }\n\n      var styleOption = options[key];\n      return __assign(__assign({}, typeof styleOption === 'function' ? styleOption.call.apply(styleOption, __spreadArrays([_this, datum], args)) : styleOption || {}), {\n        fill: pattern || color\n      });\n    };\n\n    return deepAssign({}, params, {\n      options: (_a = {}, _a[key] = style, _a)\n    });\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,QAAqB,UAArB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAGA,SAASC,UAAT,QAA2B,UAA3B;AAOA;;;;;;;;AAOA,OAAM,SAAUC,OAAV,CAAkBC,GAAlB,EAA6B;EAAnC;;EACE,OAAO,UAAgEC,MAAhE,EAAiF;;;IAC9E,WAAO,GAAYA,MAAM,QAAzB;IAAA,IAASC,KAAK,GAAKD,MAAM,MAAzB;IACA,IAASE,aAAa,GAAKC,OAAO,QAAlC,CAF8E,CAItF;;IACA,IAAI,CAACD,aAAL,EAAoB;MAClB,OAAOF,MAAP;IACD;IAED;;;IAEA,IAAMI,KAAK,GAAc,UAACC,KAAD,EAAc;;;MAAE;;WAAA,yCAAc;QAAdC;;;MAC/B,gBAAY,GAAKL,KAAK,CAACM,QAAN,GAAgBC,YAAjC;MACR,IAAIC,KAAK,GAAGD,YAAZ;MAEA,IAAME,cAAc,eAAGT,KAAK,CAACU,UAAT,MAAmB,IAAnB,IAAmBC,aAAnB,GAAmB,MAAnB,GAAmBA,GAAG,CAAH,CAAnB,MAAuB,IAAvB,IAAuBC,aAAvB,GAAuB,MAAvB,GAAuBA,GAAGC,YAAH,CAAgB,OAAhB,CAA3C;;MACA,IAAIJ,cAAJ,EAAoB;QAClB,IAAMK,UAAU,GAAGL,cAAc,CAACM,SAAf,GAA2B,CAA3B,CAAnB;QACA,IAAMC,WAAW,GAAGtB,GAAG,CAACU,KAAD,EAAQU,UAAR,CAAvB;QACAN,KAAK,GAAGf,IAAI,CAACwB,eAAL,CAAqBR,cAArB,EAAqCO,WAArC,EAAkD,qBAAc,CAACE,MAAf,MAAqB,IAArB,IAAqBC,aAArB,GAAqB,MAArB,GAAqBA,GAAG,CAAH,CAArB,KAA8BZ,YAAhF,CAAR;MACD;;MAED,IAAIV,OAAO,GAAkBI,aAA7B,CAXqC,CAarC;;MACA,IAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;QACvCJ,OAAO,GAAGI,aAAa,CAACmB,IAAd,CAAmBC,KAAnB,EAAyBjB,KAAzB,EAAgCI,KAAhC,CAAV;MACD,CAhBoC,CAkBrC;;;MACA,IAAIX,OAAO,YAAYyB,aAAnB,KAAqC,KAAzC,EAAgD;QAC9C;QACAzB,OAAO,GAAGF,gBAAgB,CAACC,UAAU,CAAC,EAAD,EAAK;UAAE2B,GAAG,EAAE;YAAEC,eAAe,EAAEhB;UAAnB;QAAP,CAAL,EAA0CX,OAA1C,CAAX,CAA1B;MACD;;MAED,IAAM4B,WAAW,GAAGvB,OAAO,CAACJ,GAAD,CAA3B;MAEA,6BACM,OAAO2B,WAAP,KAAuB,UAAvB,GAAoCA,WAAW,CAACL,IAAZ,CAAgBM,KAAhB,cAAWC,gBAAMN,KAAN,EAAYjB,KAAZ,GAAsBC,IAAtB,CAAX,CAApC,GAA6EoB,WAAW,IAAI,EADlG,GACqG;QACnGG,IAAI,EAAE/B,OAAO,IAAIW;MADkF,CADrG;IAID,CA9BD;;IAgCA,OAAOZ,UAAU,CAAC,EAAD,EAAKG,MAAL,EAAa;MAAEG,OAAO,YAAIS,GAACb,GAAD,IAAOK,KAAX,EAAgBQ,EAAhB;IAAT,CAAb,CAAjB;EACD,CA5CD;AA6CD","names":["Util","get","getCanvasPattern","deepAssign","pattern","key","params","chart","patternOption","options","style","datum","args","getTheme","defaultColor","color","colorAttribute","geometries","_a","_b","getAttribute","colorField","getFields","seriesValue","getMappingValue","values","_c","call","_this","CanvasPattern","cfg","backgroundColor","styleOption","apply","__spreadArrays","fill"],"sourceRoot":"","sources":["../../src/adaptor/pattern.ts"],"sourcesContent":["import { Util } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { getCanvasPattern } from '../utils/pattern';\nimport { Params } from '../core/adaptor';\nimport { Datum, Options, StyleAttr } from '../types';\nimport { deepAssign } from '../utils';\n\n/**\n * 使用 Pattern 通道的 options，要求有 colorField/seriesField/stackField 作为分类字段（进行颜色映射）\n */\ntype OptionsRequiredInPattern = Omit<Options, 'data'>;\n\n/**\n * Pattern 通道，处理图案填充\n * 🚀 目前支持图表类型：饼图、柱状图、条形图、玉珏图等（不支持在多 view 图表中，后续按需扩展）\n *\n * @param key key of style property\n * @returns\n */\nexport function pattern(key: string) {\n  return <O extends OptionsRequiredInPattern = OptionsRequiredInPattern>(params: Params<O>): Params<O> => {\n    const { options, chart } = params;\n    const { pattern: patternOption } = options;\n\n    // 没有 pattern 配置，则直接返回\n    if (!patternOption) {\n      return params;\n    }\n\n    /** ~~~~~~~ 进行贴图图案处理 ~~~~~~~ */\n\n    const style: StyleAttr = (datum?: Datum, ...args: any[]) => {\n      const { defaultColor } = chart.getTheme();\n      let color = defaultColor;\n\n      const colorAttribute = chart.geometries?.[0]?.getAttribute('color');\n      if (colorAttribute) {\n        const colorField = colorAttribute.getFields()[0];\n        const seriesValue = get(datum, colorField);\n        color = Util.getMappingValue(colorAttribute, seriesValue, colorAttribute.values?.[0] || defaultColor);\n      }\n\n      let pattern: CanvasPattern = patternOption as CanvasPattern;\n\n      // 1. 如果 patternOption 是一个回调，则获取回调结果。`(datum: Datum, color: string) => CanvasPattern`\n      if (typeof patternOption === 'function') {\n        pattern = patternOption.call(this, datum, color);\n      }\n\n      // 2. 如果 pattern 不是 CanvasPattern，则进一步处理，否则直接赋予给 fill\n      if (pattern instanceof CanvasPattern === false) {\n        // 通过 createPattern(PatternStyle) 转换为 CanvasPattern\n        pattern = getCanvasPattern(deepAssign({}, { cfg: { backgroundColor: color } }, pattern));\n      }\n\n      const styleOption = options[key] as StyleAttr;\n\n      return {\n        ...(typeof styleOption === 'function' ? styleOption.call(this, datum, ...args) : styleOption || {}),\n        fill: pattern || color,\n      };\n    };\n\n    return deepAssign({}, params, { options: { [key]: style } });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}