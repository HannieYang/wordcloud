{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\n/**\n *  CirclePacking\n * @usage hierarchy, proportions\n */\n\nvar CirclePacking =\n/** @class */\nfunction (_super) {\n  __extends(CirclePacking, _super);\n\n  function CirclePacking() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'circle-packing';\n    return _this;\n  }\n  /**\n   * 获取 面积图 默认配置项\n   * 供外部使用\n   */\n\n\n  CirclePacking.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n\n  CirclePacking.prototype.getDefaultOptions = function () {\n    return CirclePacking.getDefaultOptions();\n  };\n  /**\n   * 获取适配器\n   */\n\n\n  CirclePacking.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 覆写父类的方法\n   */\n\n\n  CirclePacking.prototype.triggerResize = function () {\n    if (!this.chart.destroyed) {\n      // 首先自适应容器的宽高\n      this.chart.forceFit(); // g2 内部执行 changeSize，changeSize 中执行 render(true)\n\n      this.chart.clear();\n      this.execAdaptor(); // 核心：宽高更新之后计算padding\n      // 渲染\n\n      this.chart.render(true);\n    }\n  };\n\n  return CirclePacking;\n}(Plot);\n\nexport { CirclePacking };","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,QAAqB,iBAArB;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,eAAT,QAAgC,YAAhC;AAEA,OAAO,gBAAP;AAIA;;;;;AAIA;AAAA;AAAA;EAAmCC;;EAAnC;IAAA;IAQE;;;IACOC,aAAe,gBAAf;;EA0BR;EAlCC;;;;;;EAIOC,kCAAP;IACE,OAAOH,eAAP;EACD,CAFM;;EAMGG,4CAAV;IACE,OAAOA,aAAa,CAACC,iBAAd,EAAP;EACD,CAFS;EAIV;;;;;EAGUD,2CAAV;IACE,OAAOJ,OAAP;EACD,CAFS;EAIV;;;;;EAGUI,wCAAV;IACE,IAAI,CAAC,KAAKE,KAAL,CAAWC,SAAhB,EAA2B;MACzB;MACA,KAAKD,KAAL,CAAWE,QAAX,GAFyB,CAEF;;MACvB,KAAKF,KAAL,CAAWG,KAAX;MACA,KAAKC,WAAL,GAJyB,CAIL;MACpB;;MACA,KAAKJ,KAAL,CAAWK,MAAX,CAAkB,IAAlB;IACD;EACF,CATS;;EAUZ;AAAC,CAnCD,CAAmCZ,IAAnC","names":["Plot","adaptor","DEFAULT_OPTIONS","__extends","_this","CirclePacking","getDefaultOptions","chart","destroyed","forceFit","clear","execAdaptor","render"],"sourceRoot":"","sources":["../../../src/plots/circle-packing/index.ts"],"sourcesContent":["import { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport { CirclePackingOptions } from './types';\nimport './interactions';\n\nexport type { CirclePackingOptions };\n\n/**\n *  CirclePacking\n * @usage hierarchy, proportions\n */\nexport class CirclePacking extends Plot<CirclePackingOptions> {\n  /**\n   * 获取 面积图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<CirclePackingOptions> {\n    return DEFAULT_OPTIONS;\n  }\n  /** 图表类型 */\n  public type: string = 'circle-packing';\n\n  protected getDefaultOptions() {\n    return CirclePacking.getDefaultOptions();\n  }\n\n  /**\n   * 获取适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<CirclePackingOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 覆写父类的方法\n   */\n  protected triggerResize() {\n    if (!this.chart.destroyed) {\n      // 首先自适应容器的宽高\n      this.chart.forceFit(); // g2 内部执行 changeSize，changeSize 中执行 render(true)\n      this.chart.clear();\n      this.execAdaptor(); // 核心：宽高更新之后计算padding\n      // 渲染\n      this.chart.render(true);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}