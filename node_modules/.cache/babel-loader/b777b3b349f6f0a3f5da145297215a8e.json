{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport { flow, findGeometry } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { FUNNEL_CONVERSATION, FUNNEL_PERCENT, FUNNEL_MAPPING_VALUE } from '../constant';\nimport { conversionTagComponent, transformData } from './common';\n/**\n * 处理字段数据\n * @param params\n */\n\nfunction field(params) {\n  var chart = params.chart,\n      options = params.options;\n  var _a = options.data,\n      data = _a === void 0 ? [] : _a,\n      yField = options.yField,\n      maxSize = options.maxSize,\n      minSize = options.minSize;\n  var formatData = transformData(data, data, {\n    yField: yField,\n    maxSize: maxSize,\n    minSize: minSize\n  }); // 绘制漏斗图\n\n  chart.data(formatData);\n  return params;\n}\n/**\n * geometry处理\n * @param params\n */\n\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      yField = options.yField,\n      color = options.color,\n      tooltip = options.tooltip,\n      label = options.label,\n      _a = options.shape,\n      shape = _a === void 0 ? 'funnel' : _a,\n      funnelStyle = options.funnelStyle,\n      state = options.state;\n\n  var _b = getTooltipMapping(tooltip, [xField, yField]),\n      fields = _b.fields,\n      formatter = _b.formatter;\n\n  baseGeometry({\n    chart: chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: FUNNEL_MAPPING_VALUE,\n      colorField: xField,\n      tooltipFields: isArray(fields) && fields.concat([FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n      mapping: {\n        shape: shape,\n        tooltip: formatter,\n        color: color,\n        style: funnelStyle\n      },\n      label: label,\n      state: state\n    }\n  });\n  var geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n  return params;\n}\n/**\n * 转置处理\n * @param params\n */\n\n\nfunction transpose(params) {\n  var chart = params.chart,\n      options = params.options;\n  var isTransposed = options.isTransposed;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : []\n  });\n  return params;\n}\n/**\n * 转化率组件\n * @param params\n */\n\n\nfunction conversionTag(params) {\n  var options = params.options;\n  var maxSize = options.maxSize;\n\n  var getLineCoordinate = function (datum, datumIndex, data, initLineOption) {\n    var percent = maxSize - (maxSize - datum[FUNNEL_MAPPING_VALUE]) / 2;\n    return __assign(__assign({}, initLineOption), {\n      start: [datumIndex - 0.5, percent],\n      end: [datumIndex - 0.5, percent + 0.05]\n    });\n  };\n\n  conversionTagComponent(getLineCoordinate)(params);\n  return params;\n}\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\n\n\nexport function basicFunnel(params) {\n  return flow(field, geometry, transpose, conversionTag)(params);\n}","map":{"version":3,"mappings":"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","names":["isArray","flow","findGeometry","getTooltipMapping","geometry","baseGeometry","FUNNEL_CONVERSATION","FUNNEL_PERCENT","FUNNEL_MAPPING_VALUE","conversionTagComponent","transformData","field","params","options","_a","yField","maxSize","minSize","formatData","data","chart","color","tooltip","label","shape","funnelStyle","state","xField","fields","formatter","type","colorField","tooltipFields","concat","mapping","style","geo","adjust","transpose","coordinate","actions","isTransposed","conversionTag","getLineCoordinate","datum","datumIndex","initLineOption","percent","start","end","basicFunnel"],"sourceRoot":"","sources":["../../../../src/plots/funnel/geometries/basic.ts"],"sourcesContent":["import { Types } from '@antv/g2';\nimport { isArray } from '@antv/util';\nimport { flow, findGeometry } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { Params } from '../../../core/adaptor';\nimport { Datum, Data } from '../../../types/common';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { FunnelOptions } from '../types';\nimport { FUNNEL_CONVERSATION, FUNNEL_PERCENT, FUNNEL_MAPPING_VALUE } from '../constant';\nimport { conversionTagComponent, transformData } from './common';\n\n/**\n * 处理字段数据\n * @param params\n */\nfunction field(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { data = [], yField, maxSize, minSize } = options;\n  const formatData = transformData(data, data, {\n    yField,\n    maxSize,\n    minSize,\n  });\n\n  // 绘制漏斗图\n  chart.data(formatData);\n  return params;\n}\n\n/**\n * geometry处理\n * @param params\n */\nfunction geometry(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { xField, yField, color, tooltip, label, shape = 'funnel', funnelStyle, state } = options;\n\n  const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField]);\n\n  baseGeometry({\n    chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: FUNNEL_MAPPING_VALUE,\n      colorField: xField,\n      tooltipFields: isArray(fields) && fields.concat([FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n      mapping: {\n        shape,\n        tooltip: formatter,\n        color,\n        style: funnelStyle,\n      },\n      label,\n      state,\n    },\n  });\n\n  const geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n\n  return params;\n}\n\n/**\n * 转置处理\n * @param params\n */\nfunction transpose(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { isTransposed } = options;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : [],\n  });\n  return params;\n}\n\n/**\n * 转化率组件\n * @param params\n */\nfunction conversionTag(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { options } = params;\n  const { maxSize } = options;\n\n  const getLineCoordinate = (\n    datum: Datum,\n    datumIndex: number,\n    data: Data,\n    initLineOption: Record<string, any>\n  ): Types.LineOption => {\n    const percent = maxSize - (maxSize - datum[FUNNEL_MAPPING_VALUE]) / 2;\n    return {\n      ...initLineOption,\n      start: [datumIndex - 0.5, percent],\n      end: [datumIndex - 0.5, percent + 0.05],\n    };\n  };\n\n  conversionTagComponent(getLineCoordinate)(params);\n\n  return params;\n}\n\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\nexport function basicFunnel(params: Params<FunnelOptions>) {\n  return flow(field, geometry, transpose, conversionTag)(params);\n}\n"]},"metadata":{},"sourceType":"module"}