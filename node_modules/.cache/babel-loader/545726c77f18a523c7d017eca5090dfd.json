{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, filter, isMatch } from '@antv/util';\nimport { slider, interaction, animation, theme, scale, annotation, scrollbar, limitInPlot, state, transformations } from '../../adaptor/common';\nimport { conversionTag } from '../../adaptor/conversion-tag';\nimport { connectedArea } from '../../adaptor/connected-area';\nimport { interval } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { brushInteraction } from '../../adaptor/brush';\nimport { flow, transformLabel, deepAssign, findGeometry, adjustYMetaByZero, pick } from '../../utils';\nimport { getDataWhetherPercentage, getDeepPercent } from '../../utils/transform/percent';\n/**\n * defaultOptions\n * @param params\n */\n\nfunction defaultOptions(params) {\n  var options = params.options; // 默认 legend 位置\n\n  var legend = options.legend;\n  var seriesField = options.seriesField,\n      isStack = options.isStack;\n\n  if (seriesField) {\n    if (legend !== false) {\n      legend = __assign({\n        position: isStack ? 'right-top' : 'top-left'\n      }, legend);\n    }\n  } else {\n    legend = false;\n  } // @ts-ignore 直接改值\n\n\n  params.options.legend = legend;\n  return params;\n}\n/**\n * 字段\n * @param params\n */\n\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      columnStyle = options.columnStyle,\n      color = options.color,\n      columnWidthRatio = options.columnWidthRatio,\n      isPercent = options.isPercent,\n      isGroup = options.isGroup,\n      isStack = options.isStack,\n      xField = options.xField,\n      yField = options.yField,\n      seriesField = options.seriesField,\n      groupField = options.groupField,\n      tooltip = options.tooltip,\n      shape = options.shape;\n  var percentData = isPercent && isGroup && isStack ? getDeepPercent(data, yField, [xField, groupField], yField) : getDataWhetherPercentage(data, yField, xField, yField, isPercent);\n  var chartData = []; // 存在堆叠,并且存在堆叠seriesField分类，并且不存在分组的时候 进行堆叠\n\n  if (isStack && seriesField && !isGroup) {\n    percentData.forEach(function (item) {\n      var stackedItem = chartData.find(function (v) {\n        return v[xField] === item[xField] && v[seriesField] === item[seriesField];\n      });\n\n      if (stackedItem) {\n        stackedItem[yField] += item[yField] || 0;\n      } else {\n        chartData.push(__assign({}, item));\n      }\n    });\n  } else {\n    chartData = percentData;\n  }\n\n  chart.data(chartData); // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n\n  var tooltipOptions = isPercent ? __assign({\n    formatter: function (datum) {\n      return {\n        name: isGroup && isStack ? datum[seriesField] + \" - \" + datum[groupField] : datum[seriesField] || datum[xField],\n        value: (Number(datum[yField]) * 100).toFixed(2) + '%'\n      };\n    }\n  }, tooltip) : tooltip;\n  var p = deepAssign({}, params, {\n    options: {\n      data: chartData,\n      widthRatio: columnWidthRatio,\n      tooltip: tooltipOptions,\n      interval: {\n        shape: shape,\n        style: columnStyle,\n        color: color\n      }\n    }\n  });\n  interval(p);\n  return p;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  var _a, _b;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField,\n      data = options.data,\n      isPercent = options.isPercent;\n  var percentYMeta = isPercent ? {\n    max: 1,\n    min: 0,\n    minLimit: 0,\n    maxLimit: 1\n  } : {};\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a), (_b = {}, _b[xField] = {\n    type: 'cat'\n  }, _b[yField] = __assign(__assign({}, adjustYMetaByZero(data, yField)), percentYMeta), _b)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField; // 为 false 则是不显示轴\n\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\n\n\nexport function legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      seriesField = options.seriesField;\n\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      yField = options.yField,\n      isRange = options.isRange;\n  var geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    geometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n        layout: (cfg === null || cfg === void 0 ? void 0 : cfg.position) ? undefined : [{\n          type: 'interval-adjust-position'\n        }, {\n          type: 'interval-hide-overlap'\n        }, {\n          type: 'adjust-color'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(isRange ? __assign({\n        content: function (item) {\n          var _a;\n\n          return (_a = item[yField]) === null || _a === void 0 ? void 0 : _a.join('-');\n        }\n      }, cfg) : cfg))\n    });\n  }\n\n  return params;\n}\n/**\n * 柱形图 tooltip 配置 (对堆叠、分组做特殊处理)\n * @param params\n */\n\n\nfunction columnTooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip,\n      isGroup = options.isGroup,\n      isStack = options.isStack,\n      groupField = options.groupField,\n      data = options.data,\n      xField = options.xField,\n      yField = options.yField,\n      seriesField = options.seriesField;\n\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    var tooltipOptions = tooltip; // fix: https://github.com/antvis/G2Plot/issues/2572\n\n    if (isGroup && isStack) {\n      var tooltipFormatter_1 = (tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.formatter) || function (datum) {\n        return {\n          name: datum[seriesField] + \" - \" + datum[groupField],\n          value: datum[yField]\n        };\n      };\n\n      tooltipOptions = __assign(__assign({}, tooltipOptions), {\n        customItems: function (originalItems) {\n          var items = [];\n          each(originalItems, function (item) {\n            // Find datas in same cluster\n            var datas = filter(data, function (d) {\n              return isMatch(d, pick(item.data, [xField, seriesField]));\n            });\n            datas.forEach(function (datum) {\n              items.push(__assign(__assign(__assign({}, item), {\n                value: datum[yField],\n                data: datum,\n                mappingData: {\n                  _origin: datum\n                }\n              }), tooltipFormatter_1(datum)));\n            });\n          });\n          return items;\n        }\n      });\n    }\n\n    chart.tooltip(tooltipOptions);\n  }\n\n  return params;\n}\n/**\n * 柱形图适配器\n * @param params\n */\n\n\nexport function adaptor(params, isBar) {\n  if (isBar === void 0) {\n    isBar = false;\n  }\n\n  var options = params.options;\n  var seriesField = options.seriesField;\n  return flow(defaultOptions, // 处理默认配置\n  theme, // theme 需要在 geometry 之前\n  pattern('columnStyle'), state, transformations('rect'), geometry, meta, axis, legend, columnTooltip, slider, scrollbar, label, brushInteraction, interaction, animation, annotation(), conversionTag(options.yField, !isBar, !!seriesField), // 有拆分的时候禁用转化率\n  connectedArea(!options.isStack), limitInPlot)(params);\n}","map":{"version":3,"mappings":"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","names":["each","filter","isMatch","slider","interaction","animation","theme","scale","annotation","scrollbar","limitInPlot","state","transformations","conversionTag","connectedArea","interval","pattern","brushInteraction","flow","transformLabel","deepAssign","findGeometry","adjustYMetaByZero","pick","getDataWhetherPercentage","getDeepPercent","defaultOptions","params","options","isStack","seriesField","legend","position","geometry","columnStyle","color","columnWidthRatio","isPercent","isGroup","xField","yField","groupField","tooltip","shape","percentData","data","chartData","forEach","item","stackedItem","find","v","push","__assign","chart","tooltipOptions","formatter","datum","name","value","Number","toFixed","p","widthRatio","style","meta","yAxis","percentYMeta","max","min","minLimit","maxLimit","_a","xAxis","_b","type","axis","label","isRange","cfg","fields","callback","layout","undefined","action","content","join","columnTooltip","tooltipFormatter_1","customItems","originalItems","items","datas","d","mappingData","_origin","adaptor","isBar"],"sourceRoot":"","sources":["../../../src/plots/column/adaptor.ts"],"sourcesContent":["import { Types } from '@antv/g2';\nimport { each, filter, isMatch } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport {\n  slider,\n  interaction,\n  animation,\n  theme,\n  scale,\n  annotation,\n  scrollbar,\n  limitInPlot,\n  state,\n  transformations,\n} from '../../adaptor/common';\nimport { conversionTag } from '../../adaptor/conversion-tag';\nimport { connectedArea } from '../../adaptor/connected-area';\nimport { interval } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { brushInteraction } from '../../adaptor/brush';\nimport { flow, transformLabel, deepAssign, findGeometry, adjustYMetaByZero, pick } from '../../utils';\nimport { getDataWhetherPercentage, getDeepPercent } from '../../utils/transform/percent';\nimport { Datum } from '../../types';\nimport { ColumnOptions } from './types';\n\n/**\n * defaultOptions\n * @param params\n */\nfunction defaultOptions(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { options } = params;\n  // 默认 legend 位置\n  let { legend } = options;\n  const { seriesField, isStack } = options;\n\n  if (seriesField) {\n    if (legend !== false) {\n      legend = {\n        position: isStack ? 'right-top' : 'top-left',\n        ...legend,\n      };\n    }\n  } else {\n    legend = false;\n  }\n\n  // @ts-ignore 直接改值\n  params.options.legend = legend;\n  return params;\n}\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const {\n    data,\n    columnStyle,\n    color,\n    columnWidthRatio,\n    isPercent,\n    isGroup,\n    isStack,\n    xField,\n    yField,\n    seriesField,\n    groupField,\n    tooltip,\n    shape,\n  } = options;\n\n  const percentData =\n    isPercent && isGroup && isStack\n      ? getDeepPercent(data, yField, [xField, groupField], yField)\n      : getDataWhetherPercentage(data, yField, xField, yField, isPercent);\n\n  let chartData = [];\n\n  // 存在堆叠,并且存在堆叠seriesField分类，并且不存在分组的时候 进行堆叠\n  if (isStack && seriesField && !isGroup) {\n    percentData.forEach((item) => {\n      const stackedItem = chartData.find((v) => v[xField] === item[xField] && v[seriesField] === item[seriesField]);\n      if (stackedItem) {\n        stackedItem[yField] += item[yField] || 0;\n      } else {\n        chartData.push({ ...item });\n      }\n    });\n  } else {\n    chartData = percentData;\n  }\n\n  chart.data(chartData);\n\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  const tooltipOptions = isPercent\n    ? {\n        formatter: (datum: Datum) => ({\n          name:\n            isGroup && isStack ? `${datum[seriesField]} - ${datum[groupField]}` : datum[seriesField] || datum[xField],\n          value: (Number(datum[yField]) * 100).toFixed(2) + '%',\n        }),\n        ...tooltip,\n      }\n    : tooltip;\n\n  const p = deepAssign({}, params, {\n    options: {\n      data: chartData,\n      widthRatio: columnWidthRatio,\n      tooltip: tooltipOptions,\n      interval: {\n        shape,\n        style: columnStyle,\n        color,\n      },\n    },\n  });\n  interval(p);\n\n  return p;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, xField, yField, data, isPercent } = options;\n\n  const percentYMeta = isPercent ? { max: 1, min: 0, minLimit: 0, maxLimit: 1 } : {};\n\n  return flow(\n    scale(\n      {\n        [xField]: xAxis,\n        [yField]: yAxis,\n      },\n      {\n        [xField]: {\n          type: 'cat',\n        },\n        [yField]: {\n          ...adjustYMetaByZero(data, yField),\n          ...percentYMeta,\n        },\n      }\n    )\n  )(params);\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { legend, seriesField } = options;\n\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { label, yField, isRange } = options;\n\n  const geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [yField],\n      callback,\n      cfg: {\n        // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n        layout: cfg?.position\n          ? undefined\n          : [\n              { type: 'interval-adjust-position' },\n              { type: 'interval-hide-overlap' },\n              { type: 'adjust-color' },\n              { type: 'limit-in-plot', cfg: { action: 'hide' } },\n            ],\n        ...transformLabel(\n          isRange\n            ? {\n                content: (item: object) => {\n                  return item[yField]?.join('-');\n                },\n                ...cfg,\n              }\n            : cfg\n        ),\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 柱形图 tooltip 配置 (对堆叠、分组做特殊处理)\n * @param params\n */\nfunction columnTooltip(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { tooltip, isGroup, isStack, groupField, data, xField, yField, seriesField } = options;\n\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    let tooltipOptions = tooltip;\n    // fix: https://github.com/antvis/G2Plot/issues/2572\n    if (isGroup && isStack) {\n      const tooltipFormatter =\n        tooltipOptions?.formatter ||\n        ((datum: Datum) => ({ name: `${datum[seriesField]} - ${datum[groupField]}`, value: datum[yField] }));\n      tooltipOptions = {\n        ...tooltipOptions,\n        customItems: (originalItems: Types.TooltipItem[]) => {\n          const items: Types.TooltipItem[] = [];\n          each(originalItems, (item: Types.TooltipItem) => {\n            // Find datas in same cluster\n            const datas = filter(data, (d) => isMatch(d, pick(item.data, [xField, seriesField])));\n            datas.forEach((datum) => {\n              items.push({\n                ...item,\n                value: datum[yField],\n                data: datum,\n                mappingData: { _origin: datum },\n                ...tooltipFormatter(datum),\n              });\n            });\n          });\n          return items;\n        },\n      };\n    }\n    chart.tooltip(tooltipOptions);\n  }\n\n  return params;\n}\n\n/**\n * 柱形图适配器\n * @param params\n */\nexport function adaptor(params: Params<ColumnOptions>, isBar = false) {\n  const { options } = params;\n  const { seriesField } = options;\n  return flow(\n    defaultOptions, // 处理默认配置\n    theme, // theme 需要在 geometry 之前\n    pattern('columnStyle'),\n    state,\n    transformations('rect'),\n    geometry,\n    meta,\n    axis,\n    legend,\n    columnTooltip,\n    slider,\n    scrollbar,\n    label,\n    brushInteraction,\n    interaction,\n    animation,\n    annotation(),\n    conversionTag<ColumnOptions>(options.yField, !isBar, !!seriesField), // 有拆分的时候禁用转化率\n    connectedArea<ColumnOptions>(!options.isStack),\n    limitInPlot\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module"}