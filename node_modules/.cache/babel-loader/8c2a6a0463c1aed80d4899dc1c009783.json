{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isString } from '@antv/util';\nimport { interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, flow, pick, renderGaugeStatistic } from '../../utils';\nimport { RANGE_TYPE, RANGE_VALUE, PERCENT, DEFAULT_COLOR, INDICATEOR_VIEW_ID, RANGE_VIEW_ID } from './constants';\nimport { getIndicatorData, getRangeData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var percent = options.percent,\n      range = options.range,\n      radius = options.radius,\n      innerRadius = options.innerRadius,\n      startAngle = options.startAngle,\n      endAngle = options.endAngle,\n      axis = options.axis,\n      indicator = options.indicator,\n      gaugeStyle = options.gaugeStyle,\n      type = options.type,\n      meter = options.meter;\n  var color = range.color,\n      rangeWidth = range.width; // 指标 & 指针\n  // 如果开启在应用\n\n  if (indicator) {\n    var indicatorData = getIndicatorData(percent);\n    var v1 = chart.createView({\n      id: INDICATEOR_VIEW_ID\n    });\n    v1.data(indicatorData);\n    v1.point().position(PERCENT + \"*1\").shape(indicator.shape || 'gauge-indicator') // 传入指针的样式到自定义 shape 中\n    .customInfo({\n      defaultColor: chart.getTheme().defaultColor,\n      indicator: indicator\n    });\n    v1.coordinate('polar', {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radius: innerRadius * radius\n    });\n    v1.axis(PERCENT, axis); // 一部分应用到 scale 中\n\n    v1.scale(PERCENT, pick(axis, AXIS_META_CONFIG_KEYS));\n  } // 辅助 range\n  // [{ range: 1, type: '0', percent: 原始进度百分比 }]\n\n\n  var rangeData = getRangeData(percent, options.range);\n  var v2 = chart.createView({\n    id: RANGE_VIEW_ID\n  });\n  v2.data(rangeData);\n  var rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n  var ext = interval({\n    chart: v2,\n    options: {\n      xField: '1',\n      yField: RANGE_VALUE,\n      seriesField: RANGE_TYPE,\n      rawFields: [PERCENT],\n      isStack: true,\n      interval: {\n        color: rangeColor,\n        style: gaugeStyle,\n        shape: type === 'meter' ? 'meter-gauge' : null\n      },\n      args: {\n        zIndexReversed: true,\n        sortZIndex: true\n      },\n      minColumnWidth: rangeWidth,\n      maxColumnWidth: rangeWidth\n    }\n  }).ext;\n  var geometry = ext.geometry; // 传入到自定义 shape 中\n\n  geometry.customInfo({\n    meter: meter\n  });\n  v2.coordinate('polar', {\n    innerRadius: innerRadius,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  }).transpose();\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  return flow(scale((_a = {\n    range: {\n      min: 0,\n      max: 1,\n      maxLimit: 1,\n      minLimit: 0\n    }\n  }, _a[PERCENT] = {}, _a)))(params);\n}\n/**\n * 统计指标文档\n * @param params\n */\n\n\nfunction statistic(params, updated) {\n  var chart = params.chart,\n      options = params.options;\n  var statistic = options.statistic,\n      percent = options.percent; // 先清空标注，再重新渲染\n\n  chart.getController('annotation').clear(true);\n\n  if (statistic) {\n    var contentOption = statistic.content;\n    var transformContent = void 0; // 当设置 content 的时候，设置默认样式\n\n    if (contentOption) {\n      transformContent = deepAssign({}, {\n        content: (percent * 100).toFixed(2) + \"%\",\n        style: {\n          opacity: 0.75,\n          fontSize: '30px',\n          lineHeight: 1,\n          textAlign: 'center',\n          color: 'rgba(44,53,66,0.85)'\n        }\n      }, contentOption);\n    }\n\n    renderGaugeStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: transformContent\n      })\n    }, {\n      percent: percent\n    });\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n/**\n * tooltip 配置\n */\n\n\nfunction tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n\n  if (tooltip) {\n    chart.tooltip(deepAssign({\n      showTitle: false,\n      showMarkers: false,\n      containerTpl: '<div class=\"g2-tooltip\"><div class=\"g2-tooltip-list\"></div></div>',\n      domStyles: {\n        'g2-tooltip': {\n          padding: '4px 8px',\n          fontSize: '10px'\n        }\n      },\n      customContent: function (x, data) {\n        var percent = get(data, [0, 'data', PERCENT], 0);\n        return (percent * 100).toFixed(2) + \"%\";\n      }\n    }, tooltip));\n  } else {\n    // 默认，不展示 tooltip\n    chart.tooltip(false);\n  }\n\n  return params;\n}\n/**\n * other 配置\n * @param params\n */\n\n\nfunction other(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  return params;\n}\n/**\n * 对外暴露的 adaptor\n */\n\n\nexport { statistic };\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, // animation 配置必须在 createView 之前，不然无法让子 View 生效\n  animation, geometry, meta, tooltip, statistic, interaction, annotation(), other // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"mappings":"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","names":["get","isString","interaction","animation","theme","scale","annotation","interval","AXIS_META_CONFIG_KEYS","deepAssign","flow","pick","renderGaugeStatistic","RANGE_TYPE","RANGE_VALUE","PERCENT","DEFAULT_COLOR","INDICATEOR_VIEW_ID","RANGE_VIEW_ID","getIndicatorData","getRangeData","geometry","params","options","range","radius","innerRadius","startAngle","endAngle","axis","indicator","gaugeStyle","type","meter","rangeWidth","indicatorData","percent","v1","chart","createView","id","data","point","position","shape","customInfo","defaultColor","getTheme","coordinate","rangeData","v2","rangeColor","color","xField","yField","seriesField","rawFields","isStack","style","args","zIndexReversed","sortZIndex","minColumnWidth","maxColumnWidth","ext","transpose","meta","min","max","maxLimit","minLimit","_a","statistic","updated","getController","clear","contentOption","transformContent","content","toFixed","opacity","fontSize","lineHeight","textAlign","render","tooltip","showTitle","showMarkers","containerTpl","domStyles","padding","customContent","x","other","legend","adaptor"],"sourceRoot":"","sources":["../../../src/plots/gauge/adaptor.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { get, isString } from '@antv/util';\nimport { interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, pick, renderGaugeStatistic } from '../../utils';\nimport { RANGE_TYPE, RANGE_VALUE, PERCENT, DEFAULT_COLOR, INDICATEOR_VIEW_ID, RANGE_VIEW_ID } from './constants';\nimport { GaugeOptions } from './types';\nimport { getIndicatorData, getRangeData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { percent, range, radius, innerRadius, startAngle, endAngle, axis, indicator, gaugeStyle, type, meter } =\n    options;\n  const { color, width: rangeWidth } = range;\n\n  // 指标 & 指针\n  // 如果开启在应用\n  if (indicator) {\n    const indicatorData = getIndicatorData(percent);\n\n    const v1 = chart.createView({ id: INDICATEOR_VIEW_ID });\n    v1.data(indicatorData);\n\n    v1.point()\n      .position(`${PERCENT}*1`)\n      .shape(indicator.shape || 'gauge-indicator')\n      // 传入指针的样式到自定义 shape 中\n      .customInfo({\n        defaultColor: chart.getTheme().defaultColor,\n        indicator,\n      });\n\n    v1.coordinate('polar', {\n      startAngle,\n      endAngle,\n      radius: innerRadius * radius, // 外部的 innerRadius * radius = 这里的 radius\n    });\n\n    v1.axis(PERCENT, axis);\n    // 一部分应用到 scale 中\n    v1.scale(PERCENT, pick(axis, AXIS_META_CONFIG_KEYS));\n  }\n\n  // 辅助 range\n  // [{ range: 1, type: '0', percent: 原始进度百分比 }]\n  const rangeData = getRangeData(percent, options.range);\n  const v2 = chart.createView({ id: RANGE_VIEW_ID });\n  v2.data(rangeData);\n\n  const rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n\n  const { ext } = interval({\n    chart: v2,\n    options: {\n      xField: '1',\n      yField: RANGE_VALUE,\n      seriesField: RANGE_TYPE,\n      rawFields: [PERCENT],\n      isStack: true,\n      interval: {\n        color: rangeColor,\n        style: gaugeStyle,\n        shape: type === 'meter' ? 'meter-gauge' : null,\n      },\n      args: {\n        zIndexReversed: true,\n        sortZIndex: true,\n      },\n      minColumnWidth: rangeWidth,\n      maxColumnWidth: rangeWidth,\n    },\n  });\n\n  const geometry = ext.geometry as Geometry;\n  // 传入到自定义 shape 中\n  geometry.customInfo({ meter });\n\n  v2.coordinate('polar', {\n    innerRadius,\n    radius,\n    startAngle,\n    endAngle,\n  }).transpose();\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  return flow(\n    scale({\n      range: {\n        min: 0,\n        max: 1,\n        maxLimit: 1,\n        minLimit: 0,\n      },\n      [PERCENT]: {},\n    })\n  )(params);\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nfunction statistic(params: Params<GaugeOptions>, updated?: boolean): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { statistic, percent } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  if (statistic) {\n    const { content: contentOption } = statistic;\n    let transformContent;\n    // 当设置 content 的时候，设置默认样式\n    if (contentOption) {\n      transformContent = deepAssign(\n        {},\n        {\n          content: `${(percent * 100).toFixed(2)}%`,\n          style: {\n            opacity: 0.75,\n            fontSize: '30px',\n            lineHeight: 1,\n            textAlign: 'center',\n            color: 'rgba(44,53,66,0.85)',\n          },\n        },\n        contentOption\n      );\n    }\n    renderGaugeStatistic(chart, { statistic: { ...statistic, content: transformContent } }, { percent });\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * tooltip 配置\n */\nfunction tooltip(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  if (tooltip) {\n    chart.tooltip(\n      deepAssign(\n        {\n          showTitle: false,\n          showMarkers: false,\n          containerTpl: '<div class=\"g2-tooltip\"><div class=\"g2-tooltip-list\"></div></div>',\n          domStyles: {\n            'g2-tooltip': {\n              padding: '4px 8px',\n              fontSize: '10px',\n            },\n          },\n          customContent: (x: string, data: any[]) => {\n            const percent = get(data, [0, 'data', PERCENT], 0);\n            return `${(percent * 100).toFixed(2)}%`;\n          },\n        },\n        tooltip\n      )\n    );\n  } else {\n    // 默认，不展示 tooltip\n    chart.tooltip(false);\n  }\n\n  return params;\n}\n\n/**\n * other 配置\n * @param params\n */\nfunction other(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart } = params;\n\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * 对外暴露的 adaptor\n */\nexport { statistic };\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<GaugeOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    // animation 配置必须在 createView 之前，不然无法让子 View 生效\n    animation,\n    geometry,\n    meta,\n    tooltip,\n    statistic,\n    interaction,\n    annotation(),\n    other\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module"}