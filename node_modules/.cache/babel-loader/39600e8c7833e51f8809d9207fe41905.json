{"ast":null,"code":"import { ext } from '@antv/matrix-util';\nvar transform = ext.transform;\nexport { transform };\n/**\n * 对元素进行平移操作。\n * @param element 进行变换的元素\n * @param x x 方向位移\n * @param y y 方向位移\n */\n\nexport function translate(element, x, y) {\n  var matrix = transform(element.getMatrix(), [['t', x, y]]);\n  element.setMatrix(matrix);\n}\n/**\n * 获取元素旋转矩阵 (以元素的左上角为旋转点)\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\n\nexport function getRotateMatrix(element, rotateRadian) {\n  var _a = element.attr(),\n      x = _a.x,\n      y = _a.y;\n\n  var matrix = transform(element.getMatrix(), [['t', -x, -y], ['r', rotateRadian], ['t', x, y]]);\n  return matrix;\n}\n/**\n * 对元素进行旋转操作。\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\n\nexport function rotate(element, rotateRadian) {\n  var matrix = getRotateMatrix(element, rotateRadian);\n  element.setMatrix(matrix);\n}\n/**\n * 获取元矩阵。\n * @returns identity matrix\n */\n\nexport function getIdentityMatrix() {\n  return [1, 0, 0, 0, 1, 0, 0, 0, 1];\n}\n/**\n * 围绕图形中心点进行缩放\n * @param element 进行缩放的图形元素\n * @param ratio 缩放比例\n */\n\nexport function zoom(element, ratio) {\n  var bbox = element.getBBox();\n  var x = (bbox.minX + bbox.maxX) / 2;\n  var y = (bbox.minY + bbox.maxY) / 2;\n  element.applyToMatrix([x, y, 1]);\n  var matrix = transform(element.getMatrix(), [['t', -x, -y], ['s', ratio, ratio], ['t', x, y]]);\n  element.setMatrix(matrix);\n}","map":{"version":3,"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AAGA,IAAMC,SAAS,GAAgDD,GAAG,CAACC,SAAnE;AAEA,SAASA,SAAT;AAEA;;;;;;;AAMA,OAAM,SAAUC,SAAV,CAAoBC,OAApB,EAA8CC,CAA9C,EAAyDC,CAAzD,EAAkE;EACtE,IAAMC,MAAM,GAAGL,SAAS,CAACE,OAAO,CAACI,SAAR,EAAD,EAAsB,CAAC,CAAC,GAAD,EAAMH,CAAN,EAASC,CAAT,CAAD,CAAtB,CAAxB;EACAF,OAAO,CAACK,SAAR,CAAkBF,MAAlB;AACD;AAED;;;;;;AAKA,OAAM,SAAUG,eAAV,CAA0BN,OAA1B,EAA6CO,YAA7C,EAAiE;EAC/D,SAAWP,OAAO,CAACQ,IAAR,EAAX;EAAA,IAAEP,CAAC,OAAH;EAAA,IAAKC,CAAC,OAAN;;EACN,IAAMC,MAAM,GAAGL,SAAS,CAACE,OAAO,CAACI,SAAR,EAAD,EAAsB,CAC5C,CAAC,GAAD,EAAM,CAACH,CAAP,EAAU,CAACC,CAAX,CAD4C,EAE5C,CAAC,GAAD,EAAMK,YAAN,CAF4C,EAG5C,CAAC,GAAD,EAAMN,CAAN,EAASC,CAAT,CAH4C,CAAtB,CAAxB;EAKA,OAAOC,MAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUM,MAAV,CAAiBT,OAAjB,EAA2CO,YAA3C,EAA+D;EACnE,IAAMJ,MAAM,GAAGG,eAAe,CAACN,OAAD,EAAUO,YAAV,CAA9B;EACAP,OAAO,CAACK,SAAR,CAAkBF,MAAlB;AACD;AAED;;;;;AAIA,OAAM,SAAUO,iBAAV,GAA2B;EAC/B,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUC,IAAV,CAAeX,OAAf,EAAyCY,KAAzC,EAAsD;EAC1D,IAAMC,IAAI,GAAGb,OAAO,CAACc,OAAR,EAAb;EACA,IAAMb,CAAC,GAAG,CAACY,IAAI,CAACE,IAAL,GAAYF,IAAI,CAACG,IAAlB,IAA0B,CAApC;EACA,IAAMd,CAAC,GAAG,CAACW,IAAI,CAACI,IAAL,GAAYJ,IAAI,CAACK,IAAlB,IAA0B,CAApC;EACAlB,OAAO,CAACmB,aAAR,CAAsB,CAAClB,CAAD,EAAIC,CAAJ,EAAO,CAAP,CAAtB;EAEA,IAAMC,MAAM,GAAGL,SAAS,CAACE,OAAO,CAACI,SAAR,EAAD,EAAsB,CAC5C,CAAC,GAAD,EAAM,CAACH,CAAP,EAAU,CAACC,CAAX,CAD4C,EAE5C,CAAC,GAAD,EAAMU,KAAN,EAAaA,KAAb,CAF4C,EAG5C,CAAC,GAAD,EAAMX,CAAN,EAASC,CAAT,CAH4C,CAAtB,CAAxB;EAKAF,OAAO,CAACK,SAAR,CAAkBF,MAAlB;AACD","names":["ext","transform","translate","element","x","y","matrix","getMatrix","setMatrix","getRotateMatrix","rotateRadian","attr","rotate","getIdentityMatrix","zoom","ratio","bbox","getBBox","minX","maxX","minY","maxY","applyToMatrix"],"sourceRoot":"","sources":["../../src/util/transform.ts"],"sourcesContent":["import { ext } from '@antv/matrix-util';\nimport { IElement, IGroup, IShape } from '../dependents';\n\nconst transform: (m: number[], actions: any[][]) => number[] = ext.transform;\n\nexport { transform };\n\n/**\n * 对元素进行平移操作。\n * @param element 进行变换的元素\n * @param x x 方向位移\n * @param y y 方向位移\n */\nexport function translate(element: IGroup | IShape, x: number, y: number) {\n  const matrix = transform(element.getMatrix(), [['t', x, y]]);\n  element.setMatrix(matrix);\n}\n\n/**\n * 获取元素旋转矩阵 (以元素的左上角为旋转点)\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\nexport function getRotateMatrix(element: IElement, rotateRadian: number) {\n  const { x, y } = element.attr();\n  const matrix = transform(element.getMatrix(), [\n    ['t', -x, -y],\n    ['r', rotateRadian],\n    ['t', x, y],\n  ]);\n  return matrix;\n}\n\n/**\n * 对元素进行旋转操作。\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\nexport function rotate(element: IGroup | IShape, rotateRadian: number) {\n  const matrix = getRotateMatrix(element, rotateRadian);\n  element.setMatrix(matrix);\n}\n\n/**\n * 获取元矩阵。\n * @returns identity matrix\n */\nexport function getIdentityMatrix(): number[] {\n  return [1, 0, 0, 0, 1, 0, 0, 0, 1];\n}\n\n/**\n * 围绕图形中心点进行缩放\n * @param element 进行缩放的图形元素\n * @param ratio 缩放比例\n */\nexport function zoom(element: IGroup | IShape, ratio: number) {\n  const bbox = element.getBBox();\n  const x = (bbox.minX + bbox.maxX) / 2;\n  const y = (bbox.minY + bbox.maxY) / 2;\n  element.applyToMatrix([x, y, 1]);\n\n  const matrix = transform(element.getMatrix(), [\n    ['t', -x, -y],\n    ['s', ratio, ratio],\n    ['t', x, y],\n  ]);\n  element.setMatrix(matrix);\n}\n"]},"metadata":{},"sourceType":"module"}