{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { catmullRom2Bezier } from '@antv/path-util';\nimport { Category, Linear } from '@antv/scale';\nimport { each, head, isEqual, map } from '@antv/util';\n/**\n * 点数组转 path\n * @param points\n */\n\nfunction pointsToPath(points) {\n  return map(points, function (p, idx) {\n    var command = idx === 0 ? 'M' : 'L';\n    var x = p[0],\n        y = p[1];\n    return [command, x, y];\n  });\n}\n/**\n * 将点连接成路径 path\n * @param points\n */\n\n\nexport function getLinePath(points) {\n  return pointsToPath(points);\n}\n/**\n * 将点连成平滑的曲线\n * @param points\n */\n\nexport function getSmoothLinePath(points) {\n  if (points.length <= 2) {\n    // 两点以内直接绘制成路径\n    return getLinePath(points);\n  }\n\n  var data = [];\n  each(points, function (p) {\n    // 当前点和上一个点一样的时候，忽略掉\n    if (!isEqual(p, data.slice(data.length - 2))) {\n      data.push(p[0], p[1]);\n    }\n  }); // const constraint = [ // 范围\n  //   [ 0, 0 ],\n  //   [ 1, 1 ],\n  // ];\n\n  var path = catmullRom2Bezier(data, false);\n\n  var _a = head(points),\n      x = _a[0],\n      y = _a[1];\n\n  path.unshift(['M', x, y]);\n  return path;\n}\n/**\n * 将数据转成 path，利用 scale 的归一化能力\n * @param data\n * @param width\n * @param height\n * @param smooth\n */\n\nexport function dataToPath(data, width, height, smooth) {\n  if (smooth === void 0) {\n    smooth = true;\n  } // 利用 scale 来获取 y 上的映射\n\n\n  var y = new Linear({\n    values: data\n  });\n  var x = new Category({\n    values: map(data, function (v, idx) {\n      return idx;\n    })\n  });\n  var points = map(data, function (v, idx) {\n    return [x.scale(idx) * width, height - y.scale(v) * height];\n  });\n  return smooth ? getSmoothLinePath(points) : getLinePath(points);\n}\n/**\n * 获得 area 面积的横向连接线的 px 位置\n * @param data\n * @param width\n * @param height\n */\n\nexport function getAreaLineY(data, height) {\n  var y = new Linear({\n    values: data\n  }); // 当曲线全部为负数时，取最大值，当曲线全部为正数时，取最小值，当曲线有正有负，则取零点\n\n  var lineY = y.max < 0 ? y.max : Math.max(0, y.min);\n  return height - y.scale(lineY) * height;\n}\n/**\n * 线 path 转 area path\n * @param path\n * @param width\n * @param height\n */\n\nexport function linePathToAreaPath(path, width, height, data) {\n  var areaPath = __spreadArrays(path);\n\n  var lineYPx = getAreaLineY(data, height);\n  areaPath.push(['L', width, lineYPx]);\n  areaPath.push(['L', 0, lineYPx]);\n  areaPath.push(['Z']);\n  return areaPath;\n}","map":{"version":3,"mappings":"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","names":["catmullRom2Bezier","Category","Linear","each","head","isEqual","map","pointsToPath","points","p","idx","command","y","x","getLinePath","getSmoothLinePath","length","data","slice","push","path","unshift","dataToPath","width","height","smooth","values","v","scale","getAreaLineY","lineY","max","Math","min","linePathToAreaPath","areaPath","lineYPx"],"sourceRoot":"","sources":["../../src/trend/path.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}