{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { each } from '@antv/util';\nimport { interaction, theme, state } from '../../adaptor/common';\nimport { flow, pick } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { chordLayout } from '../../utils/transform/chord';\nimport { getAllGeometriesRecursively, transformDataToNodeLinkData } from '../../utils';\nimport { X_FIELD, Y_FIELD, NODE_COLOR_FIELD, EDGE_COLOR_FIELD } from './constant';\n\nfunction transformData(params) {\n  // 将弦图数据放到ext中，nodeGeometry edgeGeometry使用\n  var options = params.options;\n  var data = options.data,\n      sourceField = options.sourceField,\n      targetField = options.targetField,\n      weightField = options.weightField,\n      nodePaddingRatio = options.nodePaddingRatio,\n      nodeWidthRatio = options.nodeWidthRatio,\n      _a = options.rawFields,\n      rawFields = _a === void 0 ? [] : _a; // 将数据转换为node link格式\n\n  var chordLayoutInputData = transformDataToNodeLinkData(data, sourceField, targetField, weightField);\n\n  var _b = chordLayout({\n    weight: true,\n    nodePaddingRatio: nodePaddingRatio,\n    nodeWidthRatio: nodeWidthRatio\n  }, chordLayoutInputData),\n      nodes = _b.nodes,\n      links = _b.links; // 1. 生成绘制node使用数据\n\n\n  var nodesData = nodes.map(function (node) {\n    return __assign(__assign({}, pick(node, __spreadArrays(['id', 'x', 'y', 'name'], rawFields))), {\n      isNode: true\n    });\n  }); // 2. 生成 edge 使用数据 （同桑基图）\n\n  var edgesData = links.map(function (link) {\n    return __assign(__assign({\n      source: link.source.name,\n      target: link.target.name,\n      name: link.source.name || link.target.name\n    }, pick(link, __spreadArrays(['x', 'y', 'value'], rawFields))), {\n      isNode: false\n    });\n  });\n  return __assign(__assign({}, params), {\n    ext: __assign(__assign({}, params.ext), {\n      // 将chordData放到ext中，方便下面的geometry使用\n      chordData: {\n        nodesData: nodesData,\n        edgesData: edgesData\n      }\n    })\n  });\n}\n/**\n * scale配置\n * @param params 参数\n */\n\n\nfunction scale(params) {\n  var _a;\n\n  var chart = params.chart;\n  chart.scale((_a = {\n    x: {\n      sync: true,\n      nice: true\n    },\n    y: {\n      sync: true,\n      nice: true,\n      max: 1\n    }\n  }, _a[NODE_COLOR_FIELD] = {\n    sync: 'color'\n  }, _a[EDGE_COLOR_FIELD] = {\n    sync: 'color'\n  }, _a));\n  return params;\n}\n/**\n * axis配置\n * @param params 参数\n */\n\n\nfunction axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\n/**\n * legend配置\n * @param params 参数\n */\n\n\nfunction legend(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  return params;\n}\n/**\n * tooltip配置\n * @param params 参数\n */\n\n\nfunction tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n  chart.tooltip(tooltip);\n  return params;\n}\n/**\n * coordinate配置\n * @param params 参数\n */\n\n\nfunction coordinate(params) {\n  var chart = params.chart;\n  chart.coordinate('polar').reflect('y');\n  return params;\n}\n/**\n * nodeGeometry配置\n * @param params 参数\n */\n\n\nfunction nodeGeometry(params) {\n  // node view\n  var chart = params.chart,\n      options = params.options;\n  var nodesData = params.ext.chordData.nodesData;\n  var nodeStyle = options.nodeStyle,\n      label = options.label,\n      tooltip = options.tooltip;\n  var nodeView = chart.createView();\n  nodeView.data(nodesData); // 面\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: NODE_COLOR_FIELD,\n      polygon: {\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: tooltip\n    }\n  });\n  return params;\n}\n/**\n * edgeGeometry配置\n * @param params 参数\n */\n\n\nfunction edgeGeometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var edgesData = params.ext.chordData.edgesData;\n  var edgeStyle = options.edgeStyle,\n      tooltip = options.tooltip;\n  var edgeView = chart.createView();\n  edgeView.data(edgesData); // edge\n\n  var edgeOptions = {\n    xField: X_FIELD,\n    yField: Y_FIELD,\n    seriesField: EDGE_COLOR_FIELD,\n    edge: {\n      style: edgeStyle,\n      shape: 'arc'\n    },\n    tooltip: tooltip\n  };\n  edge({\n    chart: edgeView,\n    options: edgeOptions\n  });\n  return params;\n}\n\nfunction animation(params) {\n  var chart = params.chart,\n      options = params.options;\n  var animation = options.animation; // 同时设置整个 view 动画选项\n\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  } // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n\n\n  each(getAllGeometriesRecursively(chart), function (g) {\n    g.animate(animation);\n  });\n  return params;\n}\n/**\n * 弦图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, transformData, coordinate, scale, axis, legend, tooltip, edgeGeometry, nodeGeometry, interaction, state, animation)(params);\n}","map":{"version":3,"mappings":";AACA,SAASA,IAAT,QAAqB,YAArB;AACA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,KAA7B,QAA0C,sBAA1C;AAEA,SAASC,IAAT,EAAeC,IAAf,QAA2B,aAA3B;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,0BAA9B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,2BAAT,EAAsCC,2BAAtC,QAAyE,aAAzE;AAEA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,gBAA3B,EAA6CC,gBAA7C,QAAqE,YAArE;;AAEA,SAASC,aAAT,CAAuBC,MAAvB,EAAmD;EACjD;EAEQ,WAAO,GAAKA,MAAM,QAAlB;EACA,QAAI,GAA8FC,OAAO,KAAzG;EAAA,IAAMC,WAAW,GAAiFD,OAAO,YAAzG;EAAA,IAAmBE,WAAW,GAAoEF,OAAO,YAAzG;EAAA,IAAgCG,WAAW,GAAuDH,OAAO,YAAzG;EAAA,IAA6CI,gBAAgB,GAAqCJ,OAAO,iBAAzG;EAAA,IAA+DK,cAAc,GAAqBL,OAAO,eAAzG;EAAA,IAA+EM,KAAmBN,OAAO,UAAzG;EAAA,IAA+EO,SAAS,mBAAG,EAAH,GAAKD,EAA7F,CAJyC,CAMjD;;EACA,IAAME,oBAAoB,GAAGf,2BAA2B,CAACgB,IAAD,EAAOR,WAAP,EAAoBC,WAApB,EAAiCC,WAAjC,CAAxD;;EAEM,SAAmBZ,WAAW,CAAC;IAAEmB,MAAM,EAAE,IAAV;IAAgBN,gBAAgB,kBAAhC;IAAkCC,cAAc;EAAhD,CAAD,EAAqDG,oBAArD,CAA9B;EAAA,IAAEG,KAAK,WAAP;EAAA,IAASC,KAAK,WAAd,CAT2C,CAWjD;;;EACA,IAAMC,SAAS,GAAGF,KAAK,CAACG,GAAN,CAAU,UAACC,IAAD,EAAK;IAC/B,6BACK3B,IAAI,CAAC2B,IAAD,EAAKC,gBAAG,IAAH,EAAS,GAAT,EAAc,GAAd,EAAmB,MAAnB,GAA8BT,SAA9B,CAAL,CADT,GACuD;MACrDU,MAAM,EAAE;IAD6C,CADvD;EAID,CALiB,CAAlB,CAZiD,CAmBjD;;EACA,IAAMC,SAAS,GAAGN,KAAK,CAACE,GAAN,CAAU,UAACK,IAAD,EAAK;IAC/B;MACEC,MAAM,EAAED,IAAI,CAACC,MAAL,CAAYC,IADtB;MAEEC,MAAM,EAAEH,IAAI,CAACG,MAAL,CAAYD,IAFtB;MAGEA,IAAI,EAAEF,IAAI,CAACC,MAAL,CAAYC,IAAZ,IAAoBF,IAAI,CAACG,MAAL,CAAYD;IAHxC,GAIKjC,IAAI,CAAC+B,IAAD,EAAKH,gBAAG,GAAH,EAAQ,GAAR,EAAa,OAAb,GAAyBT,SAAzB,CAAL,CAJT,GAIkD;MAChDU,MAAM,EAAE;IADwC,CAJlD;EAOD,CARiB,CAAlB;EAUA,6BACKlB,MADL,GACW;IACTwB,GAAG,wBACExB,MAAM,CAACwB,GADT,GACY;MACb;MACAC,SAAS,EAAE;QAAEX,SAAS,WAAX;QAAaK,SAAS;MAAtB;IAFE,CADZ;EADM,CADX;AAQD;AAED;;;;;;AAIA,SAASO,KAAT,CAAe1B,MAAf,EAA2C;;;EACjC,SAAK,GAAKA,MAAM,MAAhB;EACR2B,KAAK,CAACD,KAAN,EAAWnB;IACTqB,CAAC,EAAE;MAAEC,IAAI,EAAE,IAAR;MAAcC,IAAI,EAAE;IAApB,CADM;IAETC,CAAC,EAAE;MAAEF,IAAI,EAAE,IAAR;MAAcC,IAAI,EAAE,IAApB;MAA0BE,GAAG,EAAE;IAA/B;EAFM,GAGTzB,GAACV,gBAAD,IAAoB;IAAEgC,IAAI,EAAE;EAAR,CAHX,EAITtB,GAACT,gBAAD,IAAoB;IAAE+B,IAAI,EAAE;EAAR,CAJX,IAAX;EAMA,OAAO7B,MAAP;AACD;AAED;;;;;;AAIA,SAASiC,IAAT,CAAcjC,MAAd,EAA0C;EAChC,SAAK,GAAKA,MAAM,MAAhB;EACR2B,KAAK,CAACM,IAAN,CAAW,KAAX;EACA,OAAOjC,MAAP;AACD;AAED;;;;;;AAIA,SAASkC,MAAT,CAAgBlC,MAAhB,EAA4C;EAClC,SAAK,GAAKA,MAAM,MAAhB;EACR2B,KAAK,CAACO,MAAN,CAAa,KAAb;EACA,OAAOlC,MAAP;AACD;AAED;;;;;;AAIA,SAASmC,OAAT,CAAiBnC,MAAjB,EAA6C;EACnC,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,WAAO,GAAKC,OAAO,QAAnB;EAER0B,KAAK,CAACQ,OAAN,CAAcA,OAAd;EACA,OAAOnC,MAAP;AACD;AAED;;;;;;AAIA,SAASoC,UAAT,CAAoBpC,MAApB,EAAgD;EACtC,SAAK,GAAKA,MAAM,MAAhB;EACR2B,KAAK,CAACS,UAAN,CAAiB,OAAjB,EAA0BC,OAA1B,CAAkC,GAAlC;EACA,OAAOrC,MAAP;AACD;AAED;;;;;;AAIA,SAASsC,YAAT,CAAsBtC,MAAtB,EAAkD;EAChD;EACQ,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,aAAS,GAAKA,MAAM,CAACwB,GAAP,CAAWC,SAAX,CAAoBX,SAAlC;EACA,aAAS,GAAqBb,OAAO,UAArC;EAAA,IAAWsC,KAAK,GAActC,OAAO,MAArC;EAAA,IAAkBkC,OAAO,GAAKlC,OAAO,QAArC;EAER,IAAMuC,QAAQ,GAAGb,KAAK,CAACc,UAAN,EAAjB;EACAD,QAAQ,CAAC9B,IAAT,CAAcI,SAAd,EAPgD,CAShD;;EACAxB,OAAO,CAAC;IACNqC,KAAK,EAAEa,QADD;IAENvC,OAAO,EAAE;MACPyC,MAAM,EAAE/C,OADD;MAEPgD,MAAM,EAAE/C,OAFD;MAGPgD,WAAW,EAAE/C,gBAHN;MAIPP,OAAO,EAAE;QACPuD,KAAK,EAAEC;MADA,CAJF;MAOPP,KAAK,OAPE;MAQPJ,OAAO;IARA;EAFH,CAAD,CAAP;EAaA,OAAOnC,MAAP;AACD;AAED;;;;;;AAIA,SAAS+C,YAAT,CAAsB/C,MAAtB,EAAkD;EACxC,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,aAAS,GAAKA,MAAM,CAACwB,GAAP,CAAWC,SAAX,CAAoBN,SAAlC;EACA,aAAS,GAAclB,OAAO,UAA9B;EAAA,IAAWkC,OAAO,GAAKlC,OAAO,QAA9B;EAER,IAAM+C,QAAQ,GAAGrB,KAAK,CAACc,UAAN,EAAjB;EACAO,QAAQ,CAACtC,IAAT,CAAcS,SAAd,EANgD,CAQhD;;EACA,IAAM8B,WAAW,GAAG;IAClBP,MAAM,EAAE/C,OADU;IAElBgD,MAAM,EAAE/C,OAFU;IAGlBgD,WAAW,EAAE9C,gBAHK;IAIlBP,IAAI,EAAE;MACJsD,KAAK,EAAEK,SADH;MAEJC,KAAK,EAAE;IAFH,CAJY;IAQlBhB,OAAO;EARW,CAApB;EAUA5C,IAAI,CAAC;IACHoC,KAAK,EAAEqB,QADJ;IAEH/C,OAAO,EAAEgD;EAFN,CAAD,CAAJ;EAIA,OAAOjD,MAAP;AACD;;AAED,SAASoD,SAAT,CAAmBpD,MAAnB,EAA+C;EACrC,SAAK,GAAcA,MAAM,MAAzB;EAAA,IAAOC,OAAO,GAAKD,MAAM,QAAzB;EACA,aAAS,GAAKC,OAAO,UAArB,CAFqC,CAI7C;;EACA,IAAI,OAAOmD,SAAP,KAAqB,SAAzB,EAAoC;IAClCzB,KAAK,CAAC0B,OAAN,CAAcD,SAAd;EACD,CAFD,MAEO;IACLzB,KAAK,CAAC0B,OAAN,CAAc,IAAd;EACD,CAT4C,CAW7C;;;EACArE,IAAI,CAACS,2BAA2B,CAACkC,KAAD,CAA5B,EAAqC,UAAC2B,CAAD,EAAY;IACnDA,CAAC,CAACD,OAAF,CAAUD,SAAV;EACD,CAFG,CAAJ;EAIA,OAAOpD,MAAP;AACD;AAED;;;;;;;AAKA,OAAM,SAAUuD,OAAV,CAAkBvD,MAAlB,EAA8C;EAClD;EACA,OAAOZ,IAAI,CACTF,KADS,EAETa,aAFS,EAGTqC,UAHS,EAITV,KAJS,EAKTO,IALS,EAMTC,MANS,EAOTC,OAPS,EAQTY,YARS,EASTT,YATS,EAUTrD,WAVS,EAWTE,KAXS,EAYTiE,SAZS,CAAJ,CAaLpD,MAbK,CAAP;AAcD","names":["each","interaction","theme","state","flow","pick","polygon","edge","chordLayout","getAllGeometriesRecursively","transformDataToNodeLinkData","X_FIELD","Y_FIELD","NODE_COLOR_FIELD","EDGE_COLOR_FIELD","transformData","params","options","sourceField","targetField","weightField","nodePaddingRatio","nodeWidthRatio","_a","rawFields","chordLayoutInputData","data","weight","nodes","links","nodesData","map","node","__spreadArrays","isNode","edgesData","link","source","name","target","ext","chordData","scale","chart","x","sync","nice","y","max","axis","legend","tooltip","coordinate","reflect","nodeGeometry","label","nodeView","createView","xField","yField","seriesField","style","nodeStyle","edgeGeometry","edgeView","edgeOptions","edgeStyle","shape","animation","animate","g","adaptor"],"sourceRoot":"","sources":["../../../src/plots/chord/adaptor.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { each } from '@antv/util';\nimport { interaction, theme, state } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, pick } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { chordLayout } from '../../utils/transform/chord';\nimport { getAllGeometriesRecursively, transformDataToNodeLinkData } from '../../utils';\nimport { ChordOptions } from './types';\nimport { X_FIELD, Y_FIELD, NODE_COLOR_FIELD, EDGE_COLOR_FIELD } from './constant';\n\nfunction transformData(params: Params<ChordOptions>): Params<ChordOptions> {\n  // 将弦图数据放到ext中，nodeGeometry edgeGeometry使用\n\n  const { options } = params;\n  const { data, sourceField, targetField, weightField, nodePaddingRatio, nodeWidthRatio, rawFields = [] } = options;\n\n  // 将数据转换为node link格式\n  const chordLayoutInputData = transformDataToNodeLinkData(data, sourceField, targetField, weightField);\n\n  const { nodes, links } = chordLayout({ weight: true, nodePaddingRatio, nodeWidthRatio }, chordLayoutInputData);\n\n  // 1. 生成绘制node使用数据\n  const nodesData = nodes.map((node) => {\n    return {\n      ...pick(node, ['id', 'x', 'y', 'name', ...rawFields]),\n      isNode: true,\n    };\n  });\n\n  // 2. 生成 edge 使用数据 （同桑基图）\n  const edgesData = links.map((link) => {\n    return {\n      source: link.source.name,\n      target: link.target.name,\n      name: link.source.name || link.target.name,\n      ...pick(link, ['x', 'y', 'value', ...rawFields]),\n      isNode: false,\n    };\n  });\n\n  return {\n    ...params,\n    ext: {\n      ...params.ext,\n      // 将chordData放到ext中，方便下面的geometry使用\n      chordData: { nodesData, edgesData },\n    },\n  };\n}\n\n/**\n * scale配置\n * @param params 参数\n */\nfunction scale(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.scale({\n    x: { sync: true, nice: true },\n    y: { sync: true, nice: true, max: 1 },\n    [NODE_COLOR_FIELD]: { sync: 'color' },\n    [EDGE_COLOR_FIELD]: { sync: 'color' },\n  });\n  return params;\n}\n\n/**\n * axis配置\n * @param params 参数\n */\nfunction axis(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.axis(false);\n  return params;\n}\n\n/**\n * legend配置\n * @param params 参数\n */\nfunction legend(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.legend(false);\n  return params;\n}\n\n/**\n * tooltip配置\n * @param params 参数\n */\nfunction tooltip(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  chart.tooltip(tooltip);\n  return params;\n}\n\n/**\n * coordinate配置\n * @param params 参数\n */\nfunction coordinate(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart } = params;\n  chart.coordinate('polar').reflect('y');\n  return params;\n}\n\n/**\n * nodeGeometry配置\n * @param params 参数\n */\nfunction nodeGeometry(params: Params<ChordOptions>): Params<ChordOptions> {\n  // node view\n  const { chart, options } = params;\n  const { nodesData } = params.ext.chordData;\n  const { nodeStyle, label, tooltip } = options;\n\n  const nodeView = chart.createView();\n  nodeView.data(nodesData);\n\n  // 面\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: NODE_COLOR_FIELD,\n      polygon: {\n        style: nodeStyle,\n      },\n      label,\n      tooltip,\n    },\n  });\n  return params;\n}\n\n/**\n * edgeGeometry配置\n * @param params 参数\n */\nfunction edgeGeometry(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart, options } = params;\n  const { edgesData } = params.ext.chordData;\n  const { edgeStyle, tooltip } = options;\n\n  const edgeView = chart.createView();\n  edgeView.data(edgesData);\n\n  // edge\n  const edgeOptions = {\n    xField: X_FIELD,\n    yField: Y_FIELD,\n    seriesField: EDGE_COLOR_FIELD,\n    edge: {\n      style: edgeStyle,\n      shape: 'arc',\n    },\n    tooltip,\n  };\n  edge({\n    chart: edgeView,\n    options: edgeOptions,\n  });\n  return params;\n}\n\nfunction animation(params: Params<ChordOptions>): Params<ChordOptions> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  each(getAllGeometriesRecursively(chart), (g: Geometry) => {\n    g.animate(animation);\n  });\n\n  return params;\n}\n\n/**\n * 弦图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<ChordOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    transformData,\n    coordinate,\n    scale,\n    axis,\n    legend,\n    tooltip,\n    edgeGeometry,\n    nodeGeometry,\n    interaction,\n    state,\n    animation\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module"}