{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { map, reduce } from '@antv/util';\nimport { isRealNumber } from '../number';\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\n\nexport function percent(data, measure, groupField, as) {\n  // 1. 先计算每一个分组的 max 值\n  var sumMap = reduce(data, function (map, datum) {\n    var groupValue = datum[groupField];\n    var sum = map.has(groupValue) ? map.get(groupValue) : 0;\n    var v = datum[measure];\n    sum = isRealNumber(v) ? sum + v : sum;\n    map.set(groupValue, sum);\n    return map;\n  }, new Map()); // 2. 循环数组，计算占比\n\n  return map(data, function (datum) {\n    var _a;\n\n    var v = datum[measure];\n    var groupValue = datum[groupField];\n    var percentage = isRealNumber(v) && sumMap.get(groupValue) !== 0 ? v / sumMap.get(groupValue) : 0;\n    return __assign(__assign({}, datum), (_a = {}, _a[as] = percentage, _a));\n  });\n}\n/**\n * 对数据进行深层百分比化\n * @param data\n * @param measure  // 数值\n * @param fields // 需要分组的 field值\n * @param as // 存储percent 百分比的值\n */\n\nexport function getDeepPercent(data, measure, fields, percent) {\n  var sumMap = reduce(data, function (map, datum) {\n    // 获取分组得到的枚举key值\n    var groupValue = reduce(fields, function (value, field) {\n      return \"\" + value + datum[field];\n    }, '');\n    var sum = map.has(groupValue) ? map.get(groupValue) : 0;\n    var v = datum[measure];\n    sum = isRealNumber(v) ? sum + v : sum;\n    map.set(groupValue, sum);\n    return map;\n  }, new Map()); // 2. 循环数组，计算占比\n\n  return map(data, function (datum) {\n    var _a;\n\n    var v = datum[measure]; // 获取分组得到的枚举key值\n\n    var groupValue = reduce(fields, function (value, field) {\n      return \"\" + value + datum[field];\n    }, '');\n    var percentage = isRealNumber(v) && sumMap.get(groupValue) !== 0 ? v / sumMap.get(groupValue) : 0;\n    return __assign(__assign({}, datum), (_a = {}, _a[percent] = percentage, _a));\n  });\n}\n/**\n * 获取数据，如果是百分比，进行数据转换 (适用于面积图、柱状图、条形图)\n * @param isPercent 是否百分比\n */\n\nexport function getDataWhetherPercentage(data, yField, groupField, asField, isPercent) {\n  return !isPercent ? data : percent(data, yField, groupField, asField);\n}","map":{"version":3,"mappings":"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","names":["map","reduce","isRealNumber","percent","data","measure","groupField","as","sumMap","datum","groupValue","sum","has","get","v","set","Map","percentage","_a","getDeepPercent","fields","value","field","getDataWhetherPercentage","yField","asField","isPercent"],"sourceRoot":"","sources":["../../../src/utils/transform/percent.ts"],"sourcesContent":["import { map, reduce } from '@antv/util';\nimport { Data, Datum } from '../../types';\nimport { isRealNumber } from '../number';\n\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\nexport function percent(data: Data, measure: string, groupField: string, as: string) {\n  // 1. 先计算每一个分组的 max 值\n  const sumMap = reduce(\n    data,\n    (map, datum: Datum) => {\n      const groupValue = datum[groupField];\n      let sum = map.has(groupValue) ? map.get(groupValue) : 0;\n\n      const v = datum[measure];\n\n      sum = isRealNumber(v) ? sum + v : sum;\n      map.set(groupValue, sum);\n\n      return map;\n    },\n    new Map<string, number>()\n  );\n\n  // 2. 循环数组，计算占比\n  return map(data, (datum: Datum) => {\n    const v = datum[measure];\n    const groupValue = datum[groupField];\n    const percentage = isRealNumber(v) && sumMap.get(groupValue) !== 0 ? v / sumMap.get(groupValue) : 0;\n\n    return {\n      ...datum,\n      [as]: percentage,\n    };\n  });\n}\n\n/**\n * 对数据进行深层百分比化\n * @param data\n * @param measure  // 数值\n * @param fields // 需要分组的 field值\n * @param as // 存储percent 百分比的值\n */\nexport function getDeepPercent(data: Record<string, any>[], measure: string, fields: string[], percent: string) {\n  const sumMap = reduce(\n    data,\n    (map, datum: Datum) => {\n      // 获取分组得到的枚举key值\n      const groupValue = reduce(fields, (value, field) => `${value}${datum[field]}`, '');\n\n      let sum = map.has(groupValue) ? map.get(groupValue) : 0;\n\n      const v = datum[measure];\n\n      sum = isRealNumber(v) ? sum + v : sum;\n      map.set(groupValue, sum);\n\n      return map;\n    },\n    new Map<string, number>()\n  );\n\n  // 2. 循环数组，计算占比\n  return map(data, (datum: Datum) => {\n    const v = datum[measure];\n    // 获取分组得到的枚举key值\n    const groupValue = reduce(fields, (value, field) => `${value}${datum[field]}`, '');\n\n    const percentage = isRealNumber(v) && sumMap.get(groupValue) !== 0 ? v / sumMap.get(groupValue) : 0;\n\n    return {\n      ...datum,\n      [percent]: percentage,\n    };\n  });\n}\n\n/**\n * 获取数据，如果是百分比，进行数据转换 (适用于面积图、柱状图、条形图)\n * @param isPercent 是否百分比\n */\nexport function getDataWhetherPercentage(\n  data: Record<string, any>[],\n  yField: string,\n  groupField: string,\n  asField: string,\n  isPercent?: boolean\n) {\n  return !isPercent ? data : percent(data, yField, groupField, asField);\n}\n"]},"metadata":{},"sourceType":"module"}