{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getTheme } from '@antv/g2';\nimport { isNil, isObject } from '@antv/util';\nimport { deepAssign } from '../../utils';\nimport { getTooltipMapping } from '../../utils/tooltip';\nimport { geometry } from './base';\n/**\n * 柱形图其他的 adaptor\n * @param params\n */\n\nfunction otherAdaptor(params) {\n  var chart = params.chart,\n      options = params.options,\n      ext = params.ext;\n  var seriesField = options.seriesField,\n      isGroup = options.isGroup,\n      isStack = options.isStack,\n      marginRatio = options.marginRatio,\n      widthRatio = options.widthRatio,\n      groupField = options.groupField,\n      theme = options.theme;\n  /**\n   * adjust\n   */\n\n  var adjust = [];\n\n  if (seriesField) {\n    // group\n    if (isGroup) {\n      adjust.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        marginRatio: marginRatio\n      });\n    } // stack\n\n\n    if (isStack) {\n      adjust.push({\n        type: 'stack',\n        marginRatio: marginRatio\n      });\n    }\n  }\n\n  if (adjust.length && (ext === null || ext === void 0 ? void 0 : ext.geometry)) {\n    var g = ext === null || ext === void 0 ? void 0 : ext.geometry;\n    g.adjust(adjust);\n  } // widthRatio\n\n\n  if (!isNil(widthRatio)) {\n    chart.theme(deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n      // columWidthRatio 配置覆盖 theme 中的配置\n      columnWidthRatio: widthRatio\n    }));\n  }\n\n  return params;\n}\n\nexport function interval(params) {\n  var options = params.options;\n  var xField = options.xField,\n      yField = options.yField,\n      interval = options.interval,\n      seriesField = options.seriesField,\n      tooltip = options.tooltip,\n      minColumnWidth = options.minColumnWidth,\n      maxColumnWidth = options.maxColumnWidth,\n      columnBackground = options.columnBackground,\n      dodgePadding = options.dodgePadding,\n      intervalPadding = options.intervalPadding,\n      useDeferredLabel = options.useDeferredLabel;\n\n  var _a = getTooltipMapping(tooltip, [xField, yField, seriesField]),\n      fields = _a.fields,\n      formatter = _a.formatter; // 保障一定要存在 interval 映射\n\n\n  var ext = (interval ? geometry(deepAssign({}, params, {\n    options: {\n      type: 'interval',\n      colorField: seriesField,\n      tooltipFields: fields,\n      mapping: __assign({\n        tooltip: formatter\n      }, interval),\n      args: {\n        dodgePadding: dodgePadding,\n        intervalPadding: intervalPadding,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        background: columnBackground,\n        useDeferredLabel: useDeferredLabel\n      }\n    }\n  })) : params).ext;\n  return otherAdaptor(__assign(__assign({}, params), {\n    ext: ext\n  }));\n}","map":{"version":3,"mappings":"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","names":["getTheme","isNil","isObject","deepAssign","getTooltipMapping","geometry","otherAdaptor","params","options","ext","isGroup","isStack","marginRatio","widthRatio","groupField","theme","adjust","seriesField","push","type","dodgeBy","length","g","chart","columnWidthRatio","interval","yField","tooltip","minColumnWidth","maxColumnWidth","columnBackground","dodgePadding","intervalPadding","useDeferredLabel","xField","fields","formatter","colorField","tooltipFields","mapping","args","background"],"sourceRoot":"","sources":["../../../src/adaptor/geometries/interval.ts"],"sourcesContent":["import { Geometry, getTheme, ShapeAttrs } from '@antv/g2';\nimport { isNil, isObject } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign } from '../../utils';\nimport { getTooltipMapping } from '../../utils/tooltip';\nimport { GeometryOptions, MappingOptions, geometry } from './base';\n\nexport interface IntervalGeometryOptions extends GeometryOptions {\n  /** x 轴字段 */\n  readonly xField: string;\n  /** y 轴字段 */\n  readonly yField: string;\n  /** 拆分字段，在分组柱状图下同 groupField、colorField，在堆积柱状图下同 stackField、colorField  */\n  readonly seriesField?: string;\n  /** 是否分组柱形图 */\n  readonly isGroup?: boolean;\n  /** 是否堆积柱状图 */\n  readonly isStack?: boolean;\n  /** 柱状图宽度占比 [0-1] */\n  readonly widthRatio?: number;\n  /** 分组间柱子之间的组间间距(像素级)，仅对分组柱状图适用 */\n  readonly intervalPadding?: number;\n  /** 分组中柱子之间的间距 [0-1]，仅对分组柱状图适用 */\n  readonly marginRatio?: number;\n  /** 分组中柱子之间的组内间距(像素级)，仅对分组柱状图适用 */\n  readonly dodgePadding?: number;\n  /** 柱状图最小宽度（像素） */\n  readonly minColumnWidth?: number;\n  /** 柱状图最大宽度（像素） */\n  readonly maxColumnWidth?: number;\n  /** 柱子的背景样式设置 */\n  readonly columnBackground?: { style: ShapeAttrs };\n  /** 柱子视觉通道配置（含 color、shape、size、style、tooltip） */\n  readonly interval?: MappingOptions;\n  /** 分组字段，优先级高于 seriesField , isGroup: true 时会根据 groupField 进行分组。*/\n  readonly groupField?: string;\n}\n\n/**\n * 柱形图其他的 adaptor\n * @param params\n */\nfunction otherAdaptor<O extends IntervalGeometryOptions>(params: Params<O>): Params<O> {\n  const { chart, options, ext } = params;\n  const { seriesField, isGroup, isStack, marginRatio, widthRatio, groupField, theme } = options;\n\n  /**\n   * adjust\n   */\n  const adjust = [];\n  if (seriesField) {\n    // group\n    if (isGroup) {\n      adjust.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        marginRatio,\n      });\n    }\n    // stack\n    if (isStack) {\n      adjust.push({\n        type: 'stack',\n        marginRatio,\n      });\n    }\n  }\n\n  if (adjust.length && ext?.geometry) {\n    const g = ext?.geometry as Geometry;\n    g.adjust(adjust);\n  }\n\n  // widthRatio\n  if (!isNil(widthRatio)) {\n    chart.theme(\n      deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n        // columWidthRatio 配置覆盖 theme 中的配置\n        columnWidthRatio: widthRatio,\n      })\n    );\n  }\n\n  return params;\n}\n\nexport function interval<O extends IntervalGeometryOptions>(params: Params<O>): Params<O> {\n  const { options } = params;\n  const {\n    xField,\n    yField,\n    interval,\n    seriesField,\n    tooltip,\n    minColumnWidth,\n    maxColumnWidth,\n    columnBackground,\n    dodgePadding,\n    intervalPadding,\n    useDeferredLabel,\n  } = options;\n\n  const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField, seriesField]);\n\n  // 保障一定要存在 interval 映射\n  const { ext } = interval\n    ? geometry(\n        deepAssign({}, params, {\n          options: {\n            type: 'interval',\n            colorField: seriesField,\n            tooltipFields: fields,\n            mapping: {\n              tooltip: formatter,\n              ...interval,\n            },\n            args: {\n              dodgePadding,\n              intervalPadding,\n              minColumnWidth,\n              maxColumnWidth,\n              background: columnBackground,\n              useDeferredLabel,\n            },\n          },\n        })\n      )\n    : params;\n\n  return otherAdaptor({\n    ...params,\n    ext,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}