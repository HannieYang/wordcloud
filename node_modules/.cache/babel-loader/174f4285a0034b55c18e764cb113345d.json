{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\n\nvar Matrix =\n/** @class */\nfunction (_super) {\n  __extends(Matrix, _super);\n\n  function Matrix() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Matrix.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'matrix',\n      showTitle: false,\n      columnTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this)),\n      rowTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this))\n    });\n  };\n\n  Matrix.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n\n  Matrix.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n\n  Matrix.prototype.beforeEachView = function (view, facet) {};\n\n  Matrix.prototype.generateFacets = function (data) {\n    var _a = this.cfg,\n        fields = _a.fields,\n        type = _a.type; // 矩阵中行列相等，等于指定的字段个数\n\n    var rowValuesLength = fields.length;\n    var columnValuesLength = rowValuesLength;\n    var rst = [];\n\n    for (var i = 0; i < columnValuesLength; i++) {\n      var columnField = fields[i];\n\n      for (var j = 0; j < rowValuesLength; j++) {\n        var rowField = fields[j];\n        var facet = {\n          type: type,\n          data: data,\n          region: this.getRegion(rowValuesLength, columnValuesLength, i, j),\n          columnValue: columnField,\n          rowValue: rowField,\n          columnField: columnField,\n          rowField: rowField,\n          columnIndex: i,\n          rowIndex: j,\n          columnValuesLength: columnValuesLength,\n          rowValuesLength: rowValuesLength\n        };\n        rst.push(facet);\n      }\n    }\n\n    return rst;\n  };\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  Matrix.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 最后一行显示\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        label: null,\n        title: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  Matrix.prototype.getYAxisOption = function (y, axes, option, facet) {\n    // 第一列显示\n    if (facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * facet title\n   */\n\n\n  Matrix.prototype.renderTitle = function () {\n    var _this = this;\n\n    each(this.facets, function (facet, facetIndex) {\n      var columnIndex = facet.columnIndex,\n          rowIndex = facet.rowIndex,\n          columnValuesLength = facet.columnValuesLength,\n          rowValuesLength = facet.rowValuesLength,\n          columnValue = facet.columnValue,\n          rowValue = facet.rowValue,\n          view = facet.view; // top\n\n      if (rowIndex === 0) {\n        var formatter = get(_this.cfg.columnTitle, 'formatter');\n        var config = deepMix({\n          position: ['50%', '0%'],\n          content: formatter ? formatter(columnValue) : columnValue\n        }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.columnTitle);\n        view.annotation().text(config);\n      } // right\n\n\n      if (columnIndex === columnValuesLength - 1) {\n        var formatter = get(_this.cfg.rowTitle, 'formatter');\n        var config = deepMix({\n          position: ['100%', '50%'],\n          content: formatter ? formatter(rowValue) : rowValue\n        }, getFactTitleConfig(DIRECTION.RIGHT), _this.cfg.rowTitle);\n        view.annotation().text(config);\n      }\n    });\n  };\n\n  return Matrix;\n}(Facet);\n\nexport default Matrix;","map":{"version":3,"mappings":"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","names":["deepMix","each","get","DIRECTION","getFactTitleConfig","Facet","__extends","Matrix","_super","getDefaultCfg","call","type","showTitle","columnTitle","getDefaultTitleCfg","rowTitle","render","cfg","renderTitle","view","facet","processAxis","data","fields","rowValuesLength","length","columnValuesLength","rst","i","columnField","j","rowField","region","getRegion","columnValue","rowValue","columnIndex","rowIndex","push","x","axes","option","label","title","y","facets","facetIndex","formatter","_this","config","position","content","TOP","annotation","text","RIGHT"],"sourceRoot":"","sources":["../../src/facet/matrix.ts"],"sourcesContent":["import { deepMix, each, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, MatrixCfg, MatrixData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class Matrix extends Facet<MatrixCfg, MatrixData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'matrix',\n      showTitle: false,\n      columnTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n      rowTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  protected afterEachView(view: View, facet: MatrixData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: MatrixData) {}\n\n  protected generateFacets(data: Datum[]): MatrixData[] {\n    const { fields, type } = this.cfg;\n\n    // 矩阵中行列相等，等于指定的字段个数\n    const rowValuesLength = fields.length;\n    const columnValuesLength = rowValuesLength;\n\n    const rst = [];\n    for (let i = 0; i < columnValuesLength; i++) {\n      const columnField = fields[i];\n      for (let j = 0; j < rowValuesLength; j++) {\n        const rowField = fields[j];\n\n        const facet: MatrixData = {\n          type,\n          data,\n          region: this.getRegion(rowValuesLength, columnValuesLength, i, j),\n\n          columnValue: columnField,\n          rowValue: rowField,\n          columnField,\n          rowField,\n          columnIndex: i,\n          rowIndex: j,\n          columnValuesLength,\n          rowValuesLength,\n        };\n        rst.push(facet);\n      }\n    }\n    return rst;\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: MatrixData): object {\n    // 最后一行显示\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        label: null,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: MatrixData): object {\n    // 第一列显示\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: MatrixData, facetIndex: number) => {\n      const { columnIndex, rowIndex, columnValuesLength, rowValuesLength, columnValue, rowValue, view } = facet;\n\n      // top\n      if (rowIndex === 0) {\n        const formatter = get(this.cfg.columnTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['50%', '0%'] as [string, string],\n            content: formatter ? formatter(columnValue) : columnValue,\n          },\n          getFactTitleConfig(DIRECTION.TOP),\n          this.cfg.columnTitle\n        );\n\n        view.annotation().text(config);\n      }\n      // right\n      if (columnIndex === columnValuesLength - 1) {\n        const formatter = get(this.cfg.rowTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['100%', '50%'] as [string, string],\n            content: formatter ? formatter(rowValue) : rowValue,\n          },\n          getFactTitleConfig(DIRECTION.RIGHT),\n          this.cfg.rowTitle\n        );\n\n        view.annotation().text(config);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}