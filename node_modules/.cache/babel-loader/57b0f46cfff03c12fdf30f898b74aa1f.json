{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { pattern } from '../../adaptor/pattern';\nimport { findGeometry, deepAssign } from '../../utils';\nimport { flow, transformLabel } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { binHistogram } from '../../utils/transform/histogram';\nimport { HISTOGRAM_X_FIELD, HISTOGRAM_Y_FIELD } from './constant';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      binField = options.binField,\n      binNumber = options.binNumber,\n      binWidth = options.binWidth,\n      color = options.color,\n      stackField = options.stackField,\n      legend = options.legend,\n      columnStyle = options.columnStyle; // 处理数据\n\n  var plotData = binHistogram(data, binField, binWidth, binNumber, stackField);\n  chart.data(plotData);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: HISTOGRAM_X_FIELD,\n      yField: HISTOGRAM_Y_FIELD,\n      seriesField: stackField,\n      isStack: true,\n      interval: {\n        color: color,\n        style: columnStyle\n      }\n    }\n  });\n  interval(p); // 图例\n\n  if (legend && stackField) {\n    chart.legend(stackField, legend);\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis;\n  return flow(scale((_a = {}, _a[HISTOGRAM_X_FIELD] = xAxis, _a[HISTOGRAM_Y_FIELD] = yAxis, _a)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis; // 为 false 则是不显示轴\n\n  if (xAxis === false) {\n    chart.axis(HISTOGRAM_X_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_X_FIELD, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(HISTOGRAM_Y_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_Y_FIELD, yAxis);\n  }\n\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label;\n  var geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    geometry.label({\n      fields: [HISTOGRAM_Y_FIELD],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\n * 直方图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('columnStyle'), geometry, meta, axis, state, label, tooltip, interaction, animation)(params);\n}","map":{"version":3,"mappings":"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","names":["tooltip","interaction","animation","theme","scale","state","pattern","findGeometry","deepAssign","flow","transformLabel","interval","binHistogram","HISTOGRAM_X_FIELD","HISTOGRAM_Y_FIELD","geometry","params","options","binField","binNumber","binWidth","color","stackField","legend","columnStyle","plotData","data","chart","p","xField","yField","seriesField","isStack","style","meta","yAxis","_a","xAxis","axis","label","cfg","fields","callback","adaptor"],"sourceRoot":"","sources":["../../../src/plots/histogram/adaptor.ts"],"sourcesContent":["import { Params } from '../../core/adaptor';\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { pattern } from '../../adaptor/pattern';\nimport { findGeometry, deepAssign } from '../../utils';\nimport { flow, transformLabel } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { binHistogram } from '../../utils/transform/histogram';\nimport { HistogramOptions } from './types';\nimport { HISTOGRAM_X_FIELD, HISTOGRAM_Y_FIELD } from './constant';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { data, binField, binNumber, binWidth, color, stackField, legend, columnStyle } = options;\n\n  // 处理数据\n  const plotData = binHistogram(data, binField, binWidth, binNumber, stackField);\n\n  chart.data(plotData);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: HISTOGRAM_X_FIELD,\n      yField: HISTOGRAM_Y_FIELD,\n      seriesField: stackField,\n      isStack: true,\n      interval: {\n        color,\n        style: columnStyle,\n      },\n    },\n  });\n\n  interval(p);\n\n  // 图例\n  if (legend && stackField) {\n    chart.legend(stackField, legend);\n  }\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { options } = params;\n  const { xAxis, yAxis } = options;\n\n  return flow(\n    scale({\n      [HISTOGRAM_X_FIELD]: xAxis,\n      [HISTOGRAM_Y_FIELD]: yAxis,\n    })\n  )(params);\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis } = options;\n\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(HISTOGRAM_X_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_X_FIELD, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(HISTOGRAM_Y_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_Y_FIELD, yAxis);\n  }\n\n  return params;\n}\n\n/**\n * label 配置\n * @param params\n */\nfunction label(params: Params<HistogramOptions>): Params<HistogramOptions> {\n  const { chart, options } = params;\n  const { label } = options;\n\n  const geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [HISTOGRAM_Y_FIELD],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  return params;\n}\n\n/**\n * 直方图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<HistogramOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    pattern('columnStyle'),\n    geometry,\n    meta,\n    axis,\n    state,\n    label,\n    tooltip,\n    interaction,\n    animation\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module"}