{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ext, vec2 } from '@antv/matrix-util';\nimport { isNumberEqual } from '@antv/util';\nimport Coordinate from './base';\n/**\n * 螺旋坐标系\n */\n\nvar Helix =\n/** @class */\nfunction (_super) {\n  __extends(Helix, _super);\n\n  function Helix(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.isHelix = true;\n    _this.type = 'helix';\n    var _a = cfg.startAngle,\n        startAngle = _a === void 0 ? 1.25 * Math.PI : _a,\n        _b = cfg.endAngle,\n        endAngle = _b === void 0 ? 7.25 * Math.PI : _b,\n        _c = cfg.innerRadius,\n        innerRadius = _c === void 0 ? 0 : _c,\n        radius = cfg.radius;\n    _this.startAngle = startAngle;\n    _this.endAngle = endAngle;\n    _this.innerRadius = innerRadius;\n    _this.radius = radius;\n\n    _this.initial();\n\n    return _this;\n  }\n\n  Helix.prototype.initial = function () {\n    _super.prototype.initial.call(this);\n\n    var index = (this.endAngle - this.startAngle) / (2 * Math.PI) + 1; // 螺线圈数\n\n    var maxRadius = Math.min(this.width, this.height) / 2;\n\n    if (this.radius && this.radius >= 0 && this.radius <= 1) {\n      maxRadius = maxRadius * this.radius;\n    }\n\n    this.d = Math.floor(maxRadius * (1 - this.innerRadius) / index);\n    this.a = this.d / (Math.PI * 2); // 螺线系数\n\n    this.x = {\n      start: this.startAngle,\n      end: this.endAngle\n    };\n    this.y = {\n      start: this.innerRadius * maxRadius,\n      end: this.innerRadius * maxRadius + this.d * 0.99\n    };\n  };\n  /**\n   * 将百分比数据变成屏幕坐标\n   * @param point 归一化的点坐标\n   * @return      返回对应的屏幕坐标\n   */\n\n\n  Helix.prototype.convertPoint = function (point) {\n    var _a;\n\n    var x = point.x,\n        y = point.y;\n\n    if (this.isTransposed) {\n      _a = [y, x], x = _a[0], y = _a[1];\n    }\n\n    var thi = this.convertDim(x, 'x');\n    var r = this.a * thi;\n    var newY = this.convertDim(y, 'y');\n    return {\n      x: this.center.x + Math.cos(thi) * (r + newY),\n      y: this.center.y + Math.sin(thi) * (r + newY)\n    };\n  };\n  /**\n   * 将屏幕坐标点还原成百分比数据\n   * @param point 屏幕坐标\n   * @return      返回对应的归一化后的数据\n   */\n\n\n  Helix.prototype.invertPoint = function (point) {\n    var _a;\n\n    var d = this.d + this.y.start;\n    var v = vec2.subtract([0, 0], [point.x, point.y], [this.center.x, this.center.y]);\n    var thi = ext.angleTo(v, [1, 0], true);\n    var rMin = thi * this.a; // 坐标与原点的连线在第一圈上的交点，最小r值\n\n    if (vec2.length(v) < rMin) {\n      // 坐标与原点的连线不可能小于最小r值，但不排除因小数计算产生的略小于rMin的情况\n      rMin = vec2.length(v);\n    }\n\n    var index = Math.floor((vec2.length(v) - rMin) / d); // 当前点位于第index圈\n\n    thi = 2 * index * Math.PI + thi;\n    var r = this.a * thi;\n    var newY = vec2.length(v) - r;\n    newY = isNumberEqual(newY, 0) ? 0 : newY;\n    var x = this.invertDim(thi, 'x');\n    var y = this.invertDim(newY, 'y');\n    x = isNumberEqual(x, 0) ? 0 : x;\n    y = isNumberEqual(y, 0) ? 0 : y;\n\n    if (this.isTransposed) {\n      _a = [y, x], x = _a[0], y = _a[1];\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  return Helix;\n}(Coordinate);\n\nexport default Helix;","map":{"version":3,"mappings":"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","names":["ext","vec2","isNumberEqual","Coordinate","__extends","cfg","_super","_this","Math","PI","_a","_b","endAngle","_c","innerRadius","radius","startAngle","initial","Helix","call","index","maxRadius","min","width","height","d","floor","a","x","start","end","y","point","isTransposed","thi","convertDim","r","newY","center","cos","sin","v","subtract","angleTo","rMin","length","invertDim"],"sourceRoot":"","sources":["../../src/coord/helix.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}