{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BRUSH_FILTER_EVENTS, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign } from '../../utils';\nimport { adaptor, transformOptions, meta } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\n\nvar Scatter =\n/** @class */\nfunction (_super) {\n  __extends(Scatter, _super);\n\n  function Scatter(container, options) {\n    var _this = _super.call(this, container, options) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'scatter'; // 监听 brush 事件，处理 meta\n\n    _this.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, function (evt) {\n      var _a, _b; // 运行时，读取 option\n\n\n      var _c = _this,\n          options = _c.options,\n          chart = _c.chart;\n\n      if (((_a = evt.data) === null || _a === void 0 ? void 0 : _a.source) === BRUSH_FILTER_EVENTS.FILTER) {\n        var filteredData = _this.chart.filterData(_this.chart.getData());\n\n        meta({\n          chart: chart,\n          options: __assign(__assign({}, options), {\n            data: filteredData\n          })\n        });\n      }\n\n      if (((_b = evt.data) === null || _b === void 0 ? void 0 : _b.source) === BRUSH_FILTER_EVENTS.RESET) {\n        meta({\n          chart: chart,\n          options: options\n        });\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * 获取 散点图 默认配置项\n   * 供外部使用\n   */\n\n\n  Scatter.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   * @param data\n   */\n\n\n  Scatter.prototype.changeData = function (data) {\n    this.updateOption(transformOptions(deepAssign({}, this.options, {\n      data: data\n    })));\n\n    var _a = this,\n        options = _a.options,\n        chart = _a.chart;\n\n    meta({\n      chart: chart,\n      options: options\n    });\n    this.chart.changeData(data);\n  };\n  /**\n   * 获取 散点图 的适配器\n   */\n\n\n  Scatter.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  Scatter.prototype.getDefaultOptions = function () {\n    return Scatter.getDefaultOptions();\n  };\n\n  return Scatter;\n}(Plot);\n\nexport { Scatter };","map":{"version":3,"mappings":";AAAA,SAASA,mBAAT,EAA8BC,gBAA9B,QAAsD,UAAtD;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,SAASC,UAAT,QAA2B,aAA3B;AAEA,SAASC,OAAT,EAAkBC,gBAAlB,EAAoCC,IAApC,QAAgD,WAAhD;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAO,gBAAP;;AAIA;AAAA;AAAA;EAA6BC;;EAY3B,iBAAYC,SAAZ,EAA6CC,OAA7C,EAAoE;IAApE,YACEC,kBAAMF,SAAN,EAAiBC,OAAjB,KAAyB,IAD3B;IAHA;;;IACOE,aAAe,SAAf,CAE6D,CAGlE;;IACAA,KAAI,CAACC,EAAL,CAAQZ,gBAAgB,CAACa,aAAzB,EAAwC,UAACC,GAAD,EAAI;iBAAA,CAC1C;;;MACM,SAAqBH,KAArB;MAAA,IAAEF,OAAO,aAAT;MAAA,IAAWM,KAAK,WAAhB;;MACN,IAAI,UAAG,CAACC,IAAJ,MAAQ,IAAR,IAAQC,aAAR,GAAQ,MAAR,GAAQA,GAAEC,MAAV,MAAqBnB,mBAAmB,CAACoB,MAA7C,EAAqD;QACnD,IAAMC,YAAY,GAAGT,KAAI,CAACI,KAAL,CAAWM,UAAX,CAAsBV,KAAI,CAACI,KAAL,CAAWO,OAAX,EAAtB,CAArB;;QACAjB,IAAI,CAAC;UAAEU,KAAK,OAAP;UAASN,OAAO,wBAAOA,OAAP,GAAc;YAAEO,IAAI,EAAEI;UAAR,CAAd;QAAhB,CAAD,CAAJ;MACD;;MAED,IAAI,UAAG,CAACJ,IAAJ,MAAQ,IAAR,IAAQO,aAAR,GAAQ,MAAR,GAAQA,GAAEL,MAAV,MAAqBnB,mBAAmB,CAACyB,KAA7C,EAAoD;QAClDnB,IAAI,CAAC;UAAEU,KAAK,OAAP;UAASN,OAAO;QAAhB,CAAD,CAAJ;MACD;IACF,CAXD;;;EAYD;EA3BD;;;;;;EAIOgB,4BAAP;IACE,OAAOnB,eAAP;EACD,CAFM;EAyBP;;;;;;EAIOmB,+BAAP,UAAkBT,IAAlB,EAA8C;IAC5C,KAAKU,YAAL,CAAkBtB,gBAAgB,CAACF,UAAU,CAAC,EAAD,EAAK,KAAKO,OAAV,EAAmB;MAAEO,IAAI;IAAN,CAAnB,CAAX,CAAlC;;IACM,SAAqB,IAArB;IAAA,IAAEP,OAAO,aAAT;IAAA,IAAWM,KAAK,WAAhB;;IACNV,IAAI,CAAC;MAAEU,KAAK,OAAP;MAASN,OAAO;IAAhB,CAAD,CAAJ;IACA,KAAKM,KAAL,CAAWY,UAAX,CAAsBX,IAAtB;EACD,CALM;EAOP;;;;;EAGUS,qCAAV;IACE,OAAOtB,OAAP;EACD,CAFS;;EAIAsB,sCAAV;IACE,OAAOA,OAAO,CAACG,iBAAR,EAAP;EACD,CAFS;;EAGZ;AAAC,CAnDD,CAA6B3B,IAA7B","names":["BRUSH_FILTER_EVENTS","VIEW_LIFE_CIRCLE","Plot","deepAssign","adaptor","transformOptions","meta","DEFAULT_OPTIONS","__extends","container","options","_super","_this","on","BEFORE_RENDER","evt","chart","data","_a","source","FILTER","filteredData","filterData","getData","_b","RESET","Scatter","updateOption","changeData","getDefaultOptions"],"sourceRoot":"","sources":["../../../src/plots/scatter/index.ts"],"sourcesContent":["import { BRUSH_FILTER_EVENTS, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { deepAssign } from '../../utils';\nimport { ScatterOptions } from './types';\nimport { adaptor, transformOptions, meta } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\n\nexport type { ScatterOptions };\n\nexport class Scatter extends Plot<ScatterOptions> {\n  /**\n   * 获取 散点图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<ScatterOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'scatter';\n\n  constructor(container: string | HTMLElement, options: ScatterOptions) {\n    super(container, options);\n\n    // 监听 brush 事件，处理 meta\n    this.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, (evt) => {\n      // 运行时，读取 option\n      const { options, chart } = this;\n      if (evt.data?.source === BRUSH_FILTER_EVENTS.FILTER) {\n        const filteredData = this.chart.filterData(this.chart.getData());\n        meta({ chart, options: { ...options, data: filteredData } });\n      }\n\n      if (evt.data?.source === BRUSH_FILTER_EVENTS.RESET) {\n        meta({ chart, options });\n      }\n    });\n  }\n\n  /**\n   * @override\n   * @param data\n   */\n  public changeData(data: ScatterOptions['data']) {\n    this.updateOption(transformOptions(deepAssign({}, this.options, { data })));\n    const { options, chart } = this;\n    meta({ chart, options });\n    this.chart.changeData(data);\n  }\n\n  /**\n   * 获取 散点图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<ScatterOptions> {\n    return adaptor;\n  }\n\n  protected getDefaultOptions() {\n    return Scatter.getDefaultOptions();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}