{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { reduce, isNumber } from '@antv/util';\n/**\n * 获得中位数\n * @param array\n */\n\nexport function getMedian(array) {\n  var arr = __spreadArray([], __read(array), false); // 先排序\n\n\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  var len = arr.length; // median\n  // 0\n\n  if (len === 0) {\n    return 0;\n  } // 奇数\n\n\n  if (len % 2 === 1) {\n    return arr[(len - 1) / 2];\n  } // 偶数\n\n\n  return (arr[len / 2] + arr[len / 2 - 1]) / 2;\n}\n/**\n * 获得平均值\n * @param array\n */\n\nexport function getMean(array) {\n  var sum = reduce(array, function (r, num) {\n    return r += isNaN(num) || !isNumber(num) ? 0 : num;\n  }, 0);\n  return array.length === 0 ? 0 : sum / array.length;\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AAEA;;;;;AAIA,OAAM,SAAUC,SAAV,CAAoBC,KAApB,EAAmC;EACvC,IAAMC,GAAG,4BAAOD,KAAP,GAAY,KAAZ,CAAT,CADuC,CAEvC;;;EACAC,GAAG,CAACC,IAAJ,CAAS,UAACC,CAAD,EAAYC,CAAZ,EAAqB;IAC5B,OAAOD,CAAC,GAAGC,CAAX;EACD,CAFD;EAIA,IAAMC,GAAG,GAAGJ,GAAG,CAACK,MAAhB,CAPuC,CASvC;EACA;;EACA,IAAID,GAAG,KAAK,CAAZ,EAAe;IACb,OAAO,CAAP;EACD,CAbsC,CAevC;;;EACA,IAAIA,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB;IACjB,OAAOJ,GAAG,CAAC,CAACI,GAAG,GAAG,CAAP,IAAY,CAAb,CAAV;EACD,CAlBsC,CAoBvC;;;EACA,OAAO,CAACJ,GAAG,CAACI,GAAG,GAAG,CAAP,CAAH,GAAeJ,GAAG,CAACI,GAAG,GAAG,CAAN,GAAU,CAAX,CAAnB,IAAoC,CAA3C;AACD;AAED;;;;;AAIA,OAAM,SAAUE,OAAV,CAAkBP,KAAlB,EAAiC;EACrC,IAAMQ,GAAG,GAAGX,MAAM,CAChBG,KADgB,EAEhB,UAACS,CAAD,EAAYC,GAAZ,EAAuB;IACrB,OAAQD,CAAC,IAAIE,KAAK,CAACD,GAAD,CAAL,IAAc,CAACZ,QAAQ,CAACY,GAAD,CAAvB,GAA+B,CAA/B,GAAmCA,GAAhD;EACD,CAJe,EAKhB,CALgB,CAAlB;EAQA,OAAOV,KAAK,CAACM,MAAN,KAAiB,CAAjB,GAAqB,CAArB,GAAyBE,GAAG,GAAGR,KAAK,CAACM,MAA5C;AACD","names":["reduce","isNumber","getMedian","array","arr","sort","a","b","len","length","getMean","sum","r","num","isNaN"],"sourceRoot":"","sources":["../../src/util/stat.ts"],"sourcesContent":["import { reduce, isNumber } from '@antv/util';\n\n/**\n * 获得中位数\n * @param array\n */\nexport function getMedian(array: number[]) {\n  const arr = [...array];\n  // 先排序\n  arr.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  const len = arr.length;\n\n  // median\n  // 0\n  if (len === 0) {\n    return 0;\n  }\n\n  // 奇数\n  if (len % 2 === 1) {\n    return arr[(len - 1) / 2];\n  }\n\n  // 偶数\n  return (arr[len / 2] + arr[len / 2 - 1]) / 2;\n}\n\n/**\n * 获得平均值\n * @param array\n */\nexport function getMean(array: number[]) {\n  const sum = reduce(\n    array,\n    (r: number, num: number) => {\n      return (r += isNaN(num) || !isNumber(num) ? 0 : num);\n    },\n    0\n  );\n\n  return array.length === 0 ? 0 : sum / array.length;\n}\n"]},"metadata":{},"sourceType":"module"}