{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport { Chart } from '@antv/g2';\nimport { each } from '@antv/util';\nimport EE from '@antv/event-emitter';\nimport { bind } from 'size-sensor';\nimport { getContainerSize, getAllElementsRecursively, deepAssign, pick } from '../utils';\nvar SOURCE_ATTRIBUTE_NAME = 'data-chart-source-type';\n/** plot 图表容器的配置 */\n\nexport var PLOT_CONTAINER_OPTIONS = ['padding', 'appendPadding', 'renderer', 'pixelRatio', 'syncViewPadding', 'supportCSSTransform', 'limitInPlot'];\n/**\n * 所有 plot 的基类\n */\n\nvar Plot =\n/** @class */\nfunction (_super) {\n  __extends(Plot, _super);\n\n  function Plot(container, options) {\n    var _this = _super.call(this) || this;\n\n    _this.container = typeof container === 'string' ? document.getElementById(container) : container;\n    _this.options = deepAssign({}, _this.getDefaultOptions(), options);\n\n    _this.createG2();\n\n    _this.bindEvents();\n\n    return _this;\n  }\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n\n\n  Plot.getDefaultOptions = function () {\n    return {\n      renderer: 'canvas',\n      xAxis: {\n        nice: true,\n        label: {\n          autoRotate: false,\n          autoHide: {\n            type: 'equidistance',\n            cfg: {\n              minGap: 6\n            }\n          }\n        }\n      },\n      yAxis: {\n        nice: true,\n        label: {\n          autoHide: true,\n          autoRotate: false\n        }\n      },\n      animation: true\n    };\n  };\n  /**\n   * 创建 G2 实例\n   */\n\n\n  Plot.prototype.createG2 = function () {\n    var _a = this.options,\n        width = _a.width,\n        height = _a.height,\n        defaultInteractions = _a.defaultInteractions;\n    this.chart = new Chart(__assign(__assign(__assign(__assign({\n      container: this.container,\n      autoFit: false\n    }, this.getChartSize(width, height)), {\n      localRefresh: false\n    }), pick(this.options, PLOT_CONTAINER_OPTIONS)), {\n      defaultInteractions: defaultInteractions\n    })); // 给容器增加标识，知道图表的来源区别于 G2\n\n    this.container.setAttribute(SOURCE_ATTRIBUTE_NAME, 'G2Plot');\n  };\n  /**\n   * 计算默认的 chart 大小。逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小\n   * @param width\n   * @param height\n   */\n\n\n  Plot.prototype.getChartSize = function (width, height) {\n    var chartSize = getContainerSize(this.container);\n    return {\n      width: width || chartSize.width || 400,\n      height: height || chartSize.height || 400\n    };\n  };\n  /**\n   * 绑定代理所有 G2 的事件\n   */\n\n\n  Plot.prototype.bindEvents = function () {\n    var _this = this;\n\n    if (this.chart) {\n      this.chart.on('*', function (e) {\n        if (e === null || e === void 0 ? void 0 : e.type) {\n          _this.emit(e.type, e);\n        }\n      });\n    }\n  };\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n\n\n  Plot.prototype.getDefaultOptions = function () {\n    return Plot.getDefaultOptions();\n  };\n  /**\n   * 绘制\n   */\n\n\n  Plot.prototype.render = function () {\n    // 暴力处理，先清空再渲染，需要 G2 层自行做好更新渲染\n    this.chart.clear(); // 因为子 view 会继承父 view 的 options 配置（包括 legend，所以会导致 legend 重复创建）\n    // 所以这里给 chart 实例的 options 配置清空\n    // 最好的解法是在 G2 view.clear 方法的时候，重置 options 配置。或者提供方法去 resetOptions\n    // #1684 理论上在多 view 图形上，只要存在 custom legend，都存在类似问题（子弹图、双轴图）\n    // @ts-ignore\n\n    this.chart.options = {\n      data: [],\n      animate: true\n    };\n    this.chart.views = []; // 删除已有的 views\n    // 执行 adaptor\n\n    this.execAdaptor(); // 渲染\n\n    this.chart.render(); // 绑定\n\n    this.bindSizeSensor();\n  };\n  /**\n   * 更新: 更新配置且重新渲染\n   * @param options\n   */\n\n\n  Plot.prototype.update = function (options) {\n    this.updateOption(options);\n    this.render();\n  };\n  /**\n   * 更新配置\n   * @param options\n   */\n\n\n  Plot.prototype.updateOption = function (options) {\n    this.options = deepAssign({}, this.options, options);\n  };\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n\n\n  Plot.prototype.setState = function (type, condition, status) {\n    if (status === void 0) {\n      status = true;\n    }\n\n    var elements = getAllElementsRecursively(this.chart);\n    each(elements, function (ele) {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  };\n  /**\n   * 获取状态\n   */\n\n\n  Plot.prototype.getStates = function () {\n    var elements = getAllElementsRecursively(this.chart);\n    var stateObjects = [];\n    each(elements, function (element) {\n      var data = element.getData();\n      var states = element.getStates();\n      each(states, function (state) {\n        stateObjects.push({\n          data: data,\n          state: state,\n          geometry: element.geometry,\n          element: element\n        });\n      });\n    });\n    return stateObjects;\n  };\n  /**\n   * 更新数据\n   * @override\n   * @param options\n   */\n\n\n  Plot.prototype.changeData = function (data) {\n    // @ts-ignore\n    this.update({\n      data: data\n    }); // TODO: 临时方案，最好使用下面的方式去更新数据\n    // this.chart.changeData(data);\n  };\n  /**\n   * 修改画布大小\n   * @param width\n   * @param height\n   */\n\n\n  Plot.prototype.changeSize = function (width, height) {\n    this.chart.changeSize(width, height);\n  };\n  /**\n   * 增加图表标注。通过 id 标识，如果匹配到，就做更新\n   */\n\n\n  Plot.prototype.addAnnotations = function (annotations, view) {\n    view = view ? view : this.chart;\n\n    var incoming = __spreadArrays(annotations);\n\n    var controller = view.getController('annotation');\n    var current = controller.getComponents().map(function (co) {\n      return co.extra;\n    });\n    controller.clear(true);\n\n    var _loop_1 = function (i) {\n      var annotation = current[i];\n      var findIndex = incoming.findIndex(function (item) {\n        return item.id && item.id === annotation.id;\n      });\n\n      if (findIndex !== -1) {\n        annotation = deepAssign({}, annotation, incoming[findIndex]);\n        incoming.splice(findIndex, 1);\n      }\n\n      controller.annotation(annotation);\n    };\n\n    for (var i = 0; i < current.length; i++) {\n      _loop_1(i);\n    }\n\n    incoming.forEach(function (annotation) {\n      return controller.annotation(annotation);\n    });\n    view.render(true);\n  };\n  /**\n   * 删除图表标注。通过 id 标识，如果匹配到，就做删除\n   */\n\n\n  Plot.prototype.removeAnnotations = function (annotations) {\n    var controller = this.chart.getController('annotation');\n    var current = controller.getComponents().map(function (co) {\n      return co.extra;\n    });\n    controller.clear(true);\n\n    var _loop_2 = function (i) {\n      var annotation = current[i];\n\n      if (!annotations.find(function (item) {\n        return item.id && item.id === annotation.id;\n      })) {\n        controller.annotation(annotation);\n      }\n    };\n\n    for (var i = 0; i < current.length; i++) {\n      _loop_2(i);\n    }\n\n    this.chart.render(true);\n  };\n  /**\n   * 销毁\n   */\n\n\n  Plot.prototype.destroy = function () {\n    // 取消 size-sensor 的绑定\n    this.unbindSizeSensor(); // G2 的销毁\n\n    this.chart.destroy(); // 清空已经绑定的事件\n\n    this.off();\n    this.container.removeAttribute(SOURCE_ATTRIBUTE_NAME);\n  };\n  /**\n   * 执行 adaptor 操作\n   */\n\n\n  Plot.prototype.execAdaptor = function () {\n    var adaptor = this.getSchemaAdaptor();\n    var _a = this.options,\n        padding = _a.padding,\n        appendPadding = _a.appendPadding; // 更新 padding\n\n    this.chart.padding = padding; // 更新 appendPadding\n\n    this.chart.appendPadding = appendPadding; // 转化成 G2 API\n\n    adaptor({\n      chart: this.chart,\n      options: this.options\n    });\n  };\n  /**\n   * 当图表容器大小变化的时候，执行的函数\n   */\n\n\n  Plot.prototype.triggerResize = function () {\n    this.chart.forceFit();\n  };\n  /**\n   * 绑定 dom 容器大小变化的事件\n   */\n\n\n  Plot.prototype.bindSizeSensor = function () {\n    var _this = this;\n\n    if (this.unbind) {\n      return;\n    }\n\n    var _a = this.options.autoFit,\n        autoFit = _a === void 0 ? true : _a;\n\n    if (autoFit) {\n      this.unbind = bind(this.container, function () {\n        // 获取最新的宽高信息\n        var _a = getContainerSize(_this.container),\n            width = _a.width,\n            height = _a.height; // 主要是防止绑定的时候触发 resize 回调\n\n\n        if (width !== _this.chart.width || height !== _this.chart.height) {\n          _this.triggerResize();\n        }\n      });\n    }\n  };\n  /**\n   * 取消绑定\n   */\n\n\n  Plot.prototype.unbindSizeSensor = function () {\n    if (this.unbind) {\n      this.unbind();\n      this.unbind = undefined;\n    }\n  };\n\n  return Plot;\n}(EE);\n\nexport { Plot };","map":{"version":3,"mappings":"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","names":["Chart","each","EE","bind","getContainerSize","getAllElementsRecursively","deepAssign","pick","SOURCE_ATTRIBUTE_NAME","PLOT_CONTAINER_OPTIONS","__extends","container","options","_super","_this","document","getElementById","getDefaultOptions","createG2","bindEvents","Plot","renderer","xAxis","nice","label","autoRotate","autoHide","type","cfg","minGap","yAxis","animation","width","height","defaultInteractions","chart","__assign","autoFit","getChartSize","localRefresh","setAttribute","chartSize","on","e","emit","clear","data","animate","views","execAdaptor","render","bindSizeSensor","updateOption","condition","status","elements","ele","getData","setState","stateObjects","element","states","getStates","state","push","geometry","update","changeSize","annotations","view","incoming","controller","getController","current","getComponents","map","co","extra","i","annotation","findIndex","item","id","splice","length","forEach","find","unbindSizeSensor","destroy","off","removeAttribute","adaptor","getSchemaAdaptor","padding","appendPadding","forceFit","unbind","_a","triggerResize","undefined"],"sourceRoot":"","sources":["../../src/core/plot.ts"],"sourcesContent":["import { Chart, Event, Element, View } from '@antv/g2';\nimport { each } from '@antv/util';\nimport EE from '@antv/event-emitter';\nimport { bind } from 'size-sensor';\nimport { Options, StateName, StateCondition, Size, StateObject, Annotation } from '../types';\nimport { getContainerSize, getAllElementsRecursively, deepAssign, pick } from '../utils';\nimport { Adaptor } from './adaptor';\n\n/** 单独 pick 出来的用于基类的类型定义 */\nexport type PickOptions = Pick<\n  Options,\n  | 'width'\n  | 'height'\n  | 'padding'\n  | 'appendPadding'\n  | 'renderer'\n  | 'pixelRatio'\n  | 'autoFit'\n  | 'syncViewPadding'\n  | 'supportCSSTransform'\n  | 'limitInPlot'\n  | 'locale'\n  | 'defaultInteractions'\n>;\n\nconst SOURCE_ATTRIBUTE_NAME = 'data-chart-source-type';\n\n/** plot 图表容器的配置 */\nexport const PLOT_CONTAINER_OPTIONS = [\n  'padding',\n  'appendPadding',\n  'renderer',\n  'pixelRatio',\n  'syncViewPadding',\n  'supportCSSTransform',\n  'limitInPlot',\n];\n\n/**\n * 所有 plot 的基类\n */\nexport abstract class Plot<O extends PickOptions> extends EE {\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n  static getDefaultOptions(): any {\n    return {\n      renderer: 'canvas',\n      xAxis: {\n        nice: true,\n        label: {\n          autoRotate: false,\n          autoHide: { type: 'equidistance', cfg: { minGap: 6 } },\n        },\n      },\n      yAxis: {\n        nice: true,\n        label: {\n          autoHide: true,\n          autoRotate: false,\n        },\n      },\n      animation: true,\n    };\n  }\n\n  /** plot 类型名称 */\n  public abstract readonly type: string;\n  /** plot 的 schema 配置 */\n  public options: O;\n  /** plot 绘制的 dom */\n  public readonly container: HTMLElement;\n  /** G2 chart 实例 */\n  public chart: Chart;\n  /** resizer unbind  */\n  private unbind: () => void;\n\n  constructor(container: string | HTMLElement, options: O) {\n    super();\n    this.container = typeof container === 'string' ? document.getElementById(container) : container;\n\n    this.options = deepAssign({}, this.getDefaultOptions(), options);\n\n    this.createG2();\n\n    this.bindEvents();\n  }\n\n  /**\n   * 创建 G2 实例\n   */\n  private createG2() {\n    const { width, height, defaultInteractions } = this.options;\n\n    this.chart = new Chart({\n      container: this.container,\n      autoFit: false, // G2Plot 使用 size-sensor 进行 autoFit\n      ...this.getChartSize(width, height),\n      localRefresh: false, // 默认关闭，目前 G 还有一些位置问题，难以排查！\n      ...pick(this.options, PLOT_CONTAINER_OPTIONS),\n      defaultInteractions,\n    });\n\n    // 给容器增加标识，知道图表的来源区别于 G2\n    this.container.setAttribute(SOURCE_ATTRIBUTE_NAME, 'G2Plot');\n  }\n\n  /**\n   * 计算默认的 chart 大小。逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小\n   * @param width\n   * @param height\n   */\n  private getChartSize(width: number, height: number): Size {\n    const chartSize = getContainerSize(this.container);\n    return { width: width || chartSize.width || 400, height: height || chartSize.height || 400 };\n  }\n\n  /**\n   * 绑定代理所有 G2 的事件\n   */\n  private bindEvents() {\n    if (this.chart) {\n      this.chart.on('*', (e: Event) => {\n        if (e?.type) {\n          this.emit(e.type, e);\n        }\n      });\n    }\n  }\n\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n  protected getDefaultOptions(): any {\n    return Plot.getDefaultOptions();\n  }\n\n  /**\n   * 每个组件有自己的 schema adaptor\n   */\n  protected abstract getSchemaAdaptor(): Adaptor<O>;\n\n  /**\n   * 绘制\n   */\n  public render() {\n    // 暴力处理，先清空再渲染，需要 G2 层自行做好更新渲染\n    this.chart.clear();\n    // 因为子 view 会继承父 view 的 options 配置（包括 legend，所以会导致 legend 重复创建）\n    // 所以这里给 chart 实例的 options 配置清空\n    // 最好的解法是在 G2 view.clear 方法的时候，重置 options 配置。或者提供方法去 resetOptions\n    // #1684 理论上在多 view 图形上，只要存在 custom legend，都存在类似问题（子弹图、双轴图）\n    // @ts-ignore\n    this.chart.options = {\n      data: [],\n      animate: true,\n    };\n    this.chart.views = []; // 删除已有的 views\n    // 执行 adaptor\n    this.execAdaptor();\n    // 渲染\n    this.chart.render();\n    // 绑定\n    this.bindSizeSensor();\n  }\n\n  /**\n   * 更新: 更新配置且重新渲染\n   * @param options\n   */\n  public update(options: Partial<O>) {\n    this.updateOption(options);\n    this.render();\n  }\n\n  /**\n   * 更新配置\n   * @param options\n   */\n  protected updateOption(options: Partial<O>) {\n    this.options = deepAssign({}, this.options, options);\n  }\n\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  public setState(type: StateName, condition: StateCondition, status: boolean = true) {\n    const elements = getAllElementsRecursively(this.chart);\n\n    each(elements, (ele: Element) => {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  }\n\n  /**\n   * 获取状态\n   */\n  public getStates(): StateObject[] {\n    const elements = getAllElementsRecursively(this.chart);\n\n    const stateObjects: StateObject[] = [];\n    each(elements, (element: Element) => {\n      const data = element.getData();\n      const states = element.getStates();\n      each(states, (state) => {\n        stateObjects.push({ data, state, geometry: element.geometry, element });\n      });\n    });\n\n    return stateObjects;\n  }\n\n  /**\n   * 更新数据\n   * @override\n   * @param options\n   */\n  public changeData(data: any) {\n    // @ts-ignore\n    this.update({ data });\n    // TODO: 临时方案，最好使用下面的方式去更新数据\n    // this.chart.changeData(data);\n  }\n\n  /**\n   * 修改画布大小\n   * @param width\n   * @param height\n   */\n  public changeSize(width: number, height: number) {\n    this.chart.changeSize(width, height);\n  }\n\n  /**\n   * 增加图表标注。通过 id 标识，如果匹配到，就做更新\n   */\n  public addAnnotations(annotations: Annotation[], view?: View): void {\n    view = view ? view : this.chart;\n    const incoming = [...annotations];\n    const controller = view.getController('annotation');\n    const current = controller.getComponents().map((co) => co.extra);\n\n    controller.clear(true);\n    for (let i = 0; i < current.length; i++) {\n      let annotation = current[i];\n\n      const findIndex = incoming.findIndex((item) => item.id && item.id === annotation.id);\n      if (findIndex !== -1) {\n        annotation = deepAssign({}, annotation, incoming[findIndex]);\n        incoming.splice(findIndex, 1);\n      }\n      controller.annotation(annotation);\n    }\n\n    incoming.forEach((annotation) => controller.annotation(annotation));\n    view.render(true);\n  }\n\n  /**\n   * 删除图表标注。通过 id 标识，如果匹配到，就做删除\n   */\n  public removeAnnotations(annotations: Array<{ id: string } & Partial<Annotation>>): void {\n    const controller = this.chart.getController('annotation');\n    const current = controller.getComponents().map((co) => co.extra);\n\n    controller.clear(true);\n    for (let i = 0; i < current.length; i++) {\n      const annotation = current[i];\n\n      if (!annotations.find((item) => item.id && item.id === annotation.id)) {\n        controller.annotation(annotation);\n      }\n    }\n\n    this.chart.render(true);\n  }\n  /**\n   * 销毁\n   */\n  public destroy() {\n    // 取消 size-sensor 的绑定\n    this.unbindSizeSensor();\n    // G2 的销毁\n    this.chart.destroy();\n    // 清空已经绑定的事件\n    this.off();\n\n    this.container.removeAttribute(SOURCE_ATTRIBUTE_NAME);\n  }\n\n  /**\n   * 执行 adaptor 操作\n   */\n  protected execAdaptor() {\n    const adaptor = this.getSchemaAdaptor();\n\n    const { padding, appendPadding } = this.options;\n    // 更新 padding\n    this.chart.padding = padding;\n    // 更新 appendPadding\n    this.chart.appendPadding = appendPadding;\n\n    // 转化成 G2 API\n    adaptor({\n      chart: this.chart,\n      options: this.options,\n    });\n  }\n\n  /**\n   * 当图表容器大小变化的时候，执行的函数\n   */\n  protected triggerResize() {\n    this.chart.forceFit();\n  }\n\n  /**\n   * 绑定 dom 容器大小变化的事件\n   */\n  private bindSizeSensor() {\n    if (this.unbind) {\n      return;\n    }\n\n    const { autoFit = true } = this.options;\n    if (autoFit) {\n      this.unbind = bind(this.container, () => {\n        // 获取最新的宽高信息\n        const { width, height } = getContainerSize(this.container);\n\n        // 主要是防止绑定的时候触发 resize 回调\n        if (width !== this.chart.width || height !== this.chart.height) {\n          this.triggerResize();\n        }\n      });\n    }\n  }\n\n  /**\n   * 取消绑定\n   */\n  private unbindSizeSensor() {\n    if (this.unbind) {\n      this.unbind();\n      this.unbind = undefined;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}