{"ast":null,"code":"import { each } from '@antv/util';\n/**\n * Component Controller 规范需要定义的基类\n * 1. 规范的 option 输入\n * 2. 统一的信息获取 API\n * 3. 明确定义的组件事件（名称、数据）\n */\n\nvar Controller =\n/** @class */\nfunction () {\n  function Controller(view) {\n    /** 是否可见 */\n    this.visible = true;\n    /** 所有的 component */\n\n    this.components = [];\n    this.view = view;\n  }\n  /**\n   * clear\n   * @param includeOption 是否清空 option 配置项（used in annotation）\n   */\n\n\n  Controller.prototype.clear = function (includeOption) {\n    // destroy all components\n    each(this.components, function (co) {\n      co.component.destroy();\n    }); // clear all component instance\n\n    this.components = [];\n  };\n  /**\n   * destroy the component\n   */\n\n\n  Controller.prototype.destroy = function () {\n    this.clear();\n  };\n  /**\n   * get all components\n   * @returns components array\n   */\n\n\n  Controller.prototype.getComponents = function () {\n    return this.components;\n  };\n  /**\n   * change visibility of component\n   * @param visible\n   */\n\n\n  Controller.prototype.changeVisible = function (visible) {\n    if (this.visible === visible) {\n      return;\n    }\n\n    this.components.forEach(function (co) {\n      if (visible) {\n        co.component.show();\n      } else {\n        co.component.hide();\n      }\n    });\n    this.visible = visible;\n  };\n\n  return Controller;\n}();\n\nexport { Controller };","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,YAArB;AAOA;;;;;;;AAMA;AAAA;AAAA;EASE,oBAAYC,IAAZ,EAAsB;IARtB;IACO,eAAmB,IAAnB;IAIP;;IACU,kBAAgC,EAAhC;IAGR,KAAKA,IAAL,GAAYA,IAAZ;EACD;EAkCD;;;;;;EAIOC,6BAAP,UAAaC,aAAb,EAAoC;IAClC;IACAH,IAAI,CAAC,KAAKI,UAAN,EAAkB,UAACC,EAAD,EAAoB;MACxCA,EAAE,CAACC,SAAH,CAAaC,OAAb;IACD,CAFG,CAAJ,CAFkC,CAMlC;;IACA,KAAKH,UAAL,GAAkB,EAAlB;EACD,CARM;EAUP;;;;;EAGOF,+BAAP;IACE,KAAKM,KAAL;EACD,CAFM;EAIP;;;;;;EAION,qCAAP;IACE,OAAO,KAAKE,UAAZ;EACD,CAFM;EAIP;;;;;;EAIOF,qCAAP,UAAqBO,OAArB,EAAqC;IACnC,IAAI,KAAKA,OAAL,KAAiBA,OAArB,EAA8B;MAC5B;IACD;;IACD,KAAKL,UAAL,CAAgBM,OAAhB,CAAwB,UAACL,EAAD,EAAoB;MAC1C,IAAII,OAAJ,EAAa;QACXJ,EAAE,CAACC,SAAH,CAAaK,IAAb;MACD,CAFD,MAEO;QACLN,EAAE,CAACC,SAAH,CAAaM,IAAb;MACD;IACF,CAND;IAOA,KAAKH,OAAL,GAAeA,OAAf;EACD,CAZM;;EAaT;AAAC,CA3FD","names":["each","view","Controller","includeOption","components","co","component","destroy","clear","visible","forEach","show","hide"],"sourceRoot":"","sources":["../../../src/chart/controller/base.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { ComponentOption } from '../../interface';\nimport View from '../view';\n\n/** Component controller class type define */\nexport type ControllerCtor<O = any> = new (view: View) => Controller<O>;\n\n/**\n * Component Controller 规范需要定义的基类\n * 1. 规范的 option 输入\n * 2. 统一的信息获取 API\n * 3. 明确定义的组件事件（名称、数据）\n */\nexport abstract class Controller<O = unknown> {\n  /** 是否可见 */\n  public visible: boolean = true;\n  protected view: View;\n  /** option 配置，不同组件有自己不同的配置结构 */\n  protected option: O;\n  /** 所有的 component */\n  protected components: ComponentOption[] = [];\n\n  constructor(view: View) {\n    this.view = view;\n  }\n\n  public abstract get name(): string;\n\n  /**\n   * init the component\n   */\n  public abstract init();\n\n  /**\n   * render the components\n   */\n  public abstract render();\n\n  /**\n   * update the components\n   */\n  // public abstract update();\n\n  /**\n   * do layout\n   */\n  public abstract layout();\n\n  /**\n   * 组件的更新逻辑\n   *  - 根据字段为标识，为每一个组件生成一个 id，放到 option 中\n   *  - 更新的时候按照 id 去做 diff，然后对同的做处理\n   *  - 创建增加的\n   *  - 更新已有的\n   *  - 销毁删除的\n   */\n  public abstract update();\n\n  /**\n   * clear\n   * @param includeOption 是否清空 option 配置项（used in annotation）\n   */\n  public clear(includeOption?: boolean) {\n    // destroy all components\n    each(this.components, (co: ComponentOption) => {\n      co.component.destroy();\n    });\n\n    // clear all component instance\n    this.components = [];\n  }\n\n  /**\n   * destroy the component\n   */\n  public destroy() {\n    this.clear();\n  }\n\n  /**\n   * get all components\n   * @returns components array\n   */\n  public getComponents(): ComponentOption[] {\n    return this.components;\n  }\n\n  /**\n   * change visibility of component\n   * @param visible\n   */\n  public changeVisible(visible: boolean) {\n    if (this.visible === visible) {\n      return;\n    }\n    this.components.forEach((co: ComponentOption) => {\n      if (visible) {\n        co.component.show();\n      } else {\n        co.component.hide();\n      }\n    });\n    this.visible = visible;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}