{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { registerShape } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLineMarker } from './util';\n\nvar interpolateCallback = function (point, nextPoint, shapeType) {\n  var x = point.x;\n  var y = point.y;\n  var nextX = nextPoint.x;\n  var nextY = nextPoint.y;\n  var result;\n\n  switch (shapeType) {\n    case 'hv':\n      result = [{\n        x: nextX,\n        y: y\n      }];\n      break;\n\n    case 'vh':\n      result = [{\n        x: x,\n        y: nextY\n      }];\n      break;\n\n    case 'hvh':\n      var middleX = (nextX + x) / 2;\n      result = [{\n        x: middleX,\n        y: y\n      }, {\n        x: middleX,\n        y: nextY\n      }];\n      break;\n\n    case 'vhv':\n      var middleY = (y + nextY) / 2;\n      result = [{\n        x: x,\n        y: middleY\n      }, {\n        x: nextX,\n        y: middleY\n      }];\n      break;\n\n    default:\n      break;\n  }\n\n  return result;\n};\n\nfunction getInterpolatePoints(points, shapeType) {\n  var result = [];\n  each(points, function (point, index) {\n    var nextPoint = points[index + 1];\n    result.push(point);\n\n    if (nextPoint) {\n      var interpolatePoint = interpolateCallback(point, nextPoint, shapeType);\n      result = result.concat(interpolatePoint);\n    }\n  });\n  return result;\n} // 插值的图形path，不考虑null\n\n\nfunction getInterpolatePath(points) {\n  return points.map(function (point, index) {\n    return index === 0 ? ['M', point.x, point.y] : ['L', point.x, point.y];\n  });\n} // 插值的图形\n\n\nfunction getInterpolateShapeAttrs(cfg, shapeType) {\n  var points = getPathPoints(cfg.points, cfg.connectNulls, cfg.showSinglePoint); // 根据 connectNulls 值处理 points\n\n  var path = [];\n  each(points, function (eachLinePoints) {\n    var interpolatePoints = getInterpolatePoints(eachLinePoints, shapeType);\n    path = path.concat(getInterpolatePath(interpolatePoints));\n  });\n  return __assign(__assign({}, getStyle(cfg, true, false, 'lineWidth')), {\n    path: path\n  });\n} // step line\n\n\neach(['hv', 'vh', 'hvh', 'vhv'], function (shapeType) {\n  registerShape('line', shapeType, {\n    draw: function (cfg, container) {\n      var attrs = getInterpolateShapeAttrs(cfg, shapeType);\n      var shape = container.addShape({\n        type: 'path',\n        attrs: attrs,\n        name: 'line'\n      });\n      return shape;\n    },\n    getMarker: function (markerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    }\n  });\n});","map":{"version":3,"mappings":"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","names":["each","registerShape","getPathPoints","getStyle","getLineMarker","interpolateCallback","point","nextPoint","shapeType","x","y","nextX","nextY","result","middleX","middleY","getInterpolatePoints","points","index","push","interpolatePoint","concat","getInterpolatePath","map","getInterpolateShapeAttrs","cfg","connectNulls","showSinglePoint","path","eachLinePoints","interpolatePoints","draw","container","attrs","shape","addShape","type","name","getMarker","markerCfg"],"sourceRoot":"","sources":["../../../../src/geometry/shape/line/step.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLineMarker } from './util';\n\nconst interpolateCallback = (point: Point, nextPoint: Point, shapeType: string) => {\n  const x = point.x as number;\n  const y = point.y as number;\n  const nextX = nextPoint.x as number;\n  const nextY = nextPoint.y as number;\n  let result;\n\n  switch (shapeType) {\n    case 'hv':\n      result = [{ x: nextX, y }];\n      break;\n    case 'vh':\n      result = [{ x, y: nextY }];\n      break;\n    case 'hvh':\n      const middleX = (nextX + x) / 2;\n      result = [\n        { x: middleX, y },\n        { x: middleX, y: nextY },\n      ];\n      break;\n    case 'vhv':\n      const middleY = (y + nextY) / 2;\n      result = [\n        { x, y: middleY },\n        { x: nextX, y: middleY },\n      ];\n      break;\n    default:\n      break;\n  }\n\n  return result;\n};\n\nfunction getInterpolatePoints(points: Point[], shapeType: string) {\n  let result = [];\n  each(points, (point: Point, index) => {\n    const nextPoint = points[index + 1];\n    result.push(point);\n    if (nextPoint) {\n      const interpolatePoint = interpolateCallback(point, nextPoint, shapeType);\n      result = result.concat(interpolatePoint);\n    }\n  });\n  return result;\n}\n\n// 插值的图形path，不考虑null\nfunction getInterpolatePath(points: Point[]) {\n  return points.map((point, index) => {\n    return index === 0 ? ['M', point.x, point.y] : ['L', point.x, point.y];\n  });\n}\n\n// 插值的图形\nfunction getInterpolateShapeAttrs(cfg: ShapeInfo, shapeType: string) {\n  const points = getPathPoints(cfg.points, cfg.connectNulls, cfg.showSinglePoint); // 根据 connectNulls 值处理 points\n  let path = [];\n  each(points, (eachLinePoints) => {\n    const interpolatePoints = getInterpolatePoints(eachLinePoints, shapeType);\n    path = path.concat(getInterpolatePath(interpolatePoints));\n  });\n\n  return {\n    ...getStyle(cfg, true, false, 'lineWidth'),\n    path,\n  };\n}\n\n// step line\neach(['hv', 'vh', 'hvh', 'vhv'], (shapeType) => {\n  registerShape('line', shapeType, {\n    draw(cfg: ShapeInfo, container: IGroup) {\n      const attrs = getInterpolateShapeAttrs(cfg, shapeType);\n      const shape = container.addShape({\n        type: 'path',\n        attrs,\n        name: 'line',\n      });\n\n      return shape;\n    },\n    getMarker(markerCfg: ShapeMarkerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    },\n  });\n});\n"]},"metadata":{},"sourceType":"module"}