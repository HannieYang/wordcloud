{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getTooltipMapping } from '../../utils/tooltip';\nimport { deepAssign } from '../../utils';\nimport { geometry } from './base';\n/**\n * area geometry 的配置处理\n * @param params\n */\n\nexport function area(params) {\n  var options = params.options;\n  var area = options.area,\n      xField = options.xField,\n      yField = options.yField,\n      seriesField = options.seriesField,\n      smooth = options.smooth,\n      tooltip = options.tooltip,\n      useDeferredLabel = options.useDeferredLabel;\n\n  var _a = getTooltipMapping(tooltip, [xField, yField, seriesField]),\n      fields = _a.fields,\n      formatter = _a.formatter; // 如果存在才处理\n\n\n  return area ? geometry(deepAssign({}, params, {\n    options: {\n      type: 'area',\n      colorField: seriesField,\n      tooltipFields: fields,\n      mapping: __assign({\n        shape: smooth ? 'smooth' : 'area',\n        tooltip: formatter\n      }, area),\n      args: {\n        useDeferredLabel: useDeferredLabel\n      }\n    }\n  })) : params;\n}","map":{"version":3,"mappings":";AACA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAA0BC,QAA1B,QAA0D,QAA1D;AAeA;;;;;AAIA,OAAM,SAAUC,IAAV,CAA8CC,MAA9C,EAA+D;EAC3D,WAAO,GAAKA,MAAM,QAAlB;EACA,QAAI,GAAqEC,OAAO,KAAhF;EAAA,IAAMC,MAAM,GAA6DD,OAAO,OAAhF;EAAA,IAAcE,MAAM,GAAqDF,OAAO,OAAhF;EAAA,IAAsBG,WAAW,GAAwCH,OAAO,YAAhF;EAAA,IAAmCI,MAAM,GAAgCJ,OAAO,OAAhF;EAAA,IAA2CK,OAAO,GAAuBL,OAAO,QAAhF;EAAA,IAAoDM,gBAAgB,GAAKN,OAAO,iBAAhF;;EAEF,SAAwBL,iBAAiB,CAACU,OAAD,EAAU,CAACJ,MAAD,EAASC,MAAT,EAAiBC,WAAjB,CAAV,CAAzC;EAAA,IAAEI,MAAM,YAAR;EAAA,IAAUC,SAAS,eAAnB,CAJ6D,CAMnE;;;EACA,OAAOV,IAAI,GACPD,QAAQ,CACND,UAAU,CAAC,EAAD,EAAKG,MAAL,EAAa;IACrBC,OAAO,EAAE;MACPS,IAAI,EAAE,MADC;MAEPC,UAAU,EAAEP,WAFL;MAGPQ,aAAa,EAAEJ,MAHR;MAIPK,OAAO;QACLC,KAAK,EAAET,MAAM,GAAG,QAAH,GAAc,MADtB;QAELC,OAAO,EAAEG;MAFJ,GAGFV,IAHE,CAJA;MASPgB,IAAI,EAAE;QAAER,gBAAgB;MAAlB;IATC;EADY,CAAb,CADJ,CADD,GAgBPP,MAhBJ;AAiBD","names":["getTooltipMapping","deepAssign","geometry","area","params","options","xField","yField","seriesField","smooth","tooltip","useDeferredLabel","fields","formatter","type","colorField","tooltipFields","mapping","shape","args"],"sourceRoot":"","sources":["../../../src/adaptor/geometries/area.ts"],"sourcesContent":["import { Params } from '../../core/adaptor';\nimport { getTooltipMapping } from '../../utils/tooltip';\nimport { deepAssign } from '../../utils';\nimport { GeometryOptions, geometry, MappingOptions } from './base';\n\nexport interface AreaGeometryOptions extends GeometryOptions {\n  /** x 轴字段 */\n  readonly xField?: string;\n  /** y 轴字段 */\n  readonly yField?: string;\n  /** 分组字段 */\n  readonly seriesField?: string;\n  /** 是否平滑 */\n  readonly smooth?: boolean;\n  /** area 图形的样式设置 */\n  readonly area?: MappingOptions;\n}\n\n/**\n * area geometry 的配置处理\n * @param params\n */\nexport function area<O extends AreaGeometryOptions>(params: Params<O>): Params<O> {\n  const { options } = params;\n  const { area, xField, yField, seriesField, smooth, tooltip, useDeferredLabel } = options;\n\n  const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField, seriesField]);\n\n  // 如果存在才处理\n  return area\n    ? geometry(\n        deepAssign({}, params, {\n          options: {\n            type: 'area',\n            colorField: seriesField,\n            tooltipFields: fields,\n            mapping: {\n              shape: smooth ? 'smooth' : 'area',\n              tooltip: formatter,\n              ...area,\n            },\n            args: { useDeferredLabel },\n          },\n        })\n      )\n    : params;\n}\n"]},"metadata":{},"sourceType":"module"}