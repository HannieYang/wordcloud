{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNumber, filter } from '@antv/util';\nimport { LEVEL, log } from './invariant';\nimport { pick } from './pick';\n/**\n * 查看数据是否是全负数、或者全正数\n * @param data\n * @param field\n */\n\nexport function adjustYMetaByZero(data, field) {\n  if (!data) return {}; // 过滤出数字数据\n\n  var numberData = data.filter(function (datum) {\n    var v = get(datum, [field]);\n    return isNumber(v) && !isNaN(v);\n  });\n  var gtZero = numberData.every(function (datum) {\n    return get(datum, [field]) >= 0;\n  });\n  var ltZero = numberData.every(function (datum) {\n    return get(datum, [field]) <= 0;\n  }); // 目前是增量更新，对 { min: 0, max: undefined } 进行 update({ max: 0 }) 会得到 { min: 0, max: 0 }\n\n  if (gtZero) {\n    return {\n      min: 0\n    };\n  }\n\n  if (ltZero) {\n    return {\n      max: 0\n    };\n  }\n\n  return {};\n}\n/**\n * 转换数据格式为带有节点与边的数据格式\n * @param data\n * @param sourceField\n * @param targetField\n * @param weightField\n * @param rawFields 存放一些原数据\n */\n\nexport function transformDataToNodeLinkData(data, sourceField, targetField, weightField, rawFields) {\n  if (rawFields === void 0) {\n    rawFields = [];\n  }\n\n  if (!Array.isArray(data)) {\n    return {\n      nodes: [],\n      links: []\n    };\n  } //   const nodes = [];\n\n\n  var links = []; // 先使用对象方式存储\n\n  var nodesMap = {};\n  var nodesIndex = -1; // 数组变换成 chord layout 的数据结构\n\n  data.forEach(function (datum) {\n    var source = datum[sourceField];\n    var target = datum[targetField];\n    var weight = datum[weightField];\n    var rawData = pick(datum, rawFields); // source node\n\n    if (!nodesMap[source]) {\n      nodesMap[source] = __assign({\n        id: ++nodesIndex,\n        name: source\n      }, rawData);\n    }\n\n    if (!nodesMap[target]) {\n      nodesMap[target] = __assign({\n        id: ++nodesIndex,\n        name: target\n      }, rawData);\n    } // links\n\n\n    links.push(__assign({\n      source: nodesMap[source].id,\n      target: nodesMap[target].id,\n      // sourceName: source,\n      // targetName: target,\n      value: weight\n    }, rawData));\n  });\n  return {\n    // 需要按照 id 的顺序\n    nodes: Object.values(nodesMap).sort(function (a, b) {\n      return a.id - b.id;\n    }),\n    links: links\n  };\n}\n/**\n * 处理不合法的数据(过滤 非数值型 和 NaN，保留 null)\n * @param data\n * @param angleField\n */\n\nexport function processIllegalData(data, field) {\n  var processData = filter(data, function (d) {\n    var v = d[field];\n    return v === null || typeof v === 'number' && !isNaN(v);\n  }); // 打印异常数据情况\n\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n  return processData;\n}","map":{"version":3,"mappings":";AAAA,SAASA,GAAT,EAAcC,QAAd,EAAwBC,MAAxB,QAAsC,YAAtC;AAGA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,aAA3B;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA;;;;;;AAKA,OAAM,SAAUC,iBAAV,CAA4BC,IAA5B,EAAwCC,KAAxC,EAAqD;EACzD,IAAI,CAACD,IAAL,EAAW,OAAO,EAAP,CAD8C,CAEzD;;EACA,IAAME,UAAU,GAAGF,IAAI,CAACL,MAAL,CAAY,UAACQ,KAAD,EAAa;IAC1C,IAAMC,CAAC,GAAGX,GAAG,CAACU,KAAD,EAAQ,CAACF,KAAD,CAAR,CAAb;IACA,OAAOP,QAAQ,CAACU,CAAD,CAAR,IAAe,CAACC,KAAK,CAACD,CAAD,CAA5B;EACD,CAHkB,CAAnB;EAKA,IAAME,MAAM,GAAGJ,UAAU,CAACK,KAAX,CAAiB,UAACJ,KAAD,EAAa;IAAK,UAAG,CAACA,KAAD,EAAQ,CAACF,KAAD,CAAR,CAAH,IAAuB,CAAvB;EAAwB,CAA3D,CAAf;EACA,IAAMO,MAAM,GAAGN,UAAU,CAACK,KAAX,CAAiB,UAACJ,KAAD,EAAa;IAAK,UAAG,CAACA,KAAD,EAAQ,CAACF,KAAD,CAAR,CAAH,IAAuB,CAAvB;EAAwB,CAA3D,CAAf,CATyD,CAWzD;;EACA,IAAIK,MAAJ,EAAY;IACV,OAAO;MAAEG,GAAG,EAAE;IAAP,CAAP;EACD;;EACD,IAAID,MAAJ,EAAY;IACV,OAAO;MAAEE,GAAG,EAAE;IAAP,CAAP;EACD;;EACD,OAAO,EAAP;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUC,2BAAV,CACJX,IADI,EAEJY,WAFI,EAGJC,WAHI,EAIJC,WAJI,EAKJC,SALI,EAKoB;EAAxB;IAAAA;EAAwB;;EAExB,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcjB,IAAd,CAAL,EAA0B;IACxB,OAAO;MACLkB,KAAK,EAAE,EADF;MAELC,KAAK,EAAE;IAFF,CAAP;EAID,CAPuB,CASxB;;;EACA,IAAMA,KAAK,GAAG,EAAd,CAVwB,CAWxB;;EACA,IAAMC,QAAQ,GAAyB,EAAvC;EACA,IAAIC,UAAU,GAAG,CAAC,CAAlB,CAbwB,CAcxB;;EACArB,IAAI,CAACsB,OAAL,CAAa,UAACnB,KAAD,EAAa;IACxB,IAAMoB,MAAM,GAAGpB,KAAK,CAACS,WAAD,CAApB;IACA,IAAMY,MAAM,GAAGrB,KAAK,CAACU,WAAD,CAApB;IACA,IAAMY,MAAM,GAAGtB,KAAK,CAACW,WAAD,CAApB;IAEA,IAAMY,OAAO,GAAG5B,IAAI,CAACK,KAAD,EAAQY,SAAR,CAApB,CALwB,CAOxB;;IACA,IAAI,CAACK,QAAQ,CAACG,MAAD,CAAb,EAAuB;MACrBH,QAAQ,CAACG,MAAD,CAAR,GAAgBI;QACdC,EAAE,EAAE,EAAEP,UADQ;QAEdQ,IAAI,EAAEN;MAFQ,GAGXG,OAHW,CAAhB;IAKD;;IACD,IAAI,CAACN,QAAQ,CAACI,MAAD,CAAb,EAAuB;MACrBJ,QAAQ,CAACI,MAAD,CAAR,GAAgBG;QACdC,EAAE,EAAE,EAAEP,UADQ;QAEdQ,IAAI,EAAEL;MAFQ,GAGXE,OAHW,CAAhB;IAKD,CArBuB,CAsBxB;;;IACAP,KAAK,CAACW,IAAN,CAAUH;MACRJ,MAAM,EAAEH,QAAQ,CAACG,MAAD,CAAR,CAAiBK,EADjB;MAERJ,MAAM,EAAEJ,QAAQ,CAACI,MAAD,CAAR,CAAiBI,EAFjB;MAGR;MACA;MACAG,KAAK,EAAEN;IALC,GAMLC,OANK,CAAV;EAQD,CA/BD;EAgCA,OAAO;IACL;IACAR,KAAK,EAAEc,MAAM,CAACC,MAAP,CAAcb,QAAd,EAAwBc,IAAxB,CAA6B,UAACC,CAAD,EAAIC,CAAJ,EAAK;MAAK,QAAC,CAACR,EAAF,GAAOQ,CAAC,CAACR,EAAT;IAAW,CAAlD,CAFF;IAGLT,KAAK;EAHA,CAAP;AAKD;AAED;;;;;;AAKA,OAAM,SAAUkB,kBAAV,CAA6BrC,IAA7B,EAAoDC,KAApD,EAAiE;EACrE,IAAMqC,WAAW,GAAG3C,MAAM,CAACK,IAAD,EAAO,UAACuC,CAAD,EAAE;IACjC,IAAMnC,CAAC,GAAGmC,CAAC,CAACtC,KAAD,CAAX;IACA,OAAOG,CAAC,KAAK,IAAN,IAAe,OAAOA,CAAP,KAAa,QAAb,IAAyB,CAACC,KAAK,CAACD,CAAD,CAArD;EACD,CAHyB,CAA1B,CADqE,CAMrE;;EACAP,GAAG,CAACD,KAAK,CAAC4C,IAAP,EAAaF,WAAW,CAACG,MAAZ,KAAuBzC,IAAI,CAACyC,MAAzC,EAAiD,qCAAjD,CAAH;EAEA,OAAOH,WAAP;AACD","names":["get","isNumber","filter","LEVEL","log","pick","adjustYMetaByZero","data","field","numberData","datum","v","isNaN","gtZero","every","ltZero","min","max","transformDataToNodeLinkData","sourceField","targetField","weightField","rawFields","Array","isArray","nodes","links","nodesMap","nodesIndex","forEach","source","target","weight","rawData","__assign","id","name","push","value","Object","values","sort","a","b","processIllegalData","processData","d","WARN","length"],"sourceRoot":"","sources":["../../src/utils/data.ts"],"sourcesContent":["import { get, isNumber, filter } from '@antv/util';\nimport { Data, Datum, Meta, Options } from '../types';\nimport { Node, NodeLinkData } from '../types/relation-data';\nimport { LEVEL, log } from './invariant';\nimport { pick } from './pick';\n\n/**\n * 查看数据是否是全负数、或者全正数\n * @param data\n * @param field\n */\nexport function adjustYMetaByZero(data: Data, field: string): Meta {\n  if (!data) return {};\n  // 过滤出数字数据\n  const numberData = data.filter((datum: Datum) => {\n    const v = get(datum, [field]);\n    return isNumber(v) && !isNaN(v);\n  });\n\n  const gtZero = numberData.every((datum: Datum) => get(datum, [field]) >= 0);\n  const ltZero = numberData.every((datum: Datum) => get(datum, [field]) <= 0);\n\n  // 目前是增量更新，对 { min: 0, max: undefined } 进行 update({ max: 0 }) 会得到 { min: 0, max: 0 }\n  if (gtZero) {\n    return { min: 0 };\n  }\n  if (ltZero) {\n    return { max: 0 };\n  }\n  return {};\n}\n\n/**\n * 转换数据格式为带有节点与边的数据格式\n * @param data\n * @param sourceField\n * @param targetField\n * @param weightField\n * @param rawFields 存放一些原数据\n */\nexport function transformDataToNodeLinkData(\n  data: Data,\n  sourceField: string,\n  targetField: string,\n  weightField: string,\n  rawFields: string[] = []\n): NodeLinkData {\n  if (!Array.isArray(data)) {\n    return {\n      nodes: [],\n      links: [],\n    };\n  }\n\n  //   const nodes = [];\n  const links = [];\n  // 先使用对象方式存储\n  const nodesMap: Record<string, Node> = {};\n  let nodesIndex = -1;\n  // 数组变换成 chord layout 的数据结构\n  data.forEach((datum: Datum) => {\n    const source = datum[sourceField];\n    const target = datum[targetField];\n    const weight = datum[weightField];\n\n    const rawData = pick(datum, rawFields);\n\n    // source node\n    if (!nodesMap[source]) {\n      nodesMap[source] = {\n        id: ++nodesIndex,\n        name: source,\n        ...rawData,\n      };\n    }\n    if (!nodesMap[target]) {\n      nodesMap[target] = {\n        id: ++nodesIndex,\n        name: target,\n        ...rawData,\n      };\n    }\n    // links\n    links.push({\n      source: nodesMap[source].id,\n      target: nodesMap[target].id,\n      // sourceName: source,\n      // targetName: target,\n      value: weight,\n      ...rawData,\n    });\n  });\n  return {\n    // 需要按照 id 的顺序\n    nodes: Object.values(nodesMap).sort((a, b) => a.id - b.id),\n    links,\n  };\n}\n\n/**\n * 处理不合法的数据(过滤 非数值型 和 NaN，保留 null)\n * @param data\n * @param angleField\n */\nexport function processIllegalData(data: Options['data'], field: string) {\n  const processData = filter(data, (d) => {\n    const v = d[field];\n    return v === null || (typeof v === 'number' && !isNaN(v));\n  });\n\n  // 打印异常数据情况\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n\n  return processData;\n}\n"]},"metadata":{},"sourceType":"module"}