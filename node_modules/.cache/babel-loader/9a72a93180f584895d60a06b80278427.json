{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\n/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n/** @ignore */\n\nvar ScalePool =\n/** @class */\nfunction () {\n  function ScalePool() {\n    /** 所有的 scales */\n    this.scales = new Map();\n    /** 需要同步的 scale 分组， key: scaleKeyArray */\n\n    this.syncScales = new Map();\n  }\n  /**\n   * 创建 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n\n\n  ScalePool.prototype.createScale = function (field, data, scaleDef, key) {\n    var finalScaleDef = scaleDef;\n    var cacheScaleMeta = this.getScaleMeta(key);\n\n    if (data.length === 0 && cacheScaleMeta) {\n      // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n      var cacheScale = cacheScaleMeta.scale;\n      var cacheScaleDef = {\n        type: cacheScale.type\n      };\n\n      if (cacheScale.isCategory) {\n        // 如果是分类类型，保持 values\n        cacheScaleDef.values = cacheScale.values;\n      }\n\n      finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n    }\n\n    var scale = createScaleByField(field, data, finalScaleDef); // 缓存起来\n\n    this.cacheScale(scale, scaleDef, key);\n    return scale;\n  };\n  /**\n   * 同步 scale\n   */\n\n\n  ScalePool.prototype.sync = function (coordinate, theme) {\n    var _this = this; // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n\n\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      // min, max, values, ranges\n      var min = Number.MAX_SAFE_INTEGER;\n      var max = Number.MIN_SAFE_INTEGER;\n      var values = []; // 1. 遍历求得最大最小值，values 等\n\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n\n        max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n        min = isNumber(scale.min) ? Math.min(min, scale.min) : min; // 去重\n\n        each(scale.values, function (v) {\n          if (!values.includes(v)) {\n            values.push(v);\n          }\n        });\n      }); // 2. 同步\n\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n\n        if (scale.isContinuous) {\n          scale.change({\n            min: min,\n            max: max,\n            values: values\n          });\n        } else if (scale.isCategory) {\n          var range = scale.range;\n\n          var cacheScaleMeta = _this.getScaleMeta(key); // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n\n\n          if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n            // 更新 range\n            range = getDefaultCategoryScaleRange(deepMix({}, scale, {\n              values: values\n            }), coordinate, theme);\n          }\n\n          scale.change({\n            values: values,\n            range: range\n          });\n        }\n      });\n    });\n  };\n  /**\n   * 缓存一个 scale\n   * @param scale\n   * @param scaleDef\n   * @param key\n   */\n\n\n  ScalePool.prototype.cacheScale = function (scale, scaleDef, key) {\n    // 1. 缓存到 scales\n    var sm = this.getScaleMeta(key); // 存在则更新，同时检测类型是否一致\n\n    if (sm && sm.scale.type === scale.type) {\n      syncScale(sm.scale, scale);\n      sm.scaleDef = scaleDef; // 更新 scaleDef\n    } else {\n      sm = {\n        key: key,\n        scale: scale,\n        scaleDef: scaleDef\n      };\n      this.scales.set(key, sm);\n    } // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n\n\n    var syncKey = this.getSyncKey(sm);\n    sm.syncKey = syncKey; // 设置 sync 同步的 key\n    // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n\n    this.removeFromSyncScales(key); // 存在 sync 标记才进行 sync\n\n    if (syncKey) {\n      // 不存在这个 syncKey，则创建一个空数组\n      var scaleKeys = this.syncScales.get(syncKey);\n\n      if (!scaleKeys) {\n        scaleKeys = [];\n        this.syncScales.set(syncKey, scaleKeys);\n      }\n\n      scaleKeys.push(key);\n    }\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n\n\n  ScalePool.prototype.getScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n\n    if (!scaleMeta) {\n      var field = last(key.split('-'));\n      var scaleKeys = this.syncScales.get(field);\n\n      if (scaleKeys && scaleKeys.length) {\n        scaleMeta = this.getScaleMeta(scaleKeys[0]);\n      }\n    }\n\n    return scaleMeta && scaleMeta.scale;\n  };\n  /**\n   * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n   * @param key\n   */\n\n\n  ScalePool.prototype.deleteScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n\n    if (scaleMeta) {\n      var syncKey = scaleMeta.syncKey;\n      var scaleKeys = this.syncScales.get(syncKey); // 移除同步的关系\n\n      if (scaleKeys && scaleKeys.length) {\n        var idx = scaleKeys.indexOf(key);\n\n        if (idx !== -1) {\n          scaleKeys.splice(idx, 1);\n        }\n      }\n    } // 删除 scale 实例\n\n\n    this.scales.delete(key);\n  };\n  /**\n   * 清空\n   */\n\n\n  ScalePool.prototype.clear = function () {\n    this.scales.clear();\n    this.syncScales.clear();\n  };\n  /**\n   * 删除 sync scale 引用\n   * @param key\n   */\n\n\n  ScalePool.prototype.removeFromSyncScales = function (key) {\n    var _this = this;\n\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      var idx = scaleKeys.indexOf(key);\n\n      if (idx !== -1) {\n        scaleKeys.splice(idx, 1); // 删除空数组值\n\n        if (scaleKeys.length === 0) {\n          _this.syncScales.delete(syncKey);\n        }\n\n        return false; // 跳出循环\n      }\n    });\n  };\n  /**\n   * get sync key\n   * @param sm\n   */\n\n\n  ScalePool.prototype.getSyncKey = function (sm) {\n    var scale = sm.scale,\n        scaleDef = sm.scaleDef;\n    var field = scale.field;\n    var sync = get(scaleDef, ['sync']); // 如果 sync = true，则直接使用字段名作为 syncKey\n\n    return sync === true ? field : sync === false ? undefined : sync;\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n\n\n  ScalePool.prototype.getScaleMeta = function (key) {\n    return this.scales.get(key);\n  };\n\n  return ScalePool;\n}();\n\nexport { ScalePool };","map":{"version":3,"mappings":"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","names":["deepMix","each","get","isNumber","last","createScaleByField","syncScale","getDefaultCategoryScaleRange","Map","ScalePool","field","data","scaleDef","key","finalScaleDef","cacheScaleMeta","getScaleMeta","length","cacheScale","scale","cacheScaleDef","type","isCategory","values","coordinate","theme","syncScales","forEach","scaleKeys","syncKey","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","_this","getScale","Math","v","includes","push","isContinuous","change","range","sm","scales","set","getSyncKey","removeFromSyncScales","scaleMeta","split","idx","indexOf","splice","delete","clear","sync","undefined"],"sourceRoot":"","sources":["../../../src/chart/util/scale-pool.ts"],"sourcesContent":["/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { Scale, Coordinate } from '../../dependents';\nimport { Data, LooseObject, ScaleOption, ViewCfg } from '../../interface';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n\n/** @ignore */\ninterface ScaleMeta {\n  readonly key: string;\n  readonly scale: Scale;\n  scaleDef: ScaleOption;\n  syncKey?: string;\n}\n\n/** @ignore */\nexport class ScalePool {\n  /** 所有的 scales */\n  private scales = new Map<string, ScaleMeta>();\n  /** 需要同步的 scale 分组， key: scaleKeyArray */\n  private syncScales = new Map<string, string[]>();\n\n  /**\n   * 创建 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  public createScale(field: string, data: Data, scaleDef: ScaleOption, key: string): Scale {\n    let finalScaleDef = scaleDef;\n\n    const cacheScaleMeta = this.getScaleMeta(key);\n    if (data.length === 0 && cacheScaleMeta) {\n      // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n      const cacheScale = cacheScaleMeta.scale;\n      const cacheScaleDef: LooseObject = {\n        type: cacheScale.type,\n      };\n      if (cacheScale.isCategory) {\n        // 如果是分类类型，保持 values\n        cacheScaleDef.values = cacheScale.values;\n      }\n      finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n    }\n\n    const scale = createScaleByField(field, data, finalScaleDef);\n\n    // 缓存起来\n    this.cacheScale(scale, scaleDef, key);\n\n    return scale;\n  }\n\n  /**\n   * 同步 scale\n   */\n  public sync(coordinate: Coordinate, theme: ViewCfg['theme']) {\n    // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n    this.syncScales.forEach((scaleKeys: string[], syncKey: string) => {\n      // min, max, values, ranges\n      let min = Number.MAX_SAFE_INTEGER;\n      let max = Number.MIN_SAFE_INTEGER;\n      const values = [];\n\n      // 1. 遍历求得最大最小值，values 等\n      each(scaleKeys, (key: string) => {\n        const scale = this.getScale(key);\n\n        max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n        min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n\n        // 去重\n        each(scale.values, (v: any) => {\n          if (!values.includes(v)) {\n            values.push(v);\n          }\n        });\n      });\n\n      // 2. 同步\n      each(scaleKeys, (key: string) => {\n        const scale = this.getScale(key);\n\n        if (scale.isContinuous) {\n          scale.change({\n            min,\n            max,\n            values,\n          });\n        } else if (scale.isCategory) {\n          let range = scale.range;\n          const cacheScaleMeta = this.getScaleMeta(key);\n\n          // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n          if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n            // 更新 range\n            range = getDefaultCategoryScaleRange(\n              deepMix({}, scale, {\n                values,\n              }),\n              coordinate,\n              theme\n            );\n          }\n          scale.change({\n            values,\n            range,\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * 缓存一个 scale\n   * @param scale\n   * @param scaleDef\n   * @param key\n   */\n  private cacheScale(scale: Scale, scaleDef: ScaleOption, key: string) {\n    // 1. 缓存到 scales\n\n    let sm = this.getScaleMeta(key);\n    // 存在则更新，同时检测类型是否一致\n    if (sm && sm.scale.type === scale.type) {\n      syncScale(sm.scale, scale);\n      sm.scaleDef = scaleDef;\n      // 更新 scaleDef\n    } else {\n      sm = {\n        key,\n        scale,\n        scaleDef,\n      };\n\n      this.scales.set(key, sm);\n    }\n\n    // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n    const syncKey = this.getSyncKey(sm);\n    sm.syncKey = syncKey; // 设置 sync 同步的 key\n\n    // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n    this.removeFromSyncScales(key);\n\n    // 存在 sync 标记才进行 sync\n    if (syncKey) {\n      // 不存在这个 syncKey，则创建一个空数组\n      let scaleKeys = this.syncScales.get(syncKey);\n      if (!scaleKeys) {\n        scaleKeys = [];\n        this.syncScales.set(syncKey, scaleKeys);\n      }\n      scaleKeys.push(key);\n    }\n  }\n\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  public getScale(key: string): Scale {\n    let scaleMeta = this.getScaleMeta(key);\n    if (!scaleMeta) {\n      const field = last(key.split('-'));\n      const scaleKeys = this.syncScales.get(field);\n      if (scaleKeys && scaleKeys.length) {\n        scaleMeta = this.getScaleMeta(scaleKeys[0]);\n      }\n    }\n    return scaleMeta && scaleMeta.scale;\n  }\n\n  /**\n   * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n   * @param key\n   */\n  public deleteScale(key: string) {\n    const scaleMeta = this.getScaleMeta(key);\n    if (scaleMeta) {\n      const { syncKey } = scaleMeta;\n\n      const scaleKeys = this.syncScales.get(syncKey);\n\n      // 移除同步的关系\n      if (scaleKeys && scaleKeys.length) {\n        const idx = scaleKeys.indexOf(key);\n\n        if (idx !== -1) {\n          scaleKeys.splice(idx, 1);\n        }\n      }\n    }\n\n    // 删除 scale 实例\n    this.scales.delete(key);\n  }\n\n  /**\n   * 清空\n   */\n  public clear() {\n    this.scales.clear();\n    this.syncScales.clear();\n  }\n\n  /**\n   * 删除 sync scale 引用\n   * @param key\n   */\n  private removeFromSyncScales(key: string) {\n    this.syncScales.forEach((scaleKeys: string[], syncKey: string) => {\n      const idx = scaleKeys.indexOf(key);\n\n      if (idx !== -1) {\n        scaleKeys.splice(idx, 1);\n\n        // 删除空数组值\n        if (scaleKeys.length === 0) {\n          this.syncScales.delete(syncKey);\n        }\n\n        return false; // 跳出循环\n      }\n    });\n  }\n\n  /**\n   * get sync key\n   * @param sm\n   */\n  private getSyncKey(sm: ScaleMeta): string {\n    const { scale, scaleDef } = sm;\n    const { field } = scale;\n    const sync = get(scaleDef, ['sync']);\n\n    // 如果 sync = true，则直接使用字段名作为 syncKey\n    return sync === true ? field : sync === false ? undefined : sync;\n  }\n\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  private getScaleMeta(key: string): ScaleMeta {\n    return this.scales.get(key);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}