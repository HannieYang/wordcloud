{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray, get } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { treemap } from '../../utils/hierarchy/treemap';\nexport function findInteraction(interactions, interactionType) {\n  if (!isArray(interactions)) return undefined;\n  return interactions.find(function (i) {\n    return i.type === interactionType;\n  });\n}\nexport function enableInteraction(interactions, interactionType) {\n  var interaction = findInteraction(interactions, interactionType);\n  return interaction && interaction.enable !== false;\n}\n/**\n * 是否允许下钻交互\n * @param interactions\n * @param interactionType\n * @returns\n */\n\nexport function enableDrillInteraction(options) {\n  var interactions = options.interactions,\n      drilldown = options.drilldown; // 兼容旧版本, treemap-drill-down\n\n  return get(drilldown, 'enabled') || enableInteraction(interactions, 'treemap-drill-down');\n}\nexport function resetDrillDown(chart) {\n  var drillDownInteraction = chart.interactions['drill-down'];\n  if (!drillDownInteraction) return; // @ts-ignore\n\n  var drillDownAction = drillDownInteraction.context.actions.find(function (i) {\n    return i.name === 'drill-down-action';\n  });\n  drillDownAction.reset();\n}\nexport function transformData(options) {\n  var data = options.data,\n      colorField = options.colorField,\n      enableDrillDown = options.enableDrillDown,\n      hierarchyConfig = options.hierarchyConfig;\n  var nodes = treemap(data, __assign(__assign({}, hierarchyConfig), {\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    if (node.depth === 0) {\n      return null;\n    } // 开启下钻，仅加载 depth === 1 的数据\n\n\n    if (enableDrillDown && node.depth !== 1) {\n      return null;\n    } // 不开启下钻，加载所有叶子节点\n\n\n    if (!enableDrillDown && node.children) {\n      return null;\n    } // path 信息仅挑选必要祖先元素属性，因为在有些属性是不必要(x, y), 或是不准确的(下钻时的 depth)，不对外透出\n\n\n    var curPath = node.ancestors().map(function (n) {\n      return {\n        data: n.data,\n        height: n.height,\n        value: n.value\n      };\n    }); // 在下钻树图中，每次绘制的是当前层级信息，将父元素的层级信息（data.path) 做一层拼接。\n\n    var path = enableDrillDown && isArray(data.path) ? curPath.concat(data.path.slice(1)) : curPath;\n    var nodeInfo = Object.assign({}, node.data, __assign({\n      x: node.x,\n      y: node.y,\n      depth: node.depth,\n      value: node.value,\n      path: path\n    }, node));\n\n    if (!node.data[colorField] && node.parent) {\n      var ancestorNode = node.ancestors().find(function (n) {\n        return n.data[colorField];\n      });\n      nodeInfo[colorField] = ancestorNode === null || ancestorNode === void 0 ? void 0 : ancestorNode.data[colorField];\n    } else {\n      nodeInfo[colorField] = node.data[colorField];\n    }\n\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = {\n      hierarchyConfig: hierarchyConfig,\n      colorField: colorField,\n      enableDrillDown: enableDrillDown\n    };\n    result.push(nodeInfo);\n  });\n  return result;\n}","map":{"version":3,"mappings":"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","names":["isArray","get","HIERARCHY_DATA_TRANSFORM_PARAMS","treemap","findInteraction","interactions","interactionType","undefined","find","i","type","enableInteraction","interaction","enable","enableDrillInteraction","options","drilldown","resetDrillDown","chart","drillDownInteraction","drillDownAction","context","actions","name","reset","transformData","colorField","enableDrillDown","hierarchyConfig","nodes","data","__assign","field","as","result","forEach","node","depth","children","curPath","ancestors","map","n","height","value","path","concat","slice","nodeInfo","Object","assign","x","y","parent","ancestorNode","push"],"sourceRoot":"","sources":["../../../src/plots/treemap/utils.ts"],"sourcesContent":["import { isArray, get } from '@antv/util';\nimport { View } from '@antv/g2';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { Interaction } from '../../types/interaction';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { TreemapOptions } from './types';\n\nexport function findInteraction(\n  interactions: TreemapOptions['interactions'],\n  interactionType: string\n): undefined | Interaction {\n  if (!isArray(interactions)) return undefined;\n  return interactions.find((i) => i.type === interactionType);\n}\n\nexport function enableInteraction(interactions: TreemapOptions['interactions'], interactionType: string): boolean {\n  const interaction = findInteraction(interactions, interactionType);\n  return interaction && interaction.enable !== false;\n}\n\n/**\n * 是否允许下钻交互\n * @param interactions\n * @param interactionType\n * @returns\n */\nexport function enableDrillInteraction(options: TreemapOptions): boolean {\n  const { interactions, drilldown } = options;\n  // 兼容旧版本, treemap-drill-down\n  return get(drilldown, 'enabled') || enableInteraction(interactions, 'treemap-drill-down');\n}\n\nexport function resetDrillDown(chart: View) {\n  const drillDownInteraction = chart.interactions['drill-down'];\n\n  if (!drillDownInteraction) return;\n\n  // @ts-ignore\n  const drillDownAction = drillDownInteraction.context.actions.find((i) => i.name === 'drill-down-action');\n\n  drillDownAction.reset();\n}\n\ninterface TransformDataOptions {\n  data: TreemapOptions['data'];\n  colorField: TreemapOptions['colorField'];\n  enableDrillDown: boolean;\n  hierarchyConfig: TreemapOptions['hierarchyConfig'];\n}\n\nexport function transformData(options: TransformDataOptions) {\n  const { data, colorField, enableDrillDown, hierarchyConfig } = options;\n\n  const nodes = treemap(data, {\n    ...hierarchyConfig,\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n  nodes.forEach((node) => {\n    if (node.depth === 0) {\n      return null;\n    }\n\n    // 开启下钻，仅加载 depth === 1 的数据\n    if (enableDrillDown && node.depth !== 1) {\n      return null;\n    }\n\n    // 不开启下钻，加载所有叶子节点\n    if (!enableDrillDown && node.children) {\n      return null;\n    }\n\n    // path 信息仅挑选必要祖先元素属性，因为在有些属性是不必要(x, y), 或是不准确的(下钻时的 depth)，不对外透出\n    const curPath = node.ancestors().map((n) => ({\n      data: n.data,\n      height: n.height,\n      value: n.value,\n    }));\n    // 在下钻树图中，每次绘制的是当前层级信息，将父元素的层级信息（data.path) 做一层拼接。\n    const path = enableDrillDown && isArray(data.path) ? curPath.concat(data.path.slice(1)) : curPath;\n\n    const nodeInfo = Object.assign({}, node.data, {\n      x: node.x,\n      y: node.y,\n      depth: node.depth,\n      value: node.value,\n      path,\n      ...node,\n    });\n    if (!node.data[colorField] && node.parent) {\n      const ancestorNode = node.ancestors().find((n) => n.data[colorField]);\n      nodeInfo[colorField] = ancestorNode?.data[colorField];\n    } else {\n      nodeInfo[colorField] = node.data[colorField];\n    }\n\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = { hierarchyConfig, colorField, enableDrillDown };\n    result.push(nodeInfo);\n  });\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}