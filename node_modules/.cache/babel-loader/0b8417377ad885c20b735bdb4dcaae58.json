{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { registerShape, registerShapeFactory } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getIntervalRectPath, getRectPoints, getRectWithCornerRadius } from './util';\n/** Interval 的 shape 工厂 */\n\nvar IntervalShapeFactory = registerShapeFactory('interval', {\n  defaultShapeType: 'rect',\n  getDefaultPoints: function (pointInfo) {\n    return getRectPoints(pointInfo);\n  }\n});\n/** Inerval 默认 shape，填充的矩形 */\n\nregisterShape('interval', 'rect', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, false, true);\n    var group = container;\n    var backgroundCfg = cfg === null || cfg === void 0 ? void 0 : cfg.background;\n\n    if (backgroundCfg) {\n      group = container.addGroup({\n        name: 'interval-group'\n      });\n      var backgroundStyle = getBackgroundRectStyle(cfg);\n      var backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points), this.coordinate);\n      group.addShape('path', {\n        attrs: __assign(__assign({}, backgroundStyle), {\n          path: backgroundPath\n        }),\n        zIndex: -1,\n        name: BACKGROUND_SHAPE\n      });\n    }\n\n    var path;\n\n    if (style.radius && this.coordinate.isRect) {\n      path = getRectWithCornerRadius(this.parsePoints(cfg.points), this.coordinate, style.radius);\n    } else {\n      path = this.parsePath(getIntervalRectPath(cfg.points, style.lineCap, this.coordinate));\n    }\n\n    var shape = group.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return backgroundCfg ? group : shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color,\n        isInPolar = markerCfg.isInPolar;\n\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          fill: color\n        }\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default IntervalShapeFactory;","map":{"version":3,"mappings":";AAGA,SAASA,aAAT,EAAwBC,oBAAxB,QAAoD,SAApD;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,sBAAT,EAAiCC,QAAjC,QAAiD,mBAAjD;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,EAAqDC,aAArD,EAAoEC,uBAApE,QAAmG,QAAnG;AAEA;;AACA,IAAMC,oBAAoB,GAAGR,oBAAoB,CAAC,UAAD,EAAa;EAC5DS,gBAAgB,EAAE,MAD0C;EAE5DC,gBAAgB,EAAhB,UAAiBC,SAAjB,EAAsC;IACpC,OAAOL,aAAa,CAACK,SAAD,CAApB;EACD;AAJ2D,CAAb,CAAjD;AAOA;;AACAZ,aAAa,CAAC,UAAD,EAAa,MAAb,EAAqB;EAChCa,IAAI,EAAJ,UAAKC,GAAL,EAAqBC,SAArB,EAAsC;IACpC,IAAMC,KAAK,GAAGZ,QAAQ,CAACU,GAAD,EAAM,KAAN,EAAa,IAAb,CAAtB;IACA,IAAIG,KAAK,GAAGF,SAAZ;IAEA,IAAMG,aAAa,GAAGJ,GAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEK,UAA3B;;IACA,IAAID,aAAJ,EAAmB;MACjBD,KAAK,GAAGF,SAAS,CAACK,QAAV,CAAmB;QACzBC,IAAI,EAAE;MADmB,CAAnB,CAAR;MAGA,IAAMC,eAAe,GAAGnB,sBAAsB,CAACW,GAAD,CAA9C;MACA,IAAMS,cAAc,GAAGlB,qBAAqB,CAACS,GAAD,EAAM,KAAKU,WAAL,CAAiBV,GAAG,CAACW,MAArB,CAAN,EAA+C,KAAKC,UAApD,CAA5C;MACAT,KAAK,CAACU,QAAN,CAAe,MAAf,EAAuB;QACrBC,KAAK,wBACAN,eADA,GACe;UAClBO,IAAI,EAAEN;QADY,CADf,CADgB;QAKrBO,MAAM,EAAE,CAAC,CALY;QAMrBT,IAAI,EAAEnB;MANe,CAAvB;IAQD;;IAED,IAAI2B,IAAJ;;IACA,IAAIb,KAAK,CAACe,MAAN,IAAgB,KAAKL,UAAL,CAAgBM,MAApC,EAA4C;MAC1CH,IAAI,GAAGrB,uBAAuB,CAAC,KAAKgB,WAAL,CAAiBV,GAAG,CAACW,MAArB,CAAD,EAA+B,KAAKC,UAApC,EAAgDV,KAAK,CAACe,MAAtD,CAA9B;IACD,CAFD,MAEO;MACLF,IAAI,GAAG,KAAKI,SAAL,CAAe3B,mBAAmB,CAACQ,GAAG,CAACW,MAAL,EAAwBT,KAAK,CAACkB,OAA9B,EAAuC,KAAKR,UAA5C,CAAlC,CAAP;IACD;;IAED,IAAMS,KAAK,GAAGlB,KAAK,CAACU,QAAN,CAAe,MAAf,EAAuB;MACnCC,KAAK,wBACAZ,KADA,GACK;QACRa,IAAI;MADI,CADL,CAD8B;MAKnCR,IAAI,EAAE;IAL6B,CAAvB,CAAd;IAQA,OAAOH,aAAa,GAAGD,KAAH,GAAWkB,KAA/B;EACD,CAtC+B;EAuChCC,SAAS,EAAT,UAAUC,SAAV,EAAmC;IACzB,SAAK,GAAgBA,SAAS,MAA9B;IAAA,IAAOC,SAAS,GAAKD,SAAS,UAA9B;;IACR,IAAIC,SAAJ,EAAe;MACb,OAAO;QACLC,MAAM,EAAE,QADH;QAELvB,KAAK,EAAE;UACLwB,CAAC,EAAE,GADE;UAELC,IAAI,EAAEC;QAFD;MAFF,CAAP;IAOD;;IAED,OAAO;MACLH,MAAM,EAAE,QADH;MAELvB,KAAK,EAAE;QACLwB,CAAC,EAAE,CADE;QAELC,IAAI,EAAEC;MAFD;IAFF,CAAP;EAOD;AA1D+B,CAArB,CAAb;AA6DA,eAAejC,oBAAf","names":["registerShape","registerShapeFactory","BACKGROUND_SHAPE","getBackgroundRectStyle","getStyle","getBackgroundRectPath","getIntervalRectPath","getRectPoints","getRectWithCornerRadius","IntervalShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","draw","cfg","container","style","group","backgroundCfg","background","addGroup","name","backgroundStyle","backgroundPath","parsePoints","points","coordinate","addShape","attrs","path","zIndex","radius","isRect","parsePath","lineCap","shape","getMarker","markerCfg","isInPolar","symbol","r","fill","color"],"sourceRoot":"","sources":["../../../../src/geometry/shape/interval/index.ts"],"sourcesContent":["import { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { registerShape, registerShapeFactory } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getIntervalRectPath, getRectPoints, getRectWithCornerRadius } from './util';\n\n/** Interval 的 shape 工厂 */\nconst IntervalShapeFactory = registerShapeFactory('interval', {\n  defaultShapeType: 'rect',\n  getDefaultPoints(pointInfo: ShapePoint): Point[] {\n    return getRectPoints(pointInfo);\n  },\n});\n\n/** Inerval 默认 shape，填充的矩形 */\nregisterShape('interval', 'rect', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, false, true);\n    let group = container;\n\n    const backgroundCfg = cfg?.background;\n    if (backgroundCfg) {\n      group = container.addGroup({\n        name: 'interval-group',\n      });\n      const backgroundStyle = getBackgroundRectStyle(cfg);\n      const backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points) as Point[], this.coordinate);\n      group.addShape('path', {\n        attrs: {\n          ...backgroundStyle,\n          path: backgroundPath,\n        },\n        zIndex: -1,\n        name: BACKGROUND_SHAPE,\n      });\n    }\n\n    let path;\n    if (style.radius && this.coordinate.isRect) {\n      path = getRectWithCornerRadius(this.parsePoints(cfg.points), this.coordinate, style.radius);\n    } else {\n      path = this.parsePath(getIntervalRectPath(cfg.points as Point[], style.lineCap, this.coordinate));\n    }\n\n    const shape = group.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return backgroundCfg ? group : shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color, isInPolar } = markerCfg;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          fill: color,\n        },\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default IntervalShapeFactory;\n"]},"metadata":{},"sourceType":"module"}