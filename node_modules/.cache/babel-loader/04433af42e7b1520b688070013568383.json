{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { getUnitPatternSize, initCanvas, drawBackground, getSymbolsPosition, transformMatrix, getPixelRatio } from './util';\n/**\n * squarePattern 的 默认配置\n */\n\nexport var defaultSquarePatternCfg = {\n  size: 6,\n  padding: 1,\n  isStagger: true,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0\n};\n/**\n * 绘制square\n *\n * @param context canvasContext\n * @param cfg squarePattern 的配置\n * @param x和y square的中心位置\n */\n\nexport function drawSquare(context, cfg, x, y) {\n  var stroke = cfg.stroke,\n      size = cfg.size,\n      fill = cfg.fill,\n      lineWidth = cfg.lineWidth,\n      fillOpacity = cfg.fillOpacity;\n  context.globalAlpha = fillOpacity;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.fillStyle = fill; // 因为正方形绘制从左上角开始，所以x，y做个偏移\n\n  context.strokeRect(x - size / 2, y - size / 2, size, size);\n  context.fillRect(x - size / 2, y - size / 2, size, size);\n}\n/**\n * 创建 squarePattern\n */\n\nexport function createSquarePattern(cfg) {\n  var squareCfg = deepAssign({}, defaultSquarePatternCfg, cfg);\n  var size = squareCfg.size,\n      padding = squareCfg.padding,\n      isStagger = squareCfg.isStagger,\n      rotation = squareCfg.rotation; // 计算 画布大小，squares的位置\n\n  var unitSize = getUnitPatternSize(size, padding, isStagger);\n  var squares = getSymbolsPosition(unitSize, isStagger); // 计算方法与 dots 一样\n  // 初始化 patternCanvas\n\n  var canvas = initCanvas(unitSize, unitSize);\n  var ctx = canvas.getContext('2d'); // 绘制 background，squares\n\n  drawBackground(ctx, squareCfg, unitSize);\n\n  for (var _i = 0, squares_1 = squares; _i < squares_1.length; _i++) {\n    var _a = squares_1[_i],\n        x = _a[0],\n        y = _a[1];\n    drawSquare(ctx, squareCfg, x, y);\n  }\n\n  var pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}","map":{"version":3,"mappings":"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","names":["deepAssign","getUnitPatternSize","initCanvas","drawBackground","getSymbolsPosition","transformMatrix","getPixelRatio","defaultSquarePatternCfg","size","padding","isStagger","backgroundColor","opacity","rotation","fill","fillOpacity","stroke","lineWidth","drawSquare","context","cfg","x","y","globalAlpha","strokeStyle","fillStyle","strokeRect","fillRect","createSquarePattern","squareCfg","unitSize","squares","canvas","ctx","getContext","_i","pattern","createPattern","dpr","matrix","setTransform"],"sourceRoot":"","sources":["../../../src/utils/pattern/square.ts"],"sourcesContent":["import { SquarePatternCfg } from '../../types/pattern';\nimport { deepAssign } from '../../utils';\nimport {\n  getUnitPatternSize,\n  initCanvas,\n  drawBackground,\n  getSymbolsPosition,\n  transformMatrix,\n  getPixelRatio,\n} from './util';\n\n/**\n * squarePattern 的 默认配置\n */\nexport const defaultSquarePatternCfg = {\n  size: 6,\n  padding: 1,\n  isStagger: true,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0,\n};\n\n/**\n * 绘制square\n *\n * @param context canvasContext\n * @param cfg squarePattern 的配置\n * @param x和y square的中心位置\n */\nexport function drawSquare(context: CanvasRenderingContext2D, cfg: SquarePatternCfg, x: number, y: number) {\n  const { stroke, size, fill, lineWidth, fillOpacity } = cfg;\n\n  context.globalAlpha = fillOpacity;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.fillStyle = fill;\n  // 因为正方形绘制从左上角开始，所以x，y做个偏移\n  context.strokeRect(x - size / 2, y - size / 2, size, size);\n  context.fillRect(x - size / 2, y - size / 2, size, size);\n}\n\n/**\n * 创建 squarePattern\n */\nexport function createSquarePattern(cfg?: SquarePatternCfg): CanvasPattern {\n  const squareCfg = deepAssign({}, defaultSquarePatternCfg, cfg);\n\n  const { size, padding, isStagger, rotation } = squareCfg;\n\n  // 计算 画布大小，squares的位置\n  const unitSize = getUnitPatternSize(size, padding, isStagger);\n  const squares = getSymbolsPosition(unitSize, isStagger); // 计算方法与 dots 一样\n\n  // 初始化 patternCanvas\n  const canvas = initCanvas(unitSize, unitSize);\n  const ctx = canvas.getContext('2d');\n\n  // 绘制 background，squares\n  drawBackground(ctx, squareCfg, unitSize);\n  for (const [x, y] of squares) {\n    drawSquare(ctx, squareCfg, x, y);\n  }\n\n  const pattern = ctx.createPattern(canvas, 'repeat');\n\n  if (pattern) {\n    const dpr = getPixelRatio();\n    const matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n\n  return pattern;\n}\n"]},"metadata":{},"sourceType":"module"}