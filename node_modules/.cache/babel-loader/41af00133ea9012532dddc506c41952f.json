{"ast":null,"code":"import { theme, scale, animation, annotation, tooltip, pattern } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { getTinyData } from '../tiny-line/utils';\nimport { adjustYMetaByZero } from '../../utils/data';\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      color = options.color,\n      areaStyle = options.areaStyle,\n      pointOptions = options.point,\n      lineOptions = options.line;\n  var pointState = pointOptions === null || pointOptions === void 0 ? void 0 : pointOptions.state;\n  var seriesData = getTinyData(data);\n  chart.data(seriesData);\n  var primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      area: {\n        color: color,\n        style: areaStyle\n      },\n      line: lineOptions,\n      point: pointOptions\n    }\n  });\n  var second = deepAssign({}, primary, {\n    options: {\n      tooltip: false\n    }\n  });\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  }); // area geometry 处理\n\n  area(primary);\n  line(second);\n  point(pointParams);\n  chart.axis(false);\n  chart.legend(false);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  var _a, _b;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      data = options.data;\n  var seriesData = getTinyData(data);\n  return flow(scale((_a = {}, _a[X_FIELD] = xAxis, _a[Y_FIELD] = yAxis, _a), (_b = {}, _b[X_FIELD] = {\n    type: 'cat'\n  }, _b[Y_FIELD] = adjustYMetaByZero(seriesData, Y_FIELD), _b)))(params);\n}\n/**\n * 迷你面积图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  return flow(pattern('areaStyle'), geometry, meta, tooltip, theme, animation, annotation())(params);\n}","map":{"version":3,"mappings":"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","names":["theme","scale","animation","annotation","tooltip","pattern","flow","deepAssign","area","line","point","X_FIELD","Y_FIELD","getTinyData","adjustYMetaByZero","geometry","params","options","color","areaStyle","pointOptions","lineOptions","pointState","state","seriesData","data","chart","primary","xField","yField","style","second","pointParams","axis","legend","meta","yAxis","_a","xAxis","_b","type","adaptor"],"sourceRoot":"","sources":["../../../src/plots/tiny-area/adaptor.ts"],"sourcesContent":["import { theme, scale, animation, annotation, tooltip, pattern } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { getTinyData } from '../tiny-line/utils';\nimport { adjustYMetaByZero } from '../../utils/data';\nimport { TinyAreaOptions } from './types';\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TinyAreaOptions>): Params<TinyAreaOptions> {\n  const { chart, options } = params;\n  const { data, color, areaStyle, point: pointOptions, line: lineOptions } = options;\n  const pointState = pointOptions?.state;\n\n  const seriesData = getTinyData(data);\n\n  chart.data(seriesData);\n\n  const primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      area: { color, style: areaStyle },\n      line: lineOptions,\n      point: pointOptions,\n    },\n  });\n  const second = deepAssign({}, primary, { options: { tooltip: false } });\n  const pointParams = deepAssign({}, primary, { options: { tooltip: false, state: pointState } });\n\n  // area geometry 处理\n  area(primary);\n  line(second);\n  point(pointParams);\n\n  chart.axis(false);\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<TinyAreaOptions>): Params<TinyAreaOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, data } = options;\n  const seriesData = getTinyData(data);\n\n  return flow(\n    scale(\n      {\n        [X_FIELD]: xAxis,\n        [Y_FIELD]: yAxis,\n      },\n      {\n        [X_FIELD]: {\n          type: 'cat',\n        },\n        [Y_FIELD]: adjustYMetaByZero(seriesData, Y_FIELD),\n      }\n    )\n  )(params);\n}\n\n/**\n * 迷你面积图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TinyAreaOptions>) {\n  return flow(pattern('areaStyle'), geometry, meta, tooltip, theme, animation, annotation())(params);\n}\n"]},"metadata":{},"sourceType":"module"}