{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __extends, __read } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n/**\n * 数据过滤。\n * @ignore\n */\n\nvar DataFilter =\n/** @class */\nfunction (_super) {\n  __extends(DataFilter, _super);\n\n  function DataFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DataFilter.prototype.filterView = function (view, field, filter) {\n    var _this = this; // 只有存在这个 scale 时才生效\n\n\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n\n    if (view.views && view.views.length) {\n      each(view.views, function (subView) {\n        _this.filterView(subView, field, filter);\n      });\n    }\n  };\n  /**\n   * 过滤数据\n   */\n\n\n  DataFilter.prototype.filter = function () {\n    var delegateObject = getDelegationObject(this.context);\n\n    if (delegateObject) {\n      var view = this.context.view;\n      var component = delegateObject.component;\n      var field = component.get('field'); // 列表类的组件能够触发\n\n      if (isList(delegateObject)) {\n        if (field) {\n          var unCheckedItems = component.getItemsByState('unchecked');\n          var scale_1 = getScaleByField(view, field);\n          var names_1 = unCheckedItems.map(function (item) {\n            return item.name;\n          });\n\n          if (names_1.length) {\n            this.filterView(view, field, function (value) {\n              var text = scale_1.getText(value);\n              return !names_1.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        var range = component.getValue();\n\n        var _a = __read(range, 2),\n            min_1 = _a[0],\n            max_1 = _a[1];\n\n        this.filterView(view, field, function (value) {\n          return value >= min_1 && value <= max_1;\n        });\n        view.render(true);\n      }\n    }\n  };\n\n  return DataFilter;\n}(Action);\n\nexport default DataFilter;","map":{"version":3,"mappings":";;AAAA,SAASA,IAAT,QAAqB,YAArB;AAEA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,mBAAT,EAA8BC,eAA9B,EAA+CC,MAA/C,EAAuDC,QAAvD,QAAuE,SAAvE;AAEA;;;;;AAIA;AAAA;AAAA;EAAyBC;;EAAzB;;EA+CC;;EA9CSC,kCAAR,UAAmBC,IAAnB,EAA+BC,KAA/B,EAAsCC,MAAtC,EAA4C;IAA5C,iBAA4C,CAC1C;;;IACA,IAAIF,IAAI,CAACL,eAAL,CAAqBM,KAArB,CAAJ,EAAiC;MAC/BD,IAAI,CAACE,MAAL,CAAYD,KAAZ,EAAmBC,MAAnB;IACD;;IACD,IAAIF,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACG,KAAL,CAAWC,MAA7B,EAAqC;MACnCZ,IAAI,CAACQ,IAAI,CAACG,KAAN,EAAa,UAACE,OAAD,EAAQ;QACvBC,KAAI,CAACC,UAAL,CAAgBF,OAAhB,EAAyBJ,KAAzB,EAAgCC,MAAhC;MACD,CAFG,CAAJ;IAGD;EACF,CAVO;EAWR;;;;;EAGOH,8BAAP;IACE,IAAMS,cAAc,GAAGd,mBAAmB,CAAC,KAAKe,OAAN,CAA1C;;IACA,IAAID,cAAJ,EAAoB;MAClB,IAAMR,IAAI,GAAG,KAAKS,OAAL,CAAaT,IAA1B;MACQ,aAAS,GAAKQ,cAAc,UAA5B;MACR,IAAMP,KAAK,GAAGS,SAAS,CAACC,GAAV,CAAc,OAAd,CAAd,CAHkB,CAIlB;;MACA,IAAIf,MAAM,CAACY,cAAD,CAAV,EAA4B;QAC1B,IAAIP,KAAJ,EAAW;UACT,IAAMW,cAAc,GAAGF,SAAS,CAACG,eAAV,CAA0B,WAA1B,CAAvB;UACA,IAAMC,OAAK,GAAGnB,eAAe,CAACK,IAAD,EAAOC,KAAP,CAA7B;UACA,IAAMc,OAAK,GAAaH,cAAc,CAACI,GAAf,CAAmB,UAACC,IAAD,EAAK;YAAK,WAAI,CAACC,IAAL;UAAS,CAAtC,CAAxB;;UACA,IAAIH,OAAK,CAACX,MAAV,EAAkB;YAChB,KAAKG,UAAL,CAAgBP,IAAhB,EAAsBC,KAAtB,EAA6B,UAACkB,KAAD,EAAM;cACjC,IAAMC,IAAI,GAAGN,OAAK,CAACO,OAAN,CAAcF,KAAd,CAAb;cACA,OAAO,CAACJ,OAAK,CAACO,QAAN,CAAeF,IAAf,CAAR;YACD,CAHD;UAID,CALD,MAKO;YACL,KAAKb,UAAL,CAAgBP,IAAhB,EAAsBC,KAAtB,EAA6B,IAA7B;UACD;;UACDD,IAAI,CAACuB,MAAL,CAAY,IAAZ;QACD;MACF,CAfD,MAeO,IAAI1B,QAAQ,CAACW,cAAD,CAAZ,EAA8B;QACnC,IAAMgB,KAAK,GAAGd,SAAS,CAACe,QAAV,EAAd;;QACM,gBAAaD,KAAb,EAAkB,CAAlB;QAAA,IAACE,KAAG,QAAJ;QAAA,IAAMC,KAAG,QAAT;;QACN,KAAKpB,UAAL,CAAgBP,IAAhB,EAAsBC,KAAtB,EAA6B,UAACkB,KAAD,EAAM;UACjC,OAAOA,KAAK,IAAIO,KAAT,IAAgBP,KAAK,IAAIQ,KAAhC;QACD,CAFD;QAGA3B,IAAI,CAACuB,MAAL,CAAY,IAAZ;MACD;IACF;EACF,CA/BM;;EAgCT;AAAC,CA/CD,CAAyB9B,MAAzB;;AAiDA,eAAeM,UAAf","names":["each","Action","getDelegationObject","getScaleByField","isList","isSlider","__extends","DataFilter","view","field","filter","views","length","subView","_this","filterView","delegateObject","context","component","get","unCheckedItems","getItemsByState","scale_1","names_1","map","item","name","value","text","getText","includes","render","range","getValue","min_1","max_1"],"sourceRoot":"","sources":["../../../../src/interaction/action/data/filter.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { View } from 'src/chart';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n\n/**\n * 数据过滤。\n * @ignore\n */\nclass DataFilter extends Action {\n  private filterView(view: View, field, filter) {\n    // 只有存在这个 scale 时才生效\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n    if (view.views && view.views.length) {\n      each(view.views, (subView) => {\n        this.filterView(subView, field, filter);\n      });\n    }\n  }\n  /**\n   * 过滤数据\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    if (delegateObject) {\n      const view = this.context.view;\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names: string[] = unCheckedItems.map((item) => item.name);\n          if (names.length) {\n            this.filterView(view, field, (value) => {\n              const text = scale.getText(value);\n              return !names.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        this.filterView(view, field, (value) => {\n          return value >= min && value <= max;\n        });\n        view.render(true);\n      }\n    }\n  }\n}\n\nexport default DataFilter;\n"]},"metadata":{},"sourceType":"module"}