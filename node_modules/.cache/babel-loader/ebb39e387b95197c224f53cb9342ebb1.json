{"ast":null,"code":"import { each } from '@antv/util';\nimport { MarkerSymbols } from '../../../util/marker';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { splitPoints } from '../util/split-points';\nimport { drawPoints, SHAPES } from './util';\nvar PointShapeFactory = registerShapeFactory('point', {\n  defaultShapeType: 'hollow-circle',\n  getDefaultPoints: function (pointInfo) {\n    return splitPoints(pointInfo);\n  }\n});\neach(SHAPES, function (shapeName) {\n  // 添加该 shape 对应的 hollow-shape\n  registerShape('point', \"hollow-\".concat(shapeName), {\n    draw: function (cfg, container) {\n      return drawPoints(this, cfg, container, shapeName, true);\n    },\n    getMarker: function (markerCfg) {\n      var color = markerCfg.color;\n      return {\n        symbol: MarkerSymbols[shapeName] || shapeName,\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null\n        }\n      };\n    }\n  });\n});\nexport default PointShapeFactory;","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,YAArB;AAIA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,aAAT,EAAwBC,oBAAxB,QAAoD,SAApD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,QAAnC;AAEA,IAAMC,iBAAiB,GAAGJ,oBAAoB,CAAC,OAAD,EAAU;EACtDK,gBAAgB,EAAE,eADoC;EAEtDC,gBAAgB,EAAhB,UAAiBC,SAAjB,EAAsC;IACpC,OAAON,WAAW,CAACM,SAAD,CAAlB;EACD;AAJqD,CAAV,CAA9C;AAOAV,IAAI,CAACM,MAAD,EAAS,UAACK,SAAD,EAAkB;EAC7B;EACAT,aAAa,CAAC,OAAD,EAAU,iBAAUS,SAAV,CAAV,EAAiC;IAC5CC,IAAI,EAAJ,UAAKC,GAAL,EAAqBC,SAArB,EAAsC;MACpC,OAAOT,UAAU,CAAC,IAAD,EAAOQ,GAAP,EAAYC,SAAZ,EAAuBH,SAAvB,EAAkC,IAAlC,CAAjB;IACD,CAH2C;IAI5CI,SAAS,EAAT,UAAUC,SAAV,EAAmC;MACzB,SAAK,GAAKA,SAAS,MAAnB;MACR,OAAO;QACLC,MAAM,EAAEhB,aAAa,CAACU,SAAD,CAAb,IAA4BA,SAD/B;QAELO,KAAK,EAAE;UACLC,CAAC,EAAE,GADE;UAELC,MAAM,EAAEC,KAFH;UAGLC,IAAI,EAAE;QAHD;MAFF,CAAP;IAQD;EAd2C,CAAjC,CAAb;AAgBD,CAlBG,CAAJ;AAoBA,eAAef,iBAAf","names":["each","MarkerSymbols","registerShape","registerShapeFactory","splitPoints","drawPoints","SHAPES","PointShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","shapeName","draw","cfg","container","getMarker","markerCfg","symbol","style","r","stroke","color","fill"],"sourceRoot":"","sources":["../../../../src/geometry/shape/point/index.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { MarkerSymbols } from '../../../util/marker';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { splitPoints } from '../util/split-points';\nimport { drawPoints, SHAPES } from './util';\n\nconst PointShapeFactory = registerShapeFactory('point', {\n  defaultShapeType: 'hollow-circle',\n  getDefaultPoints(pointInfo: ShapePoint): Point[] {\n    return splitPoints(pointInfo);\n  },\n});\n\neach(SHAPES, (shapeName: string) => {\n  // 添加该 shape 对应的 hollow-shape\n  registerShape('point', `hollow-${shapeName}`, {\n    draw(cfg: ShapeInfo, container: IGroup) {\n      return drawPoints(this, cfg, container, shapeName, true);\n    },\n    getMarker(markerCfg: ShapeMarkerCfg) {\n      const { color } = markerCfg;\n      return {\n        symbol: MarkerSymbols[shapeName] || shapeName,\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null,\n        },\n      };\n    },\n  });\n});\n\nexport default PointShapeFactory;\n"]},"metadata":{},"sourceType":"module"}