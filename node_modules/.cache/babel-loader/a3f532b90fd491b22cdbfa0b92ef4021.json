{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\n\nvar ListState =\n/** @class */\nfunction (_super) {\n  __extends(ListState, _super);\n\n  function ListState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stateName = '';\n    _this.ignoreItemStates = [];\n    return _this;\n  }\n  /** 获取触发的列表组件 */\n\n\n  ListState.prototype.getTriggerListInfo = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var info = null;\n\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component\n      };\n    }\n\n    return info;\n  }; // 获取所有允许执行 Action 的组件\n\n\n  ListState.prototype.getAllowComponents = function () {\n    var _this = this;\n\n    var view = this.context.view;\n    var components = getComponents(view);\n    var rst = [];\n    each(components, function (component) {\n      if (component.isList() && _this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  };\n  /** 是否存在指定的状态 */\n\n\n  ListState.prototype.hasState = function (list, item) {\n    return list.hasState(item, this.stateName);\n  };\n  /** 清理组件的状态 */\n\n\n  ListState.prototype.clearAllComponentsState = function () {\n    var _this = this;\n\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(_this.stateName);\n    });\n  }; // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n\n\n  ListState.prototype.allowSetStateByElement = function (component) {\n    var field = component.get('field');\n\n    if (!field) {\n      return false;\n    }\n\n    if (this.cfg && this.cfg.componentNames) {\n      var name_1 = component.get('name'); // 如果配置了限制的 component name，则要进行检测\n\n      if (this.cfg.componentNames.indexOf(name_1) === -1) {\n        return false;\n      }\n    }\n\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }; // 检测是否允许触发对应的状态改变事件\n\n\n  ListState.prototype.allowSetStateByItem = function (item, list) {\n    var ignoreStates = this.ignoreItemStates;\n\n    if (ignoreStates.length) {\n      var filterStates = ignoreStates.filter(function (state) {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n\n    return true; // 没有定义忽略的状态时，允许\n  }; // 设置组件的 item active\n\n\n  ListState.prototype.setStateByElement = function (component, element, enable) {\n    var field = component.get('field');\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    var text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }; // 设置状态\n\n\n  ListState.prototype.setStateEnable = function (enable) {\n    var _this = this;\n\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      // trigger by element\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        _this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      var delegateObject = getDelegationObject(this.context);\n\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n            component = delegateObject.component;\n\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }; // 多个 item 设置状态\n\n\n  ListState.prototype.setItemsState = function (list, name, enable) {\n    var _this = this;\n\n    var items = list.getItems();\n    each(items, function (item) {\n      if (item.name === name) {\n        _this.setItemState(list, item, enable);\n      }\n    });\n  }; // 单个 item 设置状态\n\n\n  ListState.prototype.setItemState = function (list, item, enable) {\n    list.setItemState(item, this.stateName, enable);\n  };\n  /**\n   * 设置状态\n   */\n\n\n  ListState.prototype.setState = function () {\n    this.setStateEnable(true);\n  };\n  /**\n   * 取消状态\n   */\n\n\n  ListState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  /**\n   * 切换状态\n   */\n\n\n  ListState.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo && triggerInfo.item) {\n      var list = triggerInfo.list,\n          item = triggerInfo.item;\n      var enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  };\n  /**\n   * 取消状态\n   */\n\n\n  ListState.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  };\n\n  return ListState;\n}(Action);\n\nexport default ListState;","map":{"version":3,"mappings":"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","names":["each","Action","getComponents","getCurrentElement","getDelegationObject","getElementValue","isList","getScaleByField","__extends","_this","ListState","delegateObject","context","info","item","list","component","view","components","rst","allowSetStateByElement","push","hasState","stateName","getAllowComponents","clearItemsState","field","get","cfg","componentNames","name_1","indexOf","scale","isCategory","ignoreStates","ignoreItemStates","length","filterStates","filter","state","element","enable","value","text","getText","setItemsState","setStateByElement","allowSetStateByItem","setItemState","name","items","getItems","setStateEnable","triggerInfo","getTriggerListInfo","clearAllComponentsState"],"sourceRoot":"","sources":["../../../../src/interaction/action/component/list-state.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element';\nimport { LooseObject } from '../../../interface';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n\n/** @ignore */\ninterface ListStateCfg {\n  componentNames: string[];\n}\n\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\nclass ListState extends Action<ListStateCfg> {\n  protected stateName: string = '';\n  protected ignoreItemStates = [];\n\n  /** 获取触发的列表组件 */\n  protected getTriggerListInfo() {\n    const delegateObject = getDelegationObject(this.context);\n    let info: LooseObject = null;\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component,\n      };\n    }\n    return info;\n  }\n  // 获取所有允许执行 Action 的组件\n  protected getAllowComponents() {\n    const view = this.context.view;\n    const components = getComponents(view);\n    const rst = [];\n    each(components, (component) => {\n      if (component.isList() && this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  }\n\n  /** 是否存在指定的状态 */\n  protected hasState(list: IList, item: ListItem) {\n    return list.hasState(item, this.stateName);\n  }\n\n  /** 清理组件的状态 */\n  protected clearAllComponentsState() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(this.stateName);\n    });\n  }\n\n  // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n  protected allowSetStateByElement(component): boolean {\n    const field = component.get('field');\n    if (!field) {\n      return false;\n    }\n    if (this.cfg && this.cfg.componentNames) {\n      const name = component.get('name');\n      // 如果配置了限制的 component name，则要进行检测\n      if (this.cfg.componentNames.indexOf(name) === -1) {\n        return false;\n      }\n    }\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }\n  // 检测是否允许触发对应的状态改变事件\n  private allowSetStateByItem(item: ListItem, list: IList) {\n    const ignoreStates = this.ignoreItemStates;\n    if (ignoreStates.length) {\n      const filterStates = ignoreStates.filter((state) => {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n    return true; // 没有定义忽略的状态时，允许\n  }\n\n  // 设置组件的 item active\n  private setStateByElement(component, element: Element, enable: boolean) {\n    const field = component.get('field');\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    const text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }\n\n  // 设置状态\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // trigger by element\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      const delegateObject = getDelegationObject(this.context);\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }\n\n  // 多个 item 设置状态\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    const items = list.getItems();\n    each(items, (item) => {\n      if (item.name === name) {\n        this.setItemState(list, item, enable);\n      }\n    });\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    list.setItemState(item, this.stateName, enable);\n  }\n\n  /**\n   * 设置状态\n   */\n  public setState() {\n    this.setStateEnable(true);\n  }\n\n  /**\n   * 取消状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n      const enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  }\n\n  /**\n   * 取消状态\n   */\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  }\n}\n\nexport default ListState;\n"]},"metadata":{},"sourceType":"module"}