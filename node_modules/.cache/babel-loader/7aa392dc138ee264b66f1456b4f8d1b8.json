{"ast":null,"code":"import { each } from '@antv/util';\n/**\n * @ignore\n * Gets cpath\n * @param from\n * @param to\n * @returns\n */\n\nexport function getCPath(from, to) {\n  return ['C', from.x * 1 / 2 + to.x * 1 / 2, from.y, from.x * 1 / 2 + to.x * 1 / 2, to.y, to.x, to.y];\n}\n/**\n * @ignore\n * Gets qpath\n * @param to\n * @param center\n * @returns\n */\n\nexport function getQPath(to, center) {\n  var points = [];\n  points.push({\n    x: center.x,\n    y: center.y\n  });\n  points.push(to);\n  var sub = ['Q'];\n  each(points, function (point) {\n    sub.push(point.x, point.y);\n  });\n  return sub;\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,YAArB;AAGA;;;;;;;;AAOA,OAAM,SAAUC,QAAV,CAAmBC,IAAnB,EAAgCC,EAAhC,EAAyC;EAC7C,OAAO,CAAC,GAAD,EAAOD,IAAI,CAACE,CAAL,GAAS,CAAV,GAAe,CAAf,GAAoBD,EAAE,CAACC,CAAH,GAAO,CAAR,GAAa,CAAtC,EAAyCF,IAAI,CAACG,CAA9C,EAAkDH,IAAI,CAACE,CAAL,GAAS,CAAV,GAAe,CAAf,GAAoBD,EAAE,CAACC,CAAH,GAAO,CAAR,GAAa,CAAjF,EAAoFD,EAAE,CAACE,CAAvF,EAA0FF,EAAE,CAACC,CAA7F,EAAgGD,EAAE,CAACE,CAAnG,CAAP;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUC,QAAV,CAAmBH,EAAnB,EAA8BI,MAA9B,EAA2C;EAC/C,IAAMC,MAAM,GAAG,EAAf;EACAA,MAAM,CAACC,IAAP,CAAY;IACVL,CAAC,EAAEG,MAAM,CAACH,CADA;IAEVC,CAAC,EAAEE,MAAM,CAACF;EAFA,CAAZ;EAIAG,MAAM,CAACC,IAAP,CAAYN,EAAZ;EAEA,IAAMO,GAAG,GAAG,CAAC,GAAD,CAAZ;EACAV,IAAI,CAACQ,MAAD,EAAS,UAACG,KAAD,EAAM;IACjBD,GAAG,CAACD,IAAJ,CAASE,KAAK,CAACP,CAAf,EAAkBO,KAAK,CAACN,CAAxB;EACD,CAFG,CAAJ;EAIA,OAAOK,GAAP;AACD","names":["each","getCPath","from","to","x","y","getQPath","center","points","push","sub","point"],"sourceRoot":"","sources":["../../../../src/geometry/shape/edge/util.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { Point } from '../../../interface';\n\n/**\n * @ignore\n * Gets cpath\n * @param from\n * @param to\n * @returns\n */\nexport function getCPath(from: Point, to: Point) {\n  return ['C', (from.x * 1) / 2 + (to.x * 1) / 2, from.y, (from.x * 1) / 2 + (to.x * 1) / 2, to.y, to.x, to.y];\n}\n\n/**\n * @ignore\n * Gets qpath\n * @param to\n * @param center\n * @returns\n */\nexport function getQPath(to: Point, center: Point) {\n  const points = [];\n  points.push({\n    x: center.x,\n    y: center.y,\n  });\n  points.push(to);\n\n  const sub = ['Q'];\n  each(points, (point) => {\n    sub.push(point.x, point.y);\n  });\n\n  return sub;\n}\n"]},"metadata":{},"sourceType":"module"}