{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\n\nvar ElementSingleState =\n/** @class */\nfunction (_super) {\n  __extends(ElementSingleState, _super);\n\n  function ElementSingleState() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ElementSingleState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      } // 仅支持单个状态量的元素，只能由 element 触发\n\n\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  };\n  /**\n   * 切换选中，只允许选中一个\n   */\n\n\n  ElementSingleState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      var hasState = this.hasState(element); // 提前获取状态\n\n      if (!hasState) {\n        this.clear();\n      }\n\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n\n\n  ElementSingleState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n\n  return ElementSingleState;\n}(StateBase);\n\nexport default ElementSingleState;","map":{"version":3,"mappings":";AAAA,SAASA,iBAAT,EAA4BC,eAA5B,QAAmD,SAAnD;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA;;;;;;AAKA;AAAA;AAAA;EAAiCC;;EAAjC;;EAsCC;;EArCWC,8CAAV,UAAyBC,MAAzB,EAAwC;IACtC,IAAMC,OAAO,GAAGN,iBAAiB,CAAC,KAAKO,OAAN,CAAjC;;IACA,IAAID,OAAJ,EAAa;MACX;MACA,IAAI,CAACL,eAAe,CAAC,KAAKM,OAAN,CAApB,EAAoC;QAClC;MACD,CAJU,CAKX;;;MACA,IAAIF,MAAJ,EAAY;QACV,KAAKG,KAAL;QACA,KAAKC,eAAL,CAAqBH,OAArB,EAA8B,IAA9B;MACD,CAHD,MAGO,IAAI,KAAKI,QAAL,CAAcJ,OAAd,CAAJ,EAA4B;QACjC,KAAKG,eAAL,CAAqBH,OAArB,EAA8B,KAA9B;MACD;IACF;EACF,CAfS;EAiBV;;;;;EAGOF,sCAAP;IACE,IAAME,OAAO,GAAGN,iBAAiB,CAAC,KAAKO,OAAN,CAAjC;;IACA,IAAID,OAAJ,EAAa;MACX,IAAMI,QAAQ,GAAG,KAAKA,QAAL,CAAcJ,OAAd,CAAjB,CADW,CAC8B;;MACzC,IAAI,CAACI,QAAL,EAAe;QACb,KAAKF,KAAL;MACD;;MACD,KAAKC,eAAL,CAAqBH,OAArB,EAA8B,CAACI,QAA/B;IACD;EACF,CATM;EAWP;;;;;EAGON,qCAAP;IACE,KAAKO,cAAL,CAAoB,KAApB;EACD,CAFM;;EAGT;AAAC,CAtCD,CAAiCT,SAAjC;;AAwCA,eAAeE,kBAAf","names":["getCurrentElement","isElementChange","StateBase","__extends","ElementSingleState","enable","element","context","clear","setElementState","hasState","setStateEnable"],"sourceRoot":"","sources":["../../../../src/interaction/action/element/single-state.ts"],"sourcesContent":["import { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\nclass ElementSingleState extends StateBase {\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      }\n      // 仅支持单个状态量的元素，只能由 element 触发\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  }\n\n  /**\n   * 切换选中，只允许选中一个\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = this.hasState(element); // 提前获取状态\n      if (!hasState) {\n        this.clear();\n      }\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementSingleState;\n"]},"metadata":{},"sourceType":"module"}