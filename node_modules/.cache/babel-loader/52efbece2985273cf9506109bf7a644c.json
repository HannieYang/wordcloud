{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { __assign, __awaiter, __extends, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport { getAdjust as getAdjustClass } from '@antv/adjust';\nimport { getAttribute as getAttributeClass } from '@antv/attr';\nimport { clone, deepMix, each, flatten, get, isArray, isEmpty, isEqual, isFunction, isNil, isNumber, isObject, isPlainObject, isString, set } from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GEOMETRY_LIFE_CIRCLE, GROUP_ATTRS } from '../constant';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nimport { diff } from './util/diff';\nimport { inferScaleType } from '../util/scale';\nimport { getXDimensionLength } from '../util/coordinate';\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\n\nvar Geometry =\n/** @class */\nfunction (_super) {\n  __extends(Geometry, _super);\n  /**\n   * 创建 Geometry 实例。\n   * @param cfg\n   */\n\n\n  function Geometry(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /** Geometry 几何标记类型。 */\n\n\n    _this.type = 'base'; // 内部产生的属性\n\n    /** Attribute map  */\n\n    _this.attributes = {};\n    /** Element map */\n\n    _this.elements = [];\n    /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n\n    _this.elementsMap = {};\n    /** animate 配置项 */\n\n    _this.animateOption = true;\n    /** 图形属性映射配置 */\n\n    _this.attributeOption = {};\n    /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n\n    _this.lastElementsMap = {};\n    /** 是否生成多个点来绘制图形。 */\n\n    _this.generatePoints = false;\n    /** 存储发生图形属性映射前的数据 */\n\n    _this.beforeMappingData = null;\n    _this.adjusts = {};\n    _this.idFields = [];\n    _this.hasSorted = false;\n    _this.isCoordinateChanged = false;\n    var container = cfg.container,\n        labelsContainer = cfg.labelsContainer,\n        coordinate = cfg.coordinate,\n        data = cfg.data,\n        _a = cfg.sortable,\n        sortable = _a === void 0 ? false : _a,\n        _b = cfg.visible,\n        visible = _b === void 0 ? true : _b,\n        theme = cfg.theme,\n        _c = cfg.scales,\n        scales = _c === void 0 ? {} : _c,\n        _d = cfg.scaleDefs,\n        scaleDefs = _d === void 0 ? {} : _d,\n        // 柱状图间隔与宽度相关配置\n    intervalPadding = cfg.intervalPadding,\n        dodgePadding = cfg.dodgePadding,\n        maxColumnWidth = cfg.maxColumnWidth,\n        minColumnWidth = cfg.minColumnWidth,\n        columnWidthRatio = cfg.columnWidthRatio,\n        roseWidthRatio = cfg.roseWidthRatio,\n        multiplePieWidthRatio = cfg.multiplePieWidthRatio,\n        zIndexReversed = cfg.zIndexReversed,\n        sortZIndex = cfg.sortZIndex,\n        useDeferredLabel = cfg.useDeferredLabel;\n    _this.container = container;\n    _this.labelsContainer = labelsContainer;\n    _this.coordinate = coordinate;\n    _this.data = data;\n    _this.sortable = sortable;\n    _this.visible = visible;\n    _this.userTheme = theme;\n    _this.scales = scales;\n    _this.scaleDefs = scaleDefs; // 柱状图间隔与宽度相关配置\n\n    _this.intervalPadding = intervalPadding;\n    _this.dodgePadding = dodgePadding;\n    _this.maxColumnWidth = maxColumnWidth;\n    _this.minColumnWidth = minColumnWidth;\n    _this.columnWidthRatio = columnWidthRatio;\n    _this.roseWidthRatio = roseWidthRatio;\n    _this.multiplePieWidthRatio = multiplePieWidthRatio;\n    _this.zIndexReversed = zIndexReversed;\n    _this.sortZIndex = sortZIndex;\n    _this.useDeferredLabel = useDeferredLabel ? typeof useDeferredLabel === 'number' ? useDeferredLabel : Infinity : null;\n    return _this;\n  }\n  /**\n   * 配置 position 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n   * geometry.position('x*y');\n   * geometry.position([ 'x', 'y' ]);\n   * geometry.position({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   *\n   * @param cfg 映射规则\n   * @returns\n   */\n\n\n  Geometry.prototype.position = function (cfg) {\n    var positionCfg = cfg;\n\n    if (!isPlainObject(cfg)) {\n      // 字符串字段或者数组字段\n      positionCfg = {\n        fields: parseFields(cfg)\n      };\n    }\n\n    var fields = get(positionCfg, 'fields');\n\n    if (fields.length === 1) {\n      // 默认填充一维 1*xx\n      fields.unshift('1');\n      set(positionCfg, 'fields', fields);\n    }\n\n    set(this.attributeOption, 'position', positionCfg);\n    return this;\n  };\n\n  Geometry.prototype.color = function (field, cfg) {\n    this.createAttrOption('color', field, cfg);\n    return this;\n  };\n\n  Geometry.prototype.shape = function (field, cfg) {\n    this.createAttrOption('shape', field, cfg);\n    return this;\n  };\n\n  Geometry.prototype.size = function (field, cfg) {\n    this.createAttrOption('size', field, cfg);\n    return this;\n  };\n  /**\n   * 设置数据调整方式。G2 目前内置了四种类型：\n   * 1. dodge\n   * 2. stack\n   * 3. symmetric\n   * 4. jitter\n   *\n   *\n   * **Tip**\n   * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('dodge', {\n   *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n   *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n   * });\n   * ```\n   *\n   * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('stack', {\n   *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * geometry.adjust('stack');\n   *\n   * geometry.adjust({\n   *   type: 'stack',\n   *   reverseOrder: false,\n   * });\n   *\n   * // 组合使用 adjust\n   * geometry.adjust([ 'stack', 'dodge' ]);\n   *\n   * geometry.adjust([\n   *   { type: 'stack' },\n   *   { type: 'dodge', dodgeBy: 'x' },\n   * ]);\n   * ```\n   *\n   * @param adjustCfg 数据调整配置\n   * @returns\n   */\n\n\n  Geometry.prototype.adjust = function (adjustCfg) {\n    var adjusts = adjustCfg;\n\n    if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n      adjusts = [adjustCfg];\n    }\n\n    each(adjusts, function (adjust, index) {\n      if (!isObject(adjust)) {\n        adjusts[index] = {\n          type: adjust\n        };\n      }\n    });\n    this.adjustOption = adjusts;\n    return this;\n  };\n\n  Geometry.prototype.style = function (field, styleFunc) {\n    if (isString(field)) {\n      var fields = parseFields(field);\n      this.styleOption = {\n        fields: fields,\n        callback: styleFunc\n      };\n    } else {\n      var _a = field,\n          fields = _a.fields,\n          callback = _a.callback,\n          cfg = _a.cfg;\n\n      if (fields || callback || cfg) {\n        this.styleOption = field;\n      } else {\n        this.styleOption = {\n          cfg: field\n        };\n      }\n    }\n\n    return this;\n  };\n\n  Geometry.prototype.tooltip = function (field, cfg) {\n    if (isString(field)) {\n      var fields = parseFields(field);\n      this.tooltipOption = {\n        fields: fields,\n        callback: cfg\n      };\n    } else {\n      this.tooltipOption = field;\n    }\n\n    return this;\n  };\n  /**\n   * Geometry 动画配置。\n   *\n   * + `animate(false)` 关闭动画\n   * + `animate(true)` 开启动画，默认开启。\n   *\n   * 我们将动画分为四个场景：\n   * 1. appear: 图表第一次加载时的入场动画；\n   * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n   * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n   * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n   *\n   * @example\n   * ```typescript\n   * animate({\n   *   enter: {\n   *     duration: 1000, // enter 动画执行时间\n   *   },\n   *   leave: false, // 关闭 leave 销毁动画\n   * });\n   * ```\n   *\n   * @param cfg 动画配置\n   * @returns\n   */\n\n\n  Geometry.prototype.animate = function (cfg) {\n    this.animateOption = cfg;\n    return this;\n  };\n\n  Geometry.prototype.label = function (field, secondParam, thirdParam) {\n    if (isString(field)) {\n      var labelOption = {};\n      var fields = parseFields(field);\n      labelOption.fields = fields;\n\n      if (isFunction(secondParam)) {\n        labelOption.callback = secondParam;\n      } else if (isPlainObject(secondParam)) {\n        labelOption.cfg = secondParam;\n      }\n\n      if (thirdParam) {\n        labelOption.cfg = thirdParam;\n      }\n\n      this.labelOption = labelOption;\n    } else {\n      this.labelOption = field;\n    }\n\n    return this;\n  };\n  /**\n   * 设置状态对应的样式。\n   *\n   * @example\n   * ```ts\n   * chart.interval().state({\n   *   selected: {\n   *     animate: { duration: 100, easing: 'easeLinear' },\n   *     style: {\n   *       lineWidth: 2,\n   *       stroke: '#000',\n   *     },\n   *   },\n   * });\n   * ```\n   *\n   * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n   * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n   *\n   * ```ts\n   * chart.interval().shape('groupShape').state({\n   *   selected: {\n   *     style: {\n   *       0: { lineWidth: 2 },\n   *       1: { fillOpacity: 1 },\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg 状态样式\n   */\n\n\n  Geometry.prototype.state = function (cfg) {\n    this.stateOption = cfg;\n    return this;\n  };\n  /**\n   * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\n   *\n   * @example\n   * ```ts\n   * chart.interval().customInfo({ yourData: 'hello, g2!' });\n   * ```\n   *\n   * 然后在自定义 shape 的时候，可以拿到这个信息。\n   *\n   * ```ts\n   * registerShape('interval', 'your-shape', {\n   *   draw(shapeInfo, container) {\n   *     const { customInfo } = shapeInfo;\n   *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg\n   */\n\n\n  Geometry.prototype.customInfo = function (cfg) {\n    this.customOption = cfg;\n    return this;\n  };\n  /**\n   * 初始化 Geomtry 实例：\n   * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n   */\n\n\n  Geometry.prototype.init = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    this.setCfg(cfg);\n    this.initAttributes(); // 创建图形属性\n    // 数据加工：分组 -> 数字化 -> adjust\n\n    this.processData(this.data); // 调整 scale\n\n    this.adjustScale();\n  };\n  /**\n   * Geometry 更新。\n   * @param [cfg] 更新的配置\n   */\n\n\n  Geometry.prototype.update = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    var data = cfg.data,\n        isDataChanged = cfg.isDataChanged,\n        isCoordinateChanged = cfg.isCoordinateChanged;\n\n    var _a = this,\n        attributeOption = _a.attributeOption,\n        lastAttributeOption = _a.lastAttributeOption;\n\n    if (!isEqual(attributeOption, lastAttributeOption)) {\n      // 映射发生改变，则重新创建图形属性\n      this.init(cfg);\n    } else if (data && (isDataChanged || !isEqual(data, this.data))) {\n      // 数据发生变化\n      this.setCfg(cfg);\n      this.initAttributes(); // 创建图形属性\n\n      this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n    } else {\n      // 有可能 coordinate 变化\n      this.setCfg(cfg);\n    } // 调整 scale\n\n\n    this.adjustScale();\n    this.isCoordinateChanged = isCoordinateChanged;\n  };\n  /**\n   * 将原始数据映射至图形空间，同时创建图形对象。\n   */\n\n\n  Geometry.prototype.paint = function (isUpdate) {\n    var _this = this;\n\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    if (this.animateOption) {\n      this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n    }\n\n    this.defaultSize = undefined;\n    this.elementsMap = {};\n    this.elements = [];\n    var offscreenGroup = this.getOffscreenGroup();\n    offscreenGroup.clear();\n    var beforeMappingData = this.beforeMappingData;\n    var dataArray = this.beforeMapping(beforeMappingData);\n    this.dataArray = new Array(dataArray.length);\n\n    for (var i = 0; i < dataArray.length; i++) {\n      var data = dataArray[i];\n      this.dataArray[i] = this.mapping(data);\n    }\n\n    this.updateElements(this.dataArray, isUpdate);\n    this.lastElementsMap = this.elementsMap;\n\n    if (this.canDoGroupAnimation(isUpdate)) {\n      // 如果用户没有配置 appear.animation，就默认走整体动画\n      var container = this.container;\n      var type = this.type;\n      var coordinate = this.coordinate;\n      var animateCfg = get(this.animateOption, 'appear');\n      var yScale = this.getYScale();\n      var yMinPoint = coordinate.convert({\n        x: 0,\n        y: yScale.scale(this.getYMinValue())\n      });\n      doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n    } // 添加 label\n\n\n    if (this.labelOption) {\n      var deferred = this.useDeferredLabel;\n\n      var callback = function () {\n        return _this.renderLabels(flatten(_this.dataArray), isUpdate);\n      }.bind(this);\n\n      if (typeof deferred === 'number') {\n        // Use `requestIdleCallback` to render labels in idle time (like react fiber)\n        var timeout = typeof deferred === 'number' && deferred !== Infinity ? deferred : 0;\n\n        if (!window.requestIdleCallback) {\n          setTimeout(callback, timeout);\n        } else {\n          var options = timeout && timeout !== Infinity ? {\n            timeout: timeout\n          } : undefined;\n          window.requestIdleCallback(callback, options);\n        }\n      } else {\n        callback();\n      }\n    } // 缓存，用于更新\n\n\n    this.lastAttributeOption = __assign({}, this.attributeOption);\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n   * @override\n   */\n\n\n  Geometry.prototype.clear = function () {\n    var _a = this,\n        container = _a.container,\n        geometryLabel = _a.geometryLabel,\n        offscreenGroup = _a.offscreenGroup;\n\n    if (container) {\n      container.clear();\n    }\n\n    if (geometryLabel) {\n      geometryLabel.clear();\n    }\n\n    if (offscreenGroup) {\n      offscreenGroup.clear();\n    } // 属性恢复至出厂状态\n\n\n    this.scaleDefs = undefined;\n    this.attributes = {};\n    this.scales = {};\n    this.elementsMap = {};\n    this.lastElementsMap = {};\n    this.elements = [];\n    this.adjusts = {};\n    this.dataArray = null;\n    this.beforeMappingData = null;\n    this.lastAttributeOption = undefined;\n    this.defaultSize = undefined;\n    this.idFields = [];\n    this.groupScales = undefined;\n    this.hasSorted = false;\n    this.isCoordinateChanged = false;\n  };\n  /**\n   * 销毁 Geometry 实例。\n   */\n\n\n  Geometry.prototype.destroy = function () {\n    this.clear();\n    var container = this.container;\n    container.remove(true);\n\n    if (this.offscreenGroup) {\n      this.offscreenGroup.remove(true);\n      this.offscreenGroup = null;\n    }\n\n    if (this.geometryLabel) {\n      this.geometryLabel.destroy();\n      this.geometryLabel = null;\n    }\n\n    this.theme = undefined;\n    this.shapeFactory = undefined;\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取决定分组的图形属性对应的 scale 实例。\n   * @returns\n   */\n\n\n  Geometry.prototype.getGroupScales = function () {\n    return this.groupScales;\n  };\n  /**\n   * 根据名字获取图形属性实例。\n   */\n\n\n  Geometry.prototype.getAttribute = function (name) {\n    return this.attributes[name];\n  };\n  /** 获取 x 轴对应的 scale 实例。 */\n\n\n  Geometry.prototype.getXScale = function () {\n    return this.getAttribute('position').scales[0];\n  };\n  /** 获取 y 轴对应的 scale 实例。 */\n\n\n  Geometry.prototype.getYScale = function () {\n    return this.getAttribute('position').scales[1];\n  };\n  /**\n   * 获取决定分组的图形属性实例。\n   */\n\n\n  Geometry.prototype.getGroupAttributes = function () {\n    var rst = [];\n    each(this.attributes, function (attr) {\n      if (GROUP_ATTRS.includes(attr.type)) {\n        rst.push(attr);\n      }\n    });\n    return rst;\n  };\n  /** 获取图形属性默认的映射值。 */\n\n\n  Geometry.prototype.getDefaultValue = function (attrName) {\n    var value;\n    var attr = this.getAttribute(attrName);\n\n    if (attr && isEmpty(attr.scales)) {\n      // 获取映射至常量的值\n      value = attr.values[0];\n    }\n\n    return value;\n  };\n  /**\n   * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n   * @param attr Attribute 图形属性实例。\n   * @param obj 需要进行映射的原始数据。\n   * @returns\n   */\n\n\n  Geometry.prototype.getAttributeValues = function (attr, obj) {\n    var params = [];\n    var scales = attr.scales;\n\n    for (var index = 0, length_1 = scales.length; index < length_1; index++) {\n      var scale = scales[index];\n      var field = scale.field;\n\n      if (scale.isIdentity) {\n        params.push(scale.values);\n      } else {\n        params.push(obj[field]);\n      }\n    }\n\n    return attr.mapping.apply(attr, __spreadArray([], __read(params), false));\n  };\n  /**\n   * 获取对应的 adjust 实例\n   * @param adjustType\n   * @returns\n   */\n\n\n  Geometry.prototype.getAdjust = function (adjustType) {\n    return this.adjusts[adjustType];\n  };\n  /**\n   * 获得 coordinate 实例\n   * @returns\n   */\n\n\n  Geometry.prototype.getCoordinate = function () {\n    return this.coordinate;\n  };\n\n  Geometry.prototype.getData = function () {\n    return this.data;\n  };\n  /**\n   * 获取 shape 对应的 marker 样式。\n   * @param shapeName shape 具体名字\n   * @param cfg marker 信息\n   * @returns\n   */\n\n\n  Geometry.prototype.getShapeMarker = function (shapeName, cfg) {\n    var shapeFactory = this.getShapeFactory();\n    return shapeFactory.getMarker(shapeName, cfg);\n  };\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n\n\n  Geometry.prototype.getElementsBy = function (condition) {\n    return this.elements.filter(function (element) {\n      return condition(element);\n    });\n  };\n  /**\n   * 获取 Geometry 的所有 Elements。\n   *\n   * ```typescript\n   * getElements();\n   * ```\n   */\n\n\n  Geometry.prototype.getElements = function () {\n    return this.elements;\n  };\n  /**\n   * 获取数据对应的唯一 id。\n   * @param data Element 对应的绘制数据\n   * @returns\n   */\n\n\n  Geometry.prototype.getElementId = function (data) {\n    data = isArray(data) ? data[0] : data;\n    var originData = data[FIELD_ORIGIN]; // 如果用户声明了使用哪些字段作为 id 值\n\n    if (this.idFields.length) {\n      var elementId = originData[this.idFields[0]];\n\n      for (var index = 1; index < this.idFields.length; index++) {\n        elementId += '-' + originData[this.idFields[index]];\n      }\n\n      return elementId;\n    }\n\n    var type = this.type;\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var xField = xScale.field || 'x';\n    var yField = yScale.field || 'y';\n    var yVal = originData[yField];\n    var xVal;\n\n    if (xScale.type === 'identity') {\n      xVal = xScale.values[0];\n    } else {\n      xVal = originData[xField];\n    }\n\n    var id;\n\n    if (type === 'interval' || type === 'schema') {\n      id = \"\".concat(xVal);\n    } else if (type === 'line' || type === 'area' || type === 'path') {\n      id = type;\n    } else {\n      id = \"\".concat(xVal, \"-\").concat(yVal);\n    }\n\n    var groupScales = this.groupScales;\n\n    for (var index = 0, length_2 = groupScales.length; index < length_2; index++) {\n      var groupScale = groupScales[index];\n      var field = groupScale.field;\n      id = \"\".concat(id, \"-\").concat(originData[field]);\n    } // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n\n\n    var dodgeAdjust = this.getAdjust('dodge');\n\n    if (dodgeAdjust) {\n      var dodgeBy = dodgeAdjust.dodgeBy;\n\n      if (dodgeBy) {\n        id = \"\".concat(id, \"-\").concat(originData[dodgeBy]);\n      }\n    }\n\n    if (this.getAdjust('jitter')) {\n      id = \"\".concat(id, \"-\").concat(data.x, \"-\").concat(data.y);\n    }\n\n    return id;\n  };\n  /**\n   * 获取所有需要创建 scale 的字段名称。\n   */\n\n\n  Geometry.prototype.getScaleFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n\n    var _a = this,\n        attributeOption = _a.attributeOption,\n        labelOption = _a.labelOption,\n        tooltipOption = _a.tooltipOption; // 获取图形属性上的 fields\n\n\n    for (var attributeType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attributeType)) {\n        var eachOpt = attributeOption[attributeType];\n\n        if (eachOpt.fields) {\n          uniq(eachOpt.fields, fields, tmpMap);\n        } else if (eachOpt.values) {\n          // 考虑 size(10), shape('circle') 等场景\n          uniq(eachOpt.values, fields, tmpMap);\n        }\n      }\n    } // 获取 label 上的字段\n\n\n    if (labelOption && labelOption.fields) {\n      uniq(labelOption.fields, fields, tmpMap);\n    } // 获取 tooltip 上的字段\n\n\n    if (isObject(tooltipOption) && tooltipOption.fields) {\n      uniq(tooltipOption.fields, fields, tmpMap);\n    }\n\n    return fields;\n  };\n  /**\n   * 显示或者隐藏 geometry。\n   * @param visible\n   */\n\n\n  Geometry.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n\n    var elements = this.elements;\n\n    for (var index = 0, length_3 = elements.length; index < length_3; index++) {\n      var element = elements[index];\n      element.changeVisible(visible);\n    }\n\n    if (visible) {\n      if (this.container) {\n        this.container.show();\n      }\n\n      if (this.labelsContainer) {\n        this.labelsContainer.show();\n      }\n    } else {\n      if (this.container) {\n        this.container.hide();\n      }\n\n      if (this.labelsContainer) {\n        this.labelsContainer.hide();\n      }\n    }\n  };\n  /**\n   * 获得所有的字段\n   */\n\n\n  Geometry.prototype.getFields = function () {\n    var uniqMap = new Map();\n    var fields = [];\n    Object.values(this.attributeOption).forEach(function (cfg) {\n      var fs = (cfg === null || cfg === void 0 ? void 0 : cfg.fields) || [];\n      fs.forEach(function (f) {\n        if (!uniqMap.has(f)) {\n          fields.push(f);\n        }\n\n        uniqMap.set(f, true);\n      });\n    }, []);\n    return fields;\n  };\n  /**\n   * 获取当前配置中的所有分组 & 分类的字段。\n   * @return fields string[]\n   */\n\n\n  Geometry.prototype.getGroupFields = function () {\n    var groupFields = [];\n    var tmpMap = new Map(); // 用于去重过滤\n\n    for (var index = 0, length_4 = GROUP_ATTRS.length; index < length_4; index++) {\n      var attributeName = GROUP_ATTRS[index];\n      var cfg = this.attributeOption[attributeName];\n\n      if (cfg && cfg.fields) {\n        uniq(cfg.fields, groupFields, tmpMap);\n      }\n    }\n\n    return groupFields;\n  };\n  /**\n   * 获得图形的 x y 字段。\n   */\n\n\n  Geometry.prototype.getXYFields = function () {\n    var _a = __read(this.attributeOption.position.fields, 2),\n        x = _a[0],\n        y = _a[1];\n\n    return [x, y];\n  };\n  /**\n   * x 字段\n   * @returns\n   */\n\n\n  Geometry.prototype.getXField = function () {\n    return get(this.getXYFields(), [0]);\n  };\n  /**\n   * y 字段\n   * @returns\n   */\n\n\n  Geometry.prototype.getYField = function () {\n    return get(this.getXYFields(), [1]);\n  };\n  /**\n   * 获取该 Geometry 下所有生成的 shapes。\n   * @returns shapes\n   */\n\n\n  Geometry.prototype.getShapes = function () {\n    return this.elements.map(function (element) {\n      return element.shape;\n    });\n  };\n  /**\n   * 获取虚拟 Group。\n   * @returns\n   */\n\n\n  Geometry.prototype.getOffscreenGroup = function () {\n    if (!this.offscreenGroup) {\n      var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n\n      this.offscreenGroup = new GroupCtor({});\n    }\n\n    return this.offscreenGroup;\n  }; // 对数据进行排序\n\n\n  Geometry.prototype.sort = function (mappingArray) {\n    if (!this.hasSorted) {\n      // 未发生过排序\n      var xScale_1 = this.getXScale();\n      var xField_1 = xScale_1.field;\n\n      for (var index = 0; index < mappingArray.length; index++) {\n        var itemArr = mappingArray[index];\n        itemArr.sort(function (obj1, obj2) {\n          return xScale_1.translate(obj1[FIELD_ORIGIN][xField_1]) - xScale_1.translate(obj2[FIELD_ORIGIN][xField_1]);\n        });\n      }\n    }\n\n    this.hasSorted = true;\n  };\n  /**\n   * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n   */\n\n\n  Geometry.prototype.adjustScale = function () {\n    var yScale = this.getYScale(); // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n\n    if (yScale && this.getAdjust('stack')) {\n      this.updateStackRange(yScale, this.beforeMappingData);\n    }\n  };\n  /**\n   * 获取当前 Geometry 对应的 Shape 工厂实例。\n   */\n\n\n  Geometry.prototype.getShapeFactory = function () {\n    var shapeType = this.shapeType;\n\n    if (!getShapeFactory(shapeType)) {\n      return;\n    }\n\n    if (!this.shapeFactory) {\n      this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n    } // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n\n\n    this.shapeFactory.coordinate = this.coordinate; // theme 原因同上\n\n    this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n    return this.shapeFactory;\n  };\n  /**\n   * 获取每个 Shape 对应的关键点数据。\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n\n\n  Geometry.prototype.createShapePointsCfg = function (obj) {\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var x = this.normalizeValues(obj[xScale.field], xScale);\n    var y; // 存在没有 y 的情况\n\n    if (yScale) {\n      y = this.normalizeValues(obj[yScale.field], yScale);\n    } else {\n      y = obj.y ? obj.y : 0.1;\n    }\n\n    return {\n      x: x,\n      y: y,\n      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined\n    };\n  };\n  /**\n   * 创建 Element 实例。\n   * @param mappingDatum Element 对应的绘制数据\n   * @param [isUpdate] 是否处于更新阶段\n   * @returns element 返回创建的 Element 实例\n   */\n\n\n  Geometry.prototype.createElement = function (mappingDatum, index, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    var container = this.container;\n    var shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n\n    var shapeFactory = this.getShapeFactory();\n    var element = new Element({\n      shapeFactory: shapeFactory,\n      container: container,\n      offscreenGroup: this.getOffscreenGroup(),\n      elementIndex: index\n    });\n    element.animate = this.animateOption;\n    element.geometry = this;\n    element.draw(shapeCfg, isUpdate); // 绘制\n\n    return element;\n  };\n  /**\n   * 获取每条数据对应的图形绘制数据。\n   * @param mappingDatum 映射后的数据\n   * @returns draw cfg\n   */\n\n\n  Geometry.prototype.getDrawCfg = function (mappingDatum) {\n    var originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n\n    var cfg = {\n      mappingData: mappingDatum,\n      data: originData,\n      x: mappingDatum.x,\n      y: mappingDatum.y,\n      color: mappingDatum.color,\n      size: mappingDatum.size,\n      isInCircle: this.coordinate.isPolar,\n      customInfo: this.customOption\n    };\n    var shapeName = mappingDatum.shape;\n\n    if (!shapeName && this.getShapeFactory()) {\n      shapeName = this.getShapeFactory().defaultShapeType;\n    }\n\n    cfg.shape = shapeName; // 获取默认样式\n\n    var theme = this.theme.geometries[this.shapeType];\n    cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n\n    if (!cfg.defaultStyle && this.getShapeFactory()) {\n      cfg.defaultStyle = this.getShapeFactory().getDefaultStyle(theme);\n    }\n\n    var styleOption = this.styleOption;\n\n    if (styleOption) {\n      cfg.style = this.getStyleCfg(styleOption, originData);\n    }\n\n    if (this.generatePoints) {\n      cfg.points = mappingDatum.points;\n      cfg.nextPoints = mappingDatum.nextPoints;\n    }\n\n    return cfg;\n  };\n\n  Geometry.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    var e_1, _a, e_2, _b, e_3, _c;\n\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    var keyDatum = new Map();\n    var keys = []; // 用来保持 diff 元素之后 added, updated 的相对顺序\n\n    var keyIndex = new Map();\n    var index = 0; // 获得更新数据所有的 keys\n    // 将更新的数据用 key 索引\n\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n\n      for (var j = 0; j < mappingData.length; j++) {\n        var mappingDatum = mappingData[j];\n        var key = this.getElementId(mappingDatum);\n        var finalKey = keyDatum.has(key) ? \"\".concat(key, \"-\").concat(i, \"-\").concat(j) : key;\n        keys.push(finalKey);\n        keyDatum.set(finalKey, mappingDatum);\n        keyIndex.set(finalKey, index);\n        index++;\n      }\n    }\n\n    this.elements = new Array(index);\n\n    var _d = diff(this.lastElementsMap, keys),\n        added = _d.added,\n        updated = _d.updated,\n        removed = _d.removed;\n\n    try {\n      // 新建 element\n      for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n        var key = added_1_1.value;\n        var mappingDatum = keyDatum.get(key);\n        var i = keyIndex.get(key);\n        var element = this.createElement(mappingDatum, i, isUpdate);\n        this.elements[i] = element;\n        this.elementsMap[key] = element;\n\n        if (element.shape) {\n          element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    try {\n      // 更新 element\n      for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n        var key = updated_1_1.value;\n        var element = this.lastElementsMap[key];\n        var mappingDatum = keyDatum.get(key);\n        var currentShapeCfg = this.getDrawCfg(mappingDatum);\n        var preShapeCfg = element.getModel();\n        var i = keyIndex.get(key);\n\n        if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n          element.animate = this.animateOption; // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n\n          element.update(currentShapeCfg); // 更新对应的 element\n        }\n\n        this.elements[i] = element;\n        this.elementsMap[key] = element;\n\n        if (element.shape) {\n          element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    } // 全部 setZIndex 之后，再执行 sort\n\n\n    if (this.container) {\n      this.container.sort();\n    }\n\n    try {\n      // 销毁被删除的 elements\n      for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n        var key = removed_1_1.value;\n        var element = this.lastElementsMap[key]; // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n\n        element.animate = this.animateOption;\n        element.destroy();\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\n   * 获取渲染的 label 类型。\n   */\n\n\n  Geometry.prototype.getLabelType = function () {\n    var _a = this,\n        labelOption = _a.labelOption,\n        coordinate = _a.coordinate,\n        type = _a.type;\n\n    var coordinateType = coordinate.type,\n        isTransposed = coordinate.isTransposed;\n    var labelType = get(labelOption, ['cfg', 'type']);\n\n    if (!labelType) {\n      // 用户未定义，则进行默认的逻辑\n      if (coordinateType === 'polar') {\n        // 极坐标下使用通用的极坐标文本，转置则使用饼图\n        labelType = isTransposed ? 'pie' : 'polar';\n      } else if (coordinateType === 'theta') {\n        // theta 坐标系下使用饼图文本\n        labelType = 'pie';\n      } else if (type === 'interval' || type === 'polygon') {\n        labelType = 'interval';\n      } else {\n        labelType = 'base';\n      }\n    }\n\n    return labelType;\n  };\n  /**\n   * 获取 Y 轴上的最小值。\n   */\n\n\n  Geometry.prototype.getYMinValue = function () {\n    var yScale = this.getYScale();\n    var min = yScale.min,\n        max = yScale.max;\n    var value;\n\n    if (min >= 0) {\n      value = min;\n    } else if (max <= 0) {\n      // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n      value = max;\n    } else {\n      value = 0;\n    }\n\n    return value;\n  }; // 创建图形属性相关的配置项\n\n\n  Geometry.prototype.createAttrOption = function (attrName, field, cfg) {\n    if (isNil(field) || isObject(field)) {\n      if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n        // shape({ values: [ 'funnel' ] })\n        set(this.attributeOption, attrName, {\n          fields: field.values\n        });\n      } else {\n        set(this.attributeOption, attrName, field);\n      }\n    } else {\n      var attrCfg = {};\n\n      if (isNumber(field)) {\n        // size(3)\n        attrCfg.values = [field];\n      } else {\n        attrCfg.fields = parseFields(field);\n      }\n\n      if (cfg) {\n        if (isFunction(cfg)) {\n          attrCfg.callback = cfg;\n        } else {\n          attrCfg.values = cfg;\n        }\n      }\n\n      set(this.attributeOption, attrName, attrCfg);\n    }\n  };\n\n  Geometry.prototype.initAttributes = function () {\n    var _this = this;\n\n    var _a = this,\n        attributes = _a.attributes,\n        attributeOption = _a.attributeOption,\n        theme = _a.theme,\n        shapeType = _a.shapeType;\n\n    this.groupScales = [];\n    var tmpMap = {};\n\n    var _loop_1 = function (attrType) {\n      if (attributeOption.hasOwnProperty(attrType)) {\n        var option = attributeOption[attrType];\n\n        if (!option) {\n          return {\n            value: void 0\n          };\n        }\n\n        var attrCfg = __assign({}, option);\n\n        var callback = attrCfg.callback,\n            values = attrCfg.values,\n            _b = attrCfg.fields,\n            fields = _b === void 0 ? [] : _b; // 获取每一个字段对应的 scale\n\n        var scales = fields.map(function (field) {\n          var scale = _this.scales[field];\n\n          if (!tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n            var inferedScaleType = inferScaleType(scale, get(_this.scaleDefs, field), attrType, _this.type);\n\n            if (inferedScaleType === 'cat') {\n              _this.groupScales.push(scale);\n\n              tmpMap[field] = true;\n            }\n          }\n\n          return scale;\n        });\n        attrCfg.scales = scales;\n\n        if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n          // 用户在图形通道上声明了常量字段 color('red'), size(5)\n          attrCfg.values = scales[0].values;\n        } else if (!callback && !values) {\n          // 用户没有指定任何规则，则使用默认的映射规则\n          if (attrType === 'size') {\n            attrCfg.values = theme.sizes;\n          } else if (attrType === 'shape') {\n            attrCfg.values = theme.shapes[shapeType] || [];\n          } else if (attrType === 'color') {\n            if (scales.length) {\n              // 根据数值个数使用对应的色板\n              attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n            } else {\n              attrCfg.values = theme.colors10;\n            }\n          }\n        }\n\n        var AttributeCtor = getAttributeClass(attrType);\n        attributes[attrType] = new AttributeCtor(attrCfg);\n      }\n    }; // 遍历每一个 attrOption，各自创建 Attribute 实例\n\n\n    for (var attrType in attributeOption) {\n      var state_1 = _loop_1(attrType);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n  }; // 处理数据：分组 -> 数字化 -> adjust 调整\n\n\n  Geometry.prototype.processData = function (data) {\n    var e_4, _a;\n\n    this.hasSorted = false;\n    var scales = this.getAttribute('position').scales;\n    var categoryScales = scales.filter(function (scale) {\n      return scale.isCategory;\n    });\n    var groupedArray = this.groupData(data); // 数据分组\n\n    var beforeAdjust = [];\n\n    for (var i = 0, len = groupedArray.length; i < len; i++) {\n      var subData = groupedArray[i];\n      var arr = [];\n\n      for (var j = 0, subLen = subData.length; j < subLen; j++) {\n        var originData = subData[j];\n        var item = {}; // tslint:disable-next-line: forin\n\n        for (var k in originData) {\n          item[k] = originData[k];\n        }\n\n        item[FIELD_ORIGIN] = originData;\n\n        try {\n          // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n          for (var categoryScales_1 = (e_4 = void 0, __values(categoryScales)), categoryScales_1_1 = categoryScales_1.next(); !categoryScales_1_1.done; categoryScales_1_1 = categoryScales_1.next()) {\n            var scale = categoryScales_1_1.value;\n            var field = scale.field;\n            item[field] = scale.translate(item[field]);\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (categoryScales_1_1 && !categoryScales_1_1.done && (_a = categoryScales_1.return)) _a.call(categoryScales_1);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n\n        arr.push(item);\n      }\n\n      beforeAdjust.push(arr);\n    }\n\n    var dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n\n    this.beforeMappingData = dataArray;\n    return dataArray;\n  }; // 调整数据\n\n\n  Geometry.prototype.adjustData = function (dataArray) {\n    var adjustOption = this.adjustOption;\n\n    var _a = this,\n        intervalPadding = _a.intervalPadding,\n        dodgePadding = _a.dodgePadding,\n        theme = _a.theme; // 兼容theme配置\n\n\n    var maxColumnWidth = this.maxColumnWidth || theme.maxColumnWidth;\n    var minColumnWidth = this.minColumnWidth || theme.minColumnWidth;\n    var columnWidthRatio = this.columnWidthRatio || theme.columnWidthRatio;\n    var result = dataArray;\n\n    if (adjustOption) {\n      var xScale_2 = this.getXScale();\n      var yScale = this.getYScale();\n      var xField = xScale_2.field;\n      var yField = yScale ? yScale.field : null;\n      var xDimensionLength = getXDimensionLength(this.coordinate);\n      var groupNum = xScale_2.values.length; // 传入size计算相关参数，默认宽度、最大最小宽度约束\n\n      var sizeAttr = this.getAttribute('size');\n      var defaultSize = void 0;\n\n      if (sizeAttr) {\n        defaultSize = sizeAttr.values[0];\n      }\n\n      for (var i = 0, len = adjustOption.length; i < len; i++) {\n        var adjust = adjustOption[i];\n\n        var adjustCfg = __assign({\n          xField: xField,\n          yField: yField,\n          intervalPadding: intervalPadding,\n          dodgePadding: dodgePadding,\n          xDimensionLength: xDimensionLength,\n          groupNum: groupNum,\n          defaultSize: defaultSize,\n          maxColumnWidth: maxColumnWidth,\n          minColumnWidth: minColumnWidth,\n          columnWidthRatio: columnWidthRatio\n        }, adjust);\n\n        var type = adjust.type;\n\n        if (type === 'dodge') {\n          var adjustNames = [];\n\n          if (xScale_2.isCategory || xScale_2.type === 'identity') {\n            adjustNames.push('x');\n          } else if (!yScale) {\n            adjustNames.push('y');\n          } else {\n            throw new Error('dodge is not support linear attribute, please use category attribute!');\n          }\n\n          adjustCfg.adjustNames = adjustNames; // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n          // 兼容theme配置\n\n          adjustCfg.dodgeRatio = columnWidthRatio;\n        } else if (type === 'stack') {\n          var coordinate = this.coordinate;\n\n          if (!yScale) {\n            // 一维的情况下获取高度和默认size\n            adjustCfg.height = coordinate.getHeight();\n            var size = this.getDefaultValue('size') || 3;\n            adjustCfg.size = size;\n          } // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n\n\n          if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n            adjustCfg.reverseOrder = true;\n          }\n        }\n\n        var adjustCtor = getAdjustClass(type);\n        adjustCfg.dimValuesMap = {}; //生成dimValuesMap\n\n        if (xScale_2 && xScale_2.values) {\n          adjustCfg.dimValuesMap[xScale_2.field] = xScale_2.values.map(function (v) {\n            return xScale_2.translate(v);\n          });\n        }\n\n        var adjustInstance = new adjustCtor(adjustCfg);\n        result = adjustInstance.process(result);\n        this.adjusts[type] = adjustInstance;\n      }\n    }\n\n    return result;\n  }; // 对数据进行分组\n\n\n  Geometry.prototype.groupData = function (data) {\n    var groupScales = this.getGroupScales();\n    var scaleDefs = this.scaleDefs;\n    var appendConditions = {};\n    var groupFields = [];\n\n    for (var index = 0; index < groupScales.length; index++) {\n      var scale = groupScales[index];\n      var field = scale.field;\n      groupFields.push(field);\n\n      if (get(scaleDefs, [field, 'values'])) {\n        // 用户通过 view.scale() 接口指定了 values 属性\n        appendConditions[field] = scaleDefs[field].values;\n      }\n    }\n\n    return group(data, groupFields, appendConditions);\n  }; // 更新发生层叠后的数据对应的度量范围\n\n\n  Geometry.prototype.updateStackRange = function (scale, dataArray) {\n    var mergeArray = flatten(dataArray);\n    var field = scale.field;\n    var min = scale.min;\n    var max = scale.max;\n\n    for (var index = 0; index < mergeArray.length; index++) {\n      var obj = mergeArray[index];\n      var tmpMin = Math.min.apply(null, obj[field]);\n      var tmpMax = Math.max.apply(null, obj[field]);\n\n      if (tmpMin < min) {\n        min = tmpMin;\n      }\n\n      if (tmpMax > max) {\n        max = tmpMax;\n      }\n    }\n\n    var scaleDefs = this.scaleDefs;\n    var cfg = {};\n\n    if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n      // 用户如果在列定义中定义了 min，则以用户定义的为准\n      cfg.min = min;\n    }\n\n    if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n      // 用户如果在列定义中定义了 max\n      cfg.max = max;\n    }\n\n    scale.change(cfg);\n  }; // 将数据映射至图形空间前的操作：排序以及关键点的生成\n\n\n  Geometry.prototype.beforeMapping = function (beforeMappingData) {\n    // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n    // const source = clone(beforeMappingData);\n    var source = beforeMappingData;\n\n    if (this.sortable) {\n      this.sort(source);\n    }\n\n    if (this.generatePoints) {\n      // 需要生成关键点\n      for (var index = 0, length_5 = source.length; index < length_5; index++) {\n        var currentData = source[index];\n        this.generateShapePoints(currentData);\n        var nextData = source[index + 1];\n\n        if (nextData) {\n          this.generateShapePoints(nextData);\n          currentData[0].nextPoints = nextData[0].points;\n        }\n      }\n    }\n\n    return source;\n  }; // 生成 shape 的关键点\n\n\n  Geometry.prototype.generateShapePoints = function (data) {\n    var shapeFactory = this.getShapeFactory();\n    var shapeAttr = this.getAttribute('shape');\n\n    for (var index = 0; index < data.length; index++) {\n      var obj = data[index];\n      var cfg = this.createShapePointsCfg(obj);\n      var shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n      var points = shapeFactory.getShapePoints(shape, cfg);\n      obj.points = points;\n    }\n  }; // 将数据归一化\n\n\n  Geometry.prototype.normalizeValues = function (values, scale) {\n    var rst = [];\n\n    if (isArray(values)) {\n      for (var index = 0; index < values.length; index++) {\n        var value = values[index];\n        rst.push(scale.scale(value));\n      }\n    } else {\n      rst = scale.scale(values);\n    }\n\n    return rst;\n  }; // 将数据映射至图形空间\n\n\n  Geometry.prototype.mapping = function (data) {\n    var attributes = this.attributes;\n    var mappingData = [];\n\n    for (var index = 0; index < data.length; index++) {\n      var record = data[index];\n      var newRecord = {\n        _origin: record[FIELD_ORIGIN],\n        points: record.points,\n        nextPoints: record.nextPoints\n      };\n\n      for (var k in attributes) {\n        if (attributes.hasOwnProperty(k)) {\n          var attr = attributes[k];\n          var names = attr.names;\n          var values = this.getAttributeValues(attr, record);\n\n          if (names.length > 1) {\n            // position 之类的生成多个字段的属性\n            for (var j = 0; j < values.length; j += 1) {\n              var val = values[j];\n              var name_1 = names[j];\n              newRecord[name_1] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n            }\n          } else {\n            // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n            // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n            newRecord[names[0]] = values.length === 1 ? values[0] : values;\n          }\n        }\n      }\n\n      this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n\n      mappingData.push(newRecord);\n    }\n\n    return mappingData;\n  }; // 将归一化的坐标值转换成画布坐标\n\n\n  Geometry.prototype.convertPoint = function (mappingRecord) {\n    var x = mappingRecord.x,\n        y = mappingRecord.y;\n    var rstX;\n    var rstY;\n    var obj;\n    var coordinate = this.coordinate;\n\n    if (isArray(x) && isArray(y)) {\n      rstX = [];\n      rstY = [];\n\n      for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n        obj = coordinate.convert({\n          x: x[i],\n          y: y[j]\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      rstY = [];\n\n      for (var index = 0; index < y.length; index++) {\n        var yVal = y[index];\n        obj = coordinate.convert({\n          x: x,\n          y: yVal\n        });\n\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [rstX];\n          }\n\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n\n        rstY.push(obj.y);\n      }\n    } else if (isArray(x)) {\n      rstX = [];\n\n      for (var index = 0; index < x.length; index++) {\n        var xVal = x[index];\n        obj = coordinate.convert({\n          x: xVal,\n          y: y\n        });\n\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [rstY];\n          }\n\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n\n        rstX.push(obj.x);\n      }\n    } else {\n      var point = coordinate.convert({\n        x: x,\n        y: y\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n\n    mappingRecord.x = rstX;\n    mappingRecord.y = rstY;\n  }; // 获取 style 配置\n\n\n  Geometry.prototype.getStyleCfg = function (styleOption, originData) {\n    var _a = styleOption.fields,\n        fields = _a === void 0 ? [] : _a,\n        callback = styleOption.callback,\n        cfg = styleOption.cfg;\n\n    if (cfg) {\n      // 用户直接配置样式属性\n      return cfg;\n    }\n\n    var params = fields.map(function (field) {\n      return originData[field];\n    });\n    return callback.apply(void 0, __spreadArray([], __read(params), false));\n  };\n\n  Geometry.prototype.setCfg = function (cfg) {\n    var _this = this;\n\n    var coordinate = cfg.coordinate,\n        data = cfg.data,\n        theme = cfg.theme,\n        scaleDefs = cfg.scaleDefs;\n\n    if (coordinate) {\n      this.coordinate = coordinate;\n    }\n\n    if (data) {\n      this.data = data;\n    }\n\n    if (scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.idFields = [];\n      each(scaleDefs, function (scaleDef, field) {\n        if (scaleDef && scaleDef.key) {\n          _this.idFields.push(field);\n        }\n      });\n    }\n\n    if (theme) {\n      this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n    }\n  };\n\n  Geometry.prototype.renderLabels = function (mappingArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var geometryLabel, labelType, GeometryLabelsCtor, labelsMap, elementLabels, _a, _b, _c, element, labels;\n\n      var e_5, _d;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            geometryLabel = this.geometryLabel;\n            this.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_RENDER_LABEL);\n\n            if (!geometryLabel) {\n              labelType = this.getLabelType();\n              GeometryLabelsCtor = getGeometryLabel(labelType);\n              geometryLabel = new GeometryLabelsCtor(this);\n              this.geometryLabel = geometryLabel;\n            }\n\n            return [4\n            /*yield*/\n            , geometryLabel.render(mappingArray, isUpdate)];\n\n          case 1:\n            _e.sent();\n\n            labelsMap = geometryLabel.labelsRenderer.shapesMap;\n            elementLabels = new Map();\n            each(labelsMap, function (labelGroup, labelGroupId) {\n              var labelChildren = labelGroup.getChildren() || [];\n\n              for (var j = 0; j < labelChildren.length; j++) {\n                var labelShape = labelChildren[j];\n\n                var element = _this.elementsMap[labelShape.get('elementId') || labelGroupId.split(' ')[0]];\n\n                if (element) {\n                  labelShape.cfg.name = ['element', 'label'];\n                  labelShape.cfg.element = element;\n                  var labels = elementLabels.get(element) || new Set();\n                  labels.add(labelGroup);\n                  elementLabels.set(element, labels);\n                }\n              }\n            });\n\n            try {\n              for (_a = __values(elementLabels.entries()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                _c = __read(_b.value, 2), element = _c[0], labels = _c[1];\n                element.labelShape = __spreadArray([], __read(labels), false);\n              }\n            } catch (e_5_1) {\n              e_5 = {\n                error: e_5_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n              } finally {\n                if (e_5) throw e_5.error;\n              }\n            }\n\n            this.emit(GEOMETRY_LIFE_CIRCLE.AFTER_RENDER_LABEL);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * 是否需要进行群组入场动画\n   * 规则：\n   * 1. 如果发生更新，则不进行\n   * 2. 如果用户关闭 geometry 动画，则不进行\n   * 3. 如果用户关闭了 appear 动画，则不进行\n   * 4. 如果用户配置了 appear.animation，则不进行\n   */\n\n\n  Geometry.prototype.canDoGroupAnimation = function (isUpdate) {\n    return !isUpdate && this.animateOption && (get(this.animateOption, 'appear') === undefined || get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined);\n  };\n\n  return Geometry;\n}(Base);\n\nexport default Geometry;","map":{"version":3,"mappings":"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","names":["getAdjust","getAdjustClass","getAttribute","getAttributeClass","clone","deepMix","each","flatten","get","isArray","isEmpty","isEqual","isFunction","isNil","isNumber","isObject","isPlainObject","isString","set","doGroupAppearAnimate","getDefaultAnimateCfg","Base","FIELD_ORIGIN","GEOMETRY_LIFE_CIRCLE","GROUP_ATTRS","uniq","Element","getGeometryLabel","getShapeFactory","group","isModelChange","parseFields","diff","inferScaleType","getXDimensionLength","__extends","cfg","_super","_this","labelsContainer","coordinate","data","_a","sortable","_b","visible","theme","_c","scales","_d","scaleDefs","intervalPadding","dodgePadding","maxColumnWidth","minColumnWidth","columnWidthRatio","roseWidthRatio","multiplePieWidthRatio","zIndexReversed","sortZIndex","useDeferredLabel","container","userTheme","Infinity","Geometry","positionCfg","fields","length","unshift","attributeOption","field","createAttrOption","adjustCfg","adjusts","adjust","index","type","adjustOption","styleFunc","styleOption","callback","tooltipOption","animateOption","secondParam","thirdParam","labelOption","stateOption","customOption","setCfg","initAttributes","processData","adjustScale","isDataChanged","isCoordinateChanged","lastAttributeOption","init","isUpdate","defaultSize","undefined","elementsMap","elements","offscreenGroup","getOffscreenGroup","clear","beforeMappingData","dataArray","beforeMapping","Array","i","mapping","updateElements","lastElementsMap","canDoGroupAnimation","animateCfg","yScale","getYScale","yMinPoint","convert","x","y","scale","getYMinValue","deferred","renderLabels","bind","timeout","window","requestIdleCallback","setTimeout","options","__assign","changeVisible","geometryLabel","attributes","idFields","groupScales","hasSorted","remove","destroy","shapeFactory","call","name","rst","attr","includes","push","attrName","value","values","obj","params","length_1","isIdentity","apply","__spreadArray","adjustType","shapeName","getMarker","condition","filter","element","originData","elementId","xScale","getXScale","xField","yField","yVal","xVal","id","concat","length_2","groupScale","dodgeAdjust","dodgeBy","tmpMap","Map","attributeType","hasOwnProperty","eachOpt","length_3","show","hide","uniqMap","Object","forEach","fs","f","has","groupFields","length_4","attributeName","position","getXYFields","map","shape","GroupCtor","getGroupBase","mappingArray","xScale_1","xField_1","itemArr","sort","obj1","obj2","translate","updateStackRange","shapeType","geometries","normalizeValues","y0","mappingDatum","shapeCfg","getDrawCfg","elementIndex","animate","geometry","draw","mappingData","color","size","isInCircle","isPolar","customInfo","defaultShapeType","defaultStyle","style","getDefaultStyle","getStyleCfg","generatePoints","points","nextPoints","mappingDataArray","keyDatum","keys","keyIndex","j","key","getElementId","finalKey","added","updated","removed","added_1_1","createElement","updated_1_1","currentShapeCfg","preShapeCfg","getModel","update","removed_1_1","coordinateType","isTransposed","labelType","max","min","attrCfg","attrType","option","inferedScaleType","sizes","shapes","colors10","colors20","AttributeCtor","categoryScales","isCategory","groupedArray","groupData","beforeAdjust","len","subData","arr","subLen","item","k","categoryScales_1_1","adjustData","result","xScale_2","xDimensionLength","groupNum","sizeAttr","adjustNames","Error","dodgeRatio","height","getHeight","getDefaultValue","reverseOrder","adjustCtor","dimValuesMap","v","adjustInstance","process","getGroupScales","appendConditions","mergeArray","tmpMin","Math","tmpMax","change","source","length_5","currentData","generateShapePoints","nextData","shapeAttr","createShapePointsCfg","getAttributeValues","getShapePoints","record","newRecord","_origin","names","val","name_1","convertPoint","mappingRecord","rstX","rstY","xLen","yLen","point","scaleDef","emit","BEFORE_RENDER_LABEL","getLabelType","GeometryLabelsCtor","render","_e","labelsMap","labelsRenderer","shapesMap","elementLabels","labelGroup","labelGroupId","labelChildren","getChildren","labelShape","split","labels","Set","add","entries","AFTER_RENDER_LABEL"],"sourceRoot":"","sources":["../../src/geometry/base.ts"],"sourcesContent":["import { Adjust, getAdjust as getAdjustClass } from '@antv/adjust';\nimport { Attribute, getAttribute as getAttributeClass } from '@antv/attr';\nimport {\n  clone,\n  deepMix,\n  each,\n  flatten,\n  get,\n  isArray,\n  isEmpty,\n  isEqual,\n  isFunction,\n  isNil,\n  isNumber,\n  isObject,\n  isPlainObject,\n  isString,\n  set,\n} from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GEOMETRY_LIFE_CIRCLE, GROUP_ATTRS } from '../constant';\nimport { BBox, Coordinate, IGroup, IShape, Scale } from '../dependents';\nimport {\n  AdjustOption,\n  AdjustType,\n  AnimateOption,\n  AttributeOption,\n  ColorAttrCallback,\n  Data,\n  Datum,\n  GeometryLabelCfg,\n  GeometryTooltipOption,\n  LabelCallback,\n  LabelOption,\n  LooseObject,\n  MappingDatum,\n  ScaleOption,\n  ShapeAttrCallback,\n  ShapeFactory,\n  ShapeInfo,\n  ShapeMarkerCfg,\n  ShapeMarkerAttrs,\n  ShapePoint,\n  SizeAttrCallback,\n  StateOption,\n  StyleCallback,\n  StyleOption,\n  TooltipCallback,\n  CustomOption,\n} from '../interface';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport GeometryLabel from './label/base';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nimport { diff } from './util/diff';\nimport { inferScaleType } from '../util/scale';\nimport { getXDimensionLength } from '../util/coordinate';\n\n/** @ignore */\ninterface AttributeInstanceCfg {\n  fields?: string[];\n  callback?: (...args) => any;\n  values?: string[] | number[];\n  scales?: Scale[];\n}\ninterface DimValuesMapType {\n  [dim: string]: number[];\n}\n/** @ignore */\ninterface AdjustInstanceCfg {\n  type: AdjustType;\n  adjustNames?: string[];\n  xField?: string;\n  yField?: string;\n\n  dodgeBy?: string;\n  marginRatio?: number;\n  dodgeRatio?: number;\n\n  size?: number;\n  height?: number;\n  reverseOrder?: boolean;\n\n  /** 像素级柱间宽度，调整offset */\n  intervalPadding?: number;\n  dodgePadding?: number;\n  /** x维度长度，计算归一化padding使用 */\n  xDimensionLength?: number;\n  /** 分组数，计算offset */\n  groupNum?: number;\n  /** 用户配置宽度 size */\n  defaultSize?: number;\n  /** 最大最小宽度约束 */\n  maxColumnWidth?: number;\n  minColumnWidth?: number;\n  /** 柱宽比例 */\n  columnWidthRatio?: number;\n  /** 用户自定义的dimValuesMap */\n  dimValuesMap?: DimValuesMapType;\n}\n\n/** geometry.init() 传入参数 */\nexport interface InitCfg {\n  /** 坐标系 */\n  coordinate?: Coordinate;\n  /** 数据 */\n  data?: Data;\n  /** 主题对象 */\n  theme?: LooseObject;\n  /** 列定义 */\n  scaleDefs?: Record<string, ScaleOption>;\n  /** 因为数据使用的引用，所以需要有一个标识位标识数据是否发生了更新 */\n  isDataChanged?: boolean;\n  isCoordinateChanged?: boolean;\n}\n\n/** Geometry 构造函数参数 */\nexport interface GeometryCfg {\n  /** Geometry shape 的容器。 */\n  container: IGroup;\n  /** 绘制的坐标系对象。 */\n  coordinate?: Coordinate;\n  /** 绘制数据。 */\n  data?: Data;\n  /** 需要的 scales。 */\n  scales?: Record<string, Scale>;\n  /** 列定义 */\n  scaleDefs?: Record<string, ScaleOption>;\n  /** Geometry labels 的容器 */\n  labelsContainer?: IGroup;\n  /** 是否对数据进行排序 */\n  sortable?: boolean;\n  /** elements 的 zIndex 默认按顺序提升，通过 zIndexReversed 可以反序，从而数据越前，层级越高 */\n  zIndexReversed?: boolean;\n  /** 是否需要对 zIndex 进行 sort。因为耗时长，由具体场景自行决定 */\n  sortZIndex?: boolean;\n  /** 延迟渲染 Geometry 数据标签. 设置为 true 时，会在浏览器空闲时期被调用, 也可以指定具体 timeout 时间 */\n  useDeferredLabel?: boolean | number;\n  /** 是否可见 */\n  visible?: boolean;\n  /** 主题配置 */\n  theme?: LooseObject;\n\n  /** 组间距 */\n  intervalPadding?: number;\n  /** 组内间距 */\n  dodgePadding?: number;\n  /** 柱状图最大宽度 */\n  maxColumnWidth?: number;\n  /** 柱状图最小宽度 */\n  minColumnWidth?: number;\n  /** 默认宽度占比，interval类型和schema类型通用 */\n  columnWidthRatio?: number;\n  /** 玫瑰图占比 */\n  roseWidthRatio?: number;\n  /** 多层饼图/环图占比 */\n  multiplePieWidthRatio?: number;\n}\n\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\nexport default class Geometry<S extends ShapePoint = ShapePoint> extends Base {\n  /** Geometry 几何标记类型。 */\n  public readonly type: string = 'base';\n  /** ShapeFactory 对应的类型。 */\n  public readonly shapeType: string;\n\n  // 在创建 Geometry 实例时可以传入的属性\n  /** Coordinate 坐标系实例。 */\n  public coordinate: Coordinate;\n  /** 用户绘制数据。 */\n  public data: Data;\n  /** 图形绘制容器。 */\n  public readonly container: IGroup;\n  /** label 绘制容器。 */\n  public readonly labelsContainer: IGroup;\n  /** 是否对数据进行排序，默认为 false。  */\n  public sortable: boolean;\n  /** 当前 Geometry 实例主题。  */\n  public theme: LooseObject;\n  /** 存储 geometry 需要的 scales，需要外部传入。 */\n  public scales: Record<string, Scale>;\n  /** scale 定义，需要外部传入。 */\n  public scaleDefs: Record<string, ScaleOption>;\n  /** 画布区域，用于 label 布局。 */\n  public canvasRegion: BBox;\n\n  // 内部产生的属性\n  /** Attribute map  */\n  public attributes: Record<string, Attribute> = {};\n  /** Element map */\n  public elements: Element[] = [];\n  /**\n   * 存储处理后的数据，\n   * + init() 及 updateData() 逻辑后, 结构为 Data[]；\n   * + paint() 逻辑后，结构为 MappingDatum[][]。\n   */\n  public dataArray: MappingDatum[][];\n  /** 存储 tooltip 配置信息。 */\n  public tooltipOption: GeometryTooltipOption | boolean;\n  /** 存储 label 配置信息。 */\n  public labelOption: LabelOption | false;\n  /** 状态量相关的配置项 */\n  public stateOption: StateOption;\n  /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n  public elementsMap: Record<string, Element> = {};\n  /** animate 配置项 */\n  public animateOption: AnimateOption | boolean = true;\n  /** 图形属性映射配置 */\n  protected attributeOption: Record<string, AttributeOption> = {};\n  /** adjust 配置项 */\n  protected adjustOption: AdjustOption[];\n  /** style 配置项 */\n  protected styleOption: StyleOption;\n  /** custom 自定义的配置项 */\n  protected customOption: CustomOption;\n  /** 每个 Geometry 对应的 Shape 工厂实例，用于创建各个 Shape */\n  protected shapeFactory: ShapeFactory;\n  /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n  protected lastElementsMap: Record<string, Element> = {};\n  /** 是否生成多个点来绘制图形。 */\n  protected generatePoints: boolean = false;\n  /** 存储发生图形属性映射前的数据 */\n  protected beforeMappingData: Data[] = null;\n  /** 存储每个 shape 的默认 size，用于 Interval、Schema 几何标记 */\n  protected defaultSize: number;\n\n  // 用户通过 geometry 构造函数设置的主题\n  private userTheme: LooseObject;\n  private adjusts: Record<string, Adjust> = {};\n  private lastAttributeOption;\n  private idFields: string[] = [];\n  private geometryLabel: GeometryLabel;\n\n  // 柱状图间距相关配置\n  /** 组间距 */\n  protected intervalPadding: number;\n  /** 组内间距 */\n  protected dodgePadding: number;\n  /** 柱状图最大宽度 */\n  protected maxColumnWidth: number;\n  /** 柱状图最小宽度 */\n  protected minColumnWidth: number;\n  /** 一般柱状图宽度占比 */\n  protected columnWidthRatio: number;\n  /** 玫瑰图占比 */\n  protected roseWidthRatio: number;\n  /** 多层饼图/环图占比 */\n  protected multiplePieWidthRatio: number;\n  /** elements 的 zIndex 默认按顺序提升，通过 zIndexReversed 可以反序，从而数据越前，层级越高 */\n  public zIndexReversed?: boolean;\n  /** 是否需要对 zIndex 进行 sort。因为耗时长，由具体场景自行决定 */\n  public sortZIndex?: boolean;\n  protected useDeferredLabel?: null | number;\n\n  /** 虚拟 Group，用于图形更新 */\n  private offscreenGroup: IGroup;\n  private groupScales: Scale[];\n  private hasSorted: boolean = false;\n  protected isCoordinateChanged: boolean = false;\n\n  /**\n   * 创建 Geometry 实例。\n   * @param cfg\n   */\n  constructor(cfg: GeometryCfg) {\n    super(cfg);\n\n    const {\n      container,\n      labelsContainer,\n      coordinate,\n      data,\n      sortable = false,\n      visible = true,\n      theme,\n      scales = {},\n      scaleDefs = {},\n      // 柱状图间隔与宽度相关配置\n      intervalPadding,\n      dodgePadding,\n      maxColumnWidth,\n      minColumnWidth,\n      columnWidthRatio,\n      roseWidthRatio,\n      multiplePieWidthRatio,\n      zIndexReversed,\n      sortZIndex,\n      useDeferredLabel,\n    } = cfg;\n\n    this.container = container;\n    this.labelsContainer = labelsContainer;\n    this.coordinate = coordinate;\n    this.data = data;\n    this.sortable = sortable;\n    this.visible = visible;\n    this.userTheme = theme;\n    this.scales = scales;\n    this.scaleDefs = scaleDefs;\n    // 柱状图间隔与宽度相关配置\n    this.intervalPadding = intervalPadding;\n    this.dodgePadding = dodgePadding;\n    this.maxColumnWidth = maxColumnWidth;\n    this.minColumnWidth = minColumnWidth;\n    this.columnWidthRatio = columnWidthRatio;\n    this.roseWidthRatio = roseWidthRatio;\n    this.multiplePieWidthRatio = multiplePieWidthRatio;\n    this.zIndexReversed = zIndexReversed;\n    this.sortZIndex = sortZIndex;\n    this.useDeferredLabel = useDeferredLabel ? (typeof useDeferredLabel === 'number' ? useDeferredLabel : Infinity) : null;\n  }\n\n  /**\n   * 配置 position 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n   * geometry.position('x*y');\n   * geometry.position([ 'x', 'y' ]);\n   * geometry.position({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   *\n   * @param cfg 映射规则\n   * @returns\n   */\n  public position(cfg: string | string[] | AttributeOption): Geometry {\n    let positionCfg = cfg;\n    if (!isPlainObject(cfg)) {\n      // 字符串字段或者数组字段\n      positionCfg = {\n        fields: parseFields(cfg),\n      };\n    }\n\n    const fields = get(positionCfg, 'fields');\n    if (fields.length === 1) {\n      // 默认填充一维 1*xx\n      fields.unshift('1');\n      set(positionCfg, 'fields', fields);\n    }\n    set(this.attributeOption, 'position', positionCfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 color 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.color({\n   *   fields: [ 'x' ],\n   *   values: [ '#1890ff', '#5AD8A6' ],\n   * });\n   * ```\n   *\n   * @param field 映射规则\n   * @returns\n   */\n  public color(field: AttributeOption): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 使用 '#1890ff' 颜色渲染图形\n   * geometry.color('#1890ff');\n   *\n   * // 根据 x 字段的数据值进行颜色的映射，这时候 G2 会在内部调用默认的回调函数，读取默认提供的颜色进行数据值到颜色值的映射。\n   * geometry.color('x');\n   *\n   * // 将 'x' 字段的数据值映射至指定的颜色值 colors（可以是字符串也可以是数组），此时用于通常映射分类数据\n   * geometry.color('x', [ '#1890ff', '#5AD8A6' ]);\n   *\n   * // 使用回调函数进行颜色值的自定义；可以使用多个字段使用、*号连接\n   * geometry.color('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 'red';\n   *   }\n   *   return 'blue';\n   * });\n   *\n   * // 指定颜色的渐变路径，用于映射连续的数据\n   * geometry.color('x', '#BAE7FF-#1890FF-#0050B3');\n   * ```\n   *\n   * @param field 参与颜色映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, color 映射规则。\n   * @returns\n   */\n  public color(field: string, cfg?: string | string[] | ColorAttrCallback): Geometry;\n  public color(field: AttributeOption | string, cfg?: string | string[] | ColorAttrCallback): Geometry {\n    this.createAttrOption('color', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 shape 通道映射规则。\n   *\n   * @example\n   *\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.shape({\n   *   fields: [ 'x' ],\n   * });\n   * ```\n   *\n   * @param field 映射规则配置。\n   * @returns\n   */\n  public shape(field: AttributeOption): Geometry;\n  /**\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 指定常量，将所有数据值映射到固定的 shape\n   * geometry.shape('circle');\n   *\n   * // 将指定的字段映射到内置的 shapes 数组中\n   * geometry.shape('x');\n   *\n   * // 将指定的字段映射到指定的 shapes 数组中\n   * geometry.shape('x', [ 'circle', 'diamond', 'square' ]);\n   *\n   * // 使用回调函数获取 shape，用于个性化的 shape 定制，可以根据单个或者多个字段确定\n   * geometry.shape('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 'circle';\n   *   }\n   *   return 'diamond';\n   * });\n   * ```\n   *\n   * @param field 参与 shape 映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, shape 映射规则。\n   * @returns\n   */\n  public shape(field: string, cfg?: string[] | ShapeAttrCallback): Geometry;\n  public shape(field: AttributeOption | string, cfg?: string[] | ShapeAttrCallback): Geometry {\n    this.createAttrOption('shape', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 size 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.size({\n   *   values: [ 10 ],\n   * })\n   * ```\n   *\n   * @param field 映射规则。\n   * @returns\n   */\n  public size(field: AttributeOption): Geometry;\n  /**\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 直接指定像素大小\n   * geometry.size(10);\n   *\n   * // 指定映射到 size 的字段，使用内置的默认大小范围为 [1, 10]\n   * geometry.size('x');\n   *\n   * // 指定映射到 size 字段外，还提供了 size 的最大值和最小值范围\n   * geometry.size('x', [ 5, 30 ]);\n   *\n   * // 使用回调函数映射 size，用于个性化的 size 定制，可以使用多个字段进行映射\n   * geometry.size('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 10;\n   *   }\n   *   return 5;\n   * });\n   * ```\n   *\n   * @param field 参与 size 映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, size 映射规则\n   * @returns\n   */\n  public size(field: number | string, cfg?: [number, number] | SizeAttrCallback): Geometry;\n  public size(field: AttributeOption | number | string, cfg?: [number, number] | SizeAttrCallback): Geometry {\n    this.createAttrOption('size', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 设置数据调整方式。G2 目前内置了四种类型：\n   * 1. dodge\n   * 2. stack\n   * 3. symmetric\n   * 4. jitter\n   *\n   *\n   * **Tip**\n   * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('dodge', {\n   *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n   *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n   * });\n   * ```\n   *\n   * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('stack', {\n   *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * geometry.adjust('stack');\n   *\n   * geometry.adjust({\n   *   type: 'stack',\n   *   reverseOrder: false,\n   * });\n   *\n   * // 组合使用 adjust\n   * geometry.adjust([ 'stack', 'dodge' ]);\n   *\n   * geometry.adjust([\n   *   { type: 'stack' },\n   *   { type: 'dodge', dodgeBy: 'x' },\n   * ]);\n   * ```\n   *\n   * @param adjustCfg 数据调整配置\n   * @returns\n   */\n  public adjust(adjustCfg: string | string[] | AdjustOption | AdjustOption[]): Geometry {\n    let adjusts: any = adjustCfg;\n    if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n      adjusts = [adjustCfg];\n    }\n    each(adjusts, (adjust, index) => {\n      if (!isObject(adjust)) {\n        adjusts[index] = { type: adjust };\n      }\n    });\n\n    this.adjustOption = adjusts;\n    return this;\n  }\n\n  /**\n   * 图形样式配置。\n   *\n   * @example\n   * ```typescript\n   * // 配置图形样式\n   * style({\n   *   lineWidth: 2,\n   *   stroke: '#1890ff',\n   * });\n   *\n   * // 根据具体的数据进行详细配置\n   * style({\n   *   fields: [ 'x', 'y' ], // 数据字段\n   *   callback: (xVal, yVal) => {\n   *     const style = { lineWidth: 2, stroke: '#1890ff' };\n   *     if (xVal === 'a') {\n   *       style.lineDash = [ 2, 2 ];\n   *     }\n   *     return style;\n   *   },\n   * });\n   * ```\n   *\n   * @param field 配置样式属性或者样式规则。\n   * @returns\n   */\n  public style(field: StyleOption | LooseObject): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * style('x*y', (xVal, yVal) => {\n   *   const style = { lineWidth: 2, stroke: '#1890ff' };\n   *   if (xVal === 'a') {\n   *     style.lineDash = [ 2, 2 ];\n   *   }\n   *   return style;\n   * });\n   * ```\n   *\n   * @param field 数据字段或者样式配置规则。\n   * @param styleFunc Optional, 样式配置回调函数。\n   * @returns\n   */\n  public style(field: string, styleFunc: StyleCallback): Geometry;\n  public style(field: StyleOption | LooseObject | string, styleFunc?: StyleCallback): Geometry {\n    if (isString(field)) {\n      const fields = parseFields(field);\n      this.styleOption = {\n        fields,\n        callback: styleFunc,\n      };\n    } else {\n      const { fields, callback, cfg } = field as StyleOption;\n      if (fields || callback || cfg) {\n        this.styleOption = field;\n      } else {\n        this.styleOption = {\n          cfg: field,\n        };\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * 配置 Geometry 显示的 tooltip 内容。\n   *\n   * `tooltip(false)` 代表关闭 tooltip。\n   * `tooltip(true)` 代表开启 tooltip。\n   *\n   * Geometry 默认允许 tooltip 展示，我们可以使用以下方法对 tooltip 的展示内容进行配置：\n   *\n   * @example\n   * ```typescript\n   * // data: [{x: 'a', y: 10}]\n   * tooltip({\n   *   fields: [ 'x' ],\n   * });\n   * ```\n   * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*268uQ50if60AAAAAAAAAAABkARQnAQ)\n   *\n   * ```typescript\n   * tooltip({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*A_ujSa8QhtcAAAAAAAAAAABkARQnAQ)\n   *\n   * tooltip() 方法同样支持数据映射及回调用法：\n   *\n   * @example\n   * ```typescript\n   * chart.tooltip({\n   *   itemTpl: '<li>{x}: {y}</li>',\n   * });\n   *\n   * chart.line()\n   *   .position('x*y')\n   *   .tooltip({\n   *     fields: [ 'x', 'y' ],\n   *     callback: (x, y) => {\n   *       return {\n   *         x,\n   *         y,\n   *       };\n   *     },\n   *   });\n   * ```\n   *\n   * 其返回的值必须为对象，该值中的属性同 chart.tooltip() 的 itemTpl 模板相对应，返回的变量可用于 itemTpl 的字符串模板。\n   *\n   * @param field tooltip 配置信息。\n   * @returns\n   */\n  public tooltip(field: GeometryTooltipOption | boolean): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * // data: [{x: 'a', y: 10}]\n   *\n   * // 等同于 tooltip({ fields: [ 'x' ] })\n   * tooltip('x');\n   *\n   * // 等同于 tooltip({ fields: [ 'x', 'y' ] })\n   * tooltip('x*y');\n   *\n   * // 等同于 tooltip({ fields: [ 'x', 'y' ], callback: (x, y) => { x, y } })\n   * tooltip('x*y', (x, y) => {\n   *   return {\n   *     x,\n   *     y,\n   *   };\n   * });\n   * ```\n   *\n   * @param field 参与映射的字段。\n   * @param cfg Optional, 回调函数\n   * @returns\n   */\n  public tooltip(field: string, cfg?: TooltipCallback): Geometry;\n  public tooltip(field: GeometryTooltipOption | boolean | string, cfg?: TooltipCallback): Geometry {\n    if (isString(field)) {\n      const fields = parseFields(field);\n      this.tooltipOption = {\n        fields,\n        callback: cfg,\n      };\n    } else {\n      this.tooltipOption = field;\n    }\n\n    return this;\n  }\n\n  /**\n   * Geometry 动画配置。\n   *\n   * + `animate(false)` 关闭动画\n   * + `animate(true)` 开启动画，默认开启。\n   *\n   * 我们将动画分为四个场景：\n   * 1. appear: 图表第一次加载时的入场动画；\n   * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n   * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n   * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n   *\n   * @example\n   * ```typescript\n   * animate({\n   *   enter: {\n   *     duration: 1000, // enter 动画执行时间\n   *   },\n   *   leave: false, // 关闭 leave 销毁动画\n   * });\n   * ```\n   *\n   * @param cfg 动画配置\n   * @returns\n   */\n  public animate(cfg: AnimateOption | boolean): Geometry {\n    this.animateOption = cfg;\n    return this;\n  }\n\n  /**\n   * Geometry label 配置。\n   *\n   * @example\n   * ```ts\n   * // data: [ {x: 1, y: 2, z: 'a'}, {x: 2, y: 2, z: 'b'} ]\n   * // 在每个图形上显示 z 字段对应的数值\n   * label({\n   *   fields: [ 'z' ]\n   * });\n   *\n   * label(false); // 不展示 label\n   *\n   * // 在每个图形上显示 x 字段对应的数值，同时配置文本颜色为红色\n   * label('x', {\n   *   style: {\n   *     fill: 'red',\n   *   },\n   * })\n   *\n   * // 以 type 类型的 label 渲染每个图形上显示 x 字段对应的数值，同时格式化文本内容\n   * label('x', (xValue) => {\n   *   return {\n   *     content: xValue + '%',\n   *   };\n   * }, {\n   *   type: 'base' // 声明 label 类型\n   * })\n   * ```\n   *\n   * @param field\n   * @returns label\n   */\n  public label(field: LabelOption | false | string): Geometry;\n  public label(field: string, secondParam: GeometryLabelCfg | LabelCallback): Geometry;\n  public label(field: string, secondParam: LabelCallback, thirdParam: GeometryLabelCfg): Geometry;\n  public label(\n    field: string | LabelOption | false,\n    secondParam?: GeometryLabelCfg | LabelCallback,\n    thirdParam?: GeometryLabelCfg\n  ): Geometry {\n    if (isString(field)) {\n      const labelOption: LabelOption = {};\n      const fields = parseFields(field);\n      labelOption.fields = fields;\n      if (isFunction(secondParam)) {\n        labelOption.callback = secondParam;\n      } else if (isPlainObject(secondParam)) {\n        labelOption.cfg = secondParam;\n      }\n\n      if (thirdParam) {\n        labelOption.cfg = thirdParam;\n      }\n      this.labelOption = labelOption;\n    } else {\n      this.labelOption = field;\n    }\n\n    return this;\n  }\n\n  /**\n   * 设置状态对应的样式。\n   *\n   * @example\n   * ```ts\n   * chart.interval().state({\n   *   selected: {\n   *     animate: { duration: 100, easing: 'easeLinear' },\n   *     style: {\n   *       lineWidth: 2,\n   *       stroke: '#000',\n   *     },\n   *   },\n   * });\n   * ```\n   *\n   * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n   * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n   *\n   * ```ts\n   * chart.interval().shape('groupShape').state({\n   *   selected: {\n   *     style: {\n   *       0: { lineWidth: 2 },\n   *       1: { fillOpacity: 1 },\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg 状态样式\n   */\n  public state(cfg: StateOption) {\n    this.stateOption = cfg;\n    return this;\n  }\n\n  /**\n   * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\n   *\n   * @example\n   * ```ts\n   * chart.interval().customInfo({ yourData: 'hello, g2!' });\n   * ```\n   *\n   * 然后在自定义 shape 的时候，可以拿到这个信息。\n   *\n   * ```ts\n   * registerShape('interval', 'your-shape', {\n   *   draw(shapeInfo, container) {\n   *     const { customInfo } = shapeInfo;\n   *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg\n   */\n  public customInfo(cfg: any) {\n    this.customOption = cfg;\n    return this;\n  }\n\n  /**\n   * 初始化 Geomtry 实例：\n   * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n   */\n  public init(cfg: InitCfg = {}) {\n    this.setCfg(cfg);\n    this.initAttributes(); // 创建图形属性\n\n    // 数据加工：分组 -> 数字化 -> adjust\n    this.processData(this.data);\n\n    // 调整 scale\n    this.adjustScale();\n  }\n\n  /**\n   * Geometry 更新。\n   * @param [cfg] 更新的配置\n   */\n  public update(cfg: InitCfg = {}) {\n    const { data, isDataChanged, isCoordinateChanged } = cfg;\n    const { attributeOption, lastAttributeOption } = this;\n\n    if (!isEqual(attributeOption, lastAttributeOption)) {\n      // 映射发生改变，则重新创建图形属性\n      this.init(cfg);\n    } else if (data && (isDataChanged || !isEqual(data, this.data))) {\n      // 数据发生变化\n      this.setCfg(cfg);\n      this.initAttributes(); // 创建图形属性\n      this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n    } else {\n      // 有可能 coordinate 变化\n      this.setCfg(cfg);\n    }\n\n    // 调整 scale\n    this.adjustScale();\n    this.isCoordinateChanged = isCoordinateChanged;\n  }\n\n  /**\n   * 将原始数据映射至图形空间，同时创建图形对象。\n   */\n  public paint(isUpdate: boolean = false) {\n    if (this.animateOption) {\n      this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n    }\n\n    this.defaultSize = undefined;\n    this.elementsMap = {};\n    this.elements = [];\n    const offscreenGroup = this.getOffscreenGroup();\n    offscreenGroup.clear();\n\n    const beforeMappingData = this.beforeMappingData;\n    const dataArray = this.beforeMapping(beforeMappingData);\n\n    this.dataArray = new Array(dataArray.length);\n    for (let i = 0; i < dataArray.length; i++) {\n      const data = dataArray[i];\n      this.dataArray[i] = this.mapping(data);\n    }\n    this.updateElements(this.dataArray, isUpdate);\n    this.lastElementsMap = this.elementsMap;\n\n    if (this.canDoGroupAnimation(isUpdate)) {\n      // 如果用户没有配置 appear.animation，就默认走整体动画\n      const container = this.container;\n      const type = this.type;\n      const coordinate = this.coordinate;\n      const animateCfg = get(this.animateOption, 'appear');\n      const yScale = this.getYScale();\n      const yMinPoint = coordinate.convert({\n        x: 0,\n        y: yScale.scale(this.getYMinValue()),\n      });\n      doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n    }\n\n    // 添加 label\n    if (this.labelOption) {\n      const deferred = this.useDeferredLabel;\n      const callback = (() => this.renderLabels(flatten(this.dataArray) as unknown as MappingDatum[], isUpdate)).bind(this);\n      if (typeof deferred === 'number') {\n        // Use `requestIdleCallback` to render labels in idle time (like react fiber)\n        const timeout = (typeof deferred === 'number' && deferred !== Infinity) ? deferred : 0;\n        if (!window.requestIdleCallback) {\n          setTimeout(callback, timeout);\n        } else {\n          const options = timeout && timeout !== Infinity ? { timeout } : undefined;\n          window.requestIdleCallback(callback, options);\n        }\n      } else {\n        callback();\n      }\n    }\n\n    // 缓存，用于更新\n    this.lastAttributeOption = {\n      ...this.attributeOption,\n    };\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n   * @override\n   */\n  public clear() {\n    const { container, geometryLabel, offscreenGroup } = this;\n    if (container) {\n      container.clear();\n    }\n\n    if (geometryLabel) {\n      geometryLabel.clear();\n    }\n\n    if (offscreenGroup) {\n      offscreenGroup.clear();\n    }\n\n    // 属性恢复至出厂状态\n    this.scaleDefs = undefined;\n    this.attributes = {};\n    this.scales = {};\n    this.elementsMap = {};\n    this.lastElementsMap = {};\n    this.elements = [];\n    this.adjusts = {};\n    this.dataArray = null;\n    this.beforeMappingData = null;\n    this.lastAttributeOption = undefined;\n    this.defaultSize = undefined;\n    this.idFields = [];\n    this.groupScales = undefined;\n    this.hasSorted = false;\n    this.isCoordinateChanged = false;\n  }\n\n  /**\n   * 销毁 Geometry 实例。\n   */\n  public destroy() {\n    this.clear();\n    const container = this.container;\n    container.remove(true);\n\n    if (this.offscreenGroup) {\n      this.offscreenGroup.remove(true);\n      this.offscreenGroup = null;\n    }\n\n    if (this.geometryLabel) {\n      this.geometryLabel.destroy();\n      this.geometryLabel = null;\n    }\n    this.theme = undefined;\n    this.shapeFactory = undefined;\n\n    super.destroy();\n  }\n\n  /**\n   * 获取决定分组的图形属性对应的 scale 实例。\n   * @returns\n   */\n  public getGroupScales(): Scale[] {\n    return this.groupScales;\n  }\n\n  /**\n   * 根据名字获取图形属性实例。\n   */\n  public getAttribute(name: string): Attribute {\n    return this.attributes[name];\n  }\n\n  /** 获取 x 轴对应的 scale 实例。 */\n  public getXScale(): Scale {\n    return this.getAttribute('position').scales[0];\n  }\n\n  /** 获取 y 轴对应的 scale 实例。 */\n  public getYScale(): Scale {\n    return this.getAttribute('position').scales[1];\n  }\n\n  /**\n   * 获取决定分组的图形属性实例。\n   */\n  public getGroupAttributes(): Attribute[] {\n    const rst = [];\n    each(this.attributes, (attr: Attribute) => {\n      if (GROUP_ATTRS.includes(attr.type)) {\n        rst.push(attr);\n      }\n    });\n    return rst;\n  }\n\n  /** 获取图形属性默认的映射值。 */\n  public getDefaultValue(attrName: string) {\n    let value: any;\n    const attr = this.getAttribute(attrName);\n    if (attr && isEmpty(attr.scales)) {\n      // 获取映射至常量的值\n      value = attr.values[0];\n    }\n    return value;\n  }\n\n  /**\n   * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n   * @param attr Attribute 图形属性实例。\n   * @param obj 需要进行映射的原始数据。\n   * @returns\n   */\n  public getAttributeValues(attr: Attribute, obj: Datum) {\n    const params = [];\n    const scales = attr.scales;\n    for (let index = 0, length = scales.length; index < length; index++) {\n      const scale = scales[index];\n      const field = scale.field;\n      if (scale.isIdentity) {\n        params.push(scale.values);\n      } else {\n        params.push(obj[field]);\n      }\n    }\n\n    return attr.mapping(...params);\n  }\n\n  /**\n   * 获取对应的 adjust 实例\n   * @param adjustType\n   * @returns\n   */\n  public getAdjust(adjustType: string) {\n    return this.adjusts[adjustType];\n  }\n\n  /**\n   * 获得 coordinate 实例\n   * @returns\n   */\n  public getCoordinate() {\n    return this.coordinate;\n  }\n\n  public getData() {\n    return this.data;\n  }\n\n  /**\n   * 获取 shape 对应的 marker 样式。\n   * @param shapeName shape 具体名字\n   * @param cfg marker 信息\n   * @returns\n   */\n  public getShapeMarker(shapeName: string, cfg: ShapeMarkerCfg): ShapeMarkerAttrs {\n    const shapeFactory = this.getShapeFactory();\n    return shapeFactory.getMarker(shapeName, cfg);\n  }\n\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  public getElementsBy(condition: (element: Element) => boolean): Element[] {\n    return this.elements.filter((element) => condition(element));\n  }\n\n  /**\n   * 获取 Geometry 的所有 Elements。\n   *\n   * ```typescript\n   * getElements();\n   * ```\n   */\n  public getElements() {\n    return this.elements;\n  }\n\n  /**\n   * 获取数据对应的唯一 id。\n   * @param data Element 对应的绘制数据\n   * @returns\n   */\n  public getElementId(data: MappingDatum | MappingDatum[]) {\n    data = isArray(data) ? data[0] : data;\n    const originData = data[FIELD_ORIGIN];\n\n    // 如果用户声明了使用哪些字段作为 id 值\n    if (this.idFields.length) {\n      let elementId = originData[this.idFields[0]];\n      for (let index = 1; index < this.idFields.length; index++) {\n        elementId += '-' + originData[this.idFields[index]];\n      }\n\n      return elementId;\n    }\n\n    const type = this.type;\n    const xScale = this.getXScale();\n    const yScale = this.getYScale();\n    const xField = xScale.field || 'x';\n    const yField = yScale.field || 'y';\n    const yVal = originData[yField];\n    let xVal;\n    if (xScale.type === 'identity') {\n      xVal = xScale.values[0];\n    } else {\n      xVal = originData[xField];\n    }\n\n    let id: string;\n    if (type === 'interval' || type === 'schema') {\n      id = `${xVal}`;\n    } else if (type === 'line' || type === 'area' || type === 'path') {\n      id = type;\n    } else {\n      id = `${xVal}-${yVal}`;\n    }\n\n    const groupScales = this.groupScales;\n\n    for (let index = 0, length = groupScales.length; index < length; index++) {\n      const groupScale = groupScales[index];\n      const field = groupScale.field;\n      id = `${id}-${originData[field]}`;\n    }\n\n    // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n    const dodgeAdjust = this.getAdjust('dodge');\n    if (dodgeAdjust) {\n      const dodgeBy = dodgeAdjust.dodgeBy;\n      if (dodgeBy) {\n        id = `${id}-${originData[dodgeBy]}`;\n      }\n    }\n\n    if (this.getAdjust('jitter')) {\n      id = `${id}-${data.x}-${data.y}`;\n    }\n\n    return id;\n  }\n\n  /**\n   * 获取所有需要创建 scale 的字段名称。\n   */\n  public getScaleFields(): string[] {\n    const fields = [];\n    const tmpMap = new Map();\n    const { attributeOption, labelOption, tooltipOption } = this;\n    // 获取图形属性上的 fields\n    for (const attributeType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attributeType)) {\n        const eachOpt = attributeOption[attributeType];\n        if (eachOpt.fields) {\n          uniq(eachOpt.fields, fields, tmpMap);\n        } else if (eachOpt.values) {\n          // 考虑 size(10), shape('circle') 等场景\n          uniq(eachOpt.values, fields, tmpMap);\n        }\n      }\n    }\n    // 获取 label 上的字段\n    if (labelOption && labelOption.fields) {\n      uniq(labelOption.fields, fields, tmpMap);\n    }\n\n    // 获取 tooltip 上的字段\n    if (isObject(tooltipOption) && tooltipOption.fields) {\n      uniq(tooltipOption.fields, fields, tmpMap);\n    }\n\n    return fields;\n  }\n\n  /**\n   * 显示或者隐藏 geometry。\n   * @param visible\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible);\n    const elements = this.elements;\n    for (let index = 0, length = elements.length; index < length; index++) {\n      const element = elements[index];\n      element.changeVisible(visible);\n    }\n    if (visible) {\n      if (this.container) {\n        this.container.show();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.show();\n      }\n    } else {\n      if (this.container) {\n        this.container.hide();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.hide();\n      }\n    }\n  }\n\n  /**\n   * 获得所有的字段\n   */\n  public getFields() {\n    const uniqMap = new Map<string, boolean>();\n    const fields = [];\n\n    Object.values(this.attributeOption).forEach((cfg) => {\n      const fs = cfg?.fields || [];\n      fs.forEach((f) => {\n        if (!uniqMap.has(f)) {\n          fields.push(f);\n        }\n        uniqMap.set(f, true);\n      });\n    }, []);\n\n    return fields;\n  }\n\n  /**\n   * 获取当前配置中的所有分组 & 分类的字段。\n   * @return fields string[]\n   */\n  public getGroupFields(): string[] {\n    const groupFields = [];\n    const tmpMap = new Map(); // 用于去重过滤\n    for (let index = 0, length = GROUP_ATTRS.length; index < length; index++) {\n      const attributeName = GROUP_ATTRS[index];\n      const cfg = this.attributeOption[attributeName];\n      if (cfg && cfg.fields) {\n        uniq(cfg.fields, groupFields, tmpMap);\n      }\n    }\n\n    return groupFields;\n  }\n\n  /**\n   * 获得图形的 x y 字段。\n   */\n  public getXYFields() {\n    const [x, y] = this.attributeOption.position.fields;\n    return [x, y];\n  }\n\n  /**\n   * x 字段\n   * @returns\n   */\n  public getXField(): string {\n    return get(this.getXYFields(), [0]);\n  }\n\n  /**\n   * y 字段\n   * @returns\n   */\n  public getYField(): string {\n    return get(this.getXYFields(), [1]);\n  }\n\n  /**\n   * 获取该 Geometry 下所有生成的 shapes。\n   * @returns shapes\n   */\n  public getShapes(): (IShape | IGroup)[] {\n    return this.elements.map((element: Element) => element.shape);\n  }\n\n  /**\n   * 获取虚拟 Group。\n   * @returns\n   */\n  public getOffscreenGroup() {\n    if (!this.offscreenGroup) {\n      const GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n    return this.offscreenGroup;\n  }\n\n  // 对数据进行排序\n  public sort(mappingArray: Data[]) {\n    if (!this.hasSorted) {\n      // 未发生过排序\n      const xScale = this.getXScale();\n      const xField = xScale.field;\n      for (let index = 0; index < mappingArray.length; index++) {\n        const itemArr = mappingArray[index];\n        itemArr.sort((obj1: Datum, obj2: Datum) => {\n          return xScale.translate(obj1[FIELD_ORIGIN][xField]) - xScale.translate(obj2[FIELD_ORIGIN][xField]);\n        });\n      }\n    }\n\n    this.hasSorted = true;\n  }\n\n  /**\n   * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n   */\n  protected adjustScale() {\n    const yScale = this.getYScale();\n    // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n    if (yScale && this.getAdjust('stack')) {\n      this.updateStackRange(yScale, this.beforeMappingData);\n    }\n  }\n\n  /**\n   * 获取当前 Geometry 对应的 Shape 工厂实例。\n   */\n  protected getShapeFactory() {\n    const shapeType = this.shapeType;\n    if (!getShapeFactory(shapeType)) {\n      return;\n    }\n    if (!this.shapeFactory) {\n      this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n    }\n    // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n    this.shapeFactory.coordinate = this.coordinate;\n    // theme 原因同上\n    this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n\n    return this.shapeFactory;\n  }\n\n  /**\n   * 获取每个 Shape 对应的关键点数据。\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum): S {\n    const xScale = this.getXScale();\n    const yScale = this.getYScale();\n    const x = this.normalizeValues(obj[xScale.field], xScale);\n    let y; // 存在没有 y 的情况\n\n    if (yScale) {\n      y = this.normalizeValues(obj[yScale.field], yScale);\n    } else {\n      y = obj.y ? obj.y : 0.1;\n    }\n\n    return {\n      x,\n      y,\n      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined,\n    } as S;\n  }\n\n  /**\n   * 创建 Element 实例。\n   * @param mappingDatum Element 对应的绘制数据\n   * @param [isUpdate] 是否处于更新阶段\n   * @returns element 返回创建的 Element 实例\n   */\n  protected createElement(mappingDatum: MappingDatum, index: number, isUpdate: boolean = false): Element {\n    const { container } = this;\n\n    const shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n    const shapeFactory = this.getShapeFactory();\n\n    const element = new Element({\n      shapeFactory,\n      container,\n      offscreenGroup: this.getOffscreenGroup(),\n      elementIndex: index,\n    });\n    element.animate = this.animateOption;\n    element.geometry = this;\n    element.draw(shapeCfg, isUpdate); // 绘制\n\n    return element;\n  }\n\n  /**\n   * 获取每条数据对应的图形绘制数据。\n   * @param mappingDatum 映射后的数据\n   * @returns draw cfg\n   */\n  protected getDrawCfg(mappingDatum: MappingDatum): ShapeInfo {\n    const originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n    const cfg: ShapeInfo = {\n      mappingData: mappingDatum, // 映射后的数据\n      data: originData, // 原始数据\n      x: mappingDatum.x,\n      y: mappingDatum.y,\n      color: mappingDatum.color,\n      size: mappingDatum.size,\n      isInCircle: this.coordinate.isPolar,\n      customInfo: this.customOption,\n    };\n\n    let shapeName = mappingDatum.shape;\n    if (!shapeName && this.getShapeFactory()) {\n      shapeName = this.getShapeFactory().defaultShapeType;\n    }\n    cfg.shape = shapeName;\n    // 获取默认样式\n    const theme = this.theme.geometries[this.shapeType];\n    cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n    if (!cfg.defaultStyle && this.getShapeFactory()) {\n      cfg.defaultStyle = this.getShapeFactory().getDefaultStyle(theme);\n    }\n\n    const styleOption = this.styleOption;\n    if (styleOption) {\n      cfg.style = this.getStyleCfg(styleOption, originData);\n    }\n    if (this.generatePoints) {\n      cfg.points = mappingDatum.points;\n      cfg.nextPoints = mappingDatum.nextPoints;\n    }\n\n    return cfg;\n  }\n\n  protected updateElements(mappingDataArray: MappingDatum[][], isUpdate: boolean = false): void {\n    const keyDatum = new Map<string, MappingDatum>();\n    const keys: string[] = [];\n\n    // 用来保持 diff 元素之后 added, updated 的相对顺序\n    const keyIndex = new Map<string, number>();\n    let index = 0;\n\n    // 获得更新数据所有的 keys\n    // 将更新的数据用 key 索引\n    for (let i = 0; i < mappingDataArray.length; i++) {\n      const mappingData = mappingDataArray[i];\n      for (let j = 0; j < mappingData.length; j++) {\n        const mappingDatum = mappingData[j];\n        const key = this.getElementId(mappingDatum);\n        const finalKey = keyDatum.has(key) ? `${key}-${i}-${j}` : key;\n        keys.push(finalKey);\n        keyDatum.set(finalKey, mappingDatum);\n        keyIndex.set(finalKey, index);\n        index++;\n      }\n    }\n\n    this.elements = new Array(index);\n\n    const { added, updated, removed } = diff(this.lastElementsMap, keys);\n\n    // 新建 element\n    for (const key of added) {\n      const mappingDatum = keyDatum.get(key);\n      const i = keyIndex.get(key);\n      const element = this.createElement(mappingDatum, i, isUpdate);\n      this.elements[i] = element;\n      this.elementsMap[key] = element;\n      if (element.shape) {\n        element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n      }\n    }\n\n    // 更新 element\n    for (const key of updated) {\n      const element = this.lastElementsMap[key];\n      const mappingDatum = keyDatum.get(key);\n      const currentShapeCfg = this.getDrawCfg(mappingDatum);\n      const preShapeCfg = element.getModel();\n      const i = keyIndex.get(key);\n      if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n        element.animate = this.animateOption;\n        // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n        element.update(currentShapeCfg); // 更新对应的 element\n      }\n      this.elements[i] = element;\n      this.elementsMap[key] = element;\n      if (element.shape) {\n        element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n      }\n    }\n\n    // 全部 setZIndex 之后，再执行 sort\n    if (this.container) {\n      this.container.sort();\n    }\n\n    // 销毁被删除的 elements\n    for (const key of removed) {\n      const element = this.lastElementsMap[key];\n      // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n      element.animate = this.animateOption;\n      element.destroy();\n    }\n  }\n\n  /**\n   * 获取渲染的 label 类型。\n   */\n  protected getLabelType(): string {\n    const { labelOption, coordinate, type } = this;\n    const { type: coordinateType, isTransposed } = coordinate;\n    let labelType = get(labelOption, ['cfg', 'type']);\n    if (!labelType) {\n      // 用户未定义，则进行默认的逻辑\n      if (coordinateType === 'polar') {\n        // 极坐标下使用通用的极坐标文本，转置则使用饼图\n        labelType = isTransposed ? 'pie' : 'polar';\n      } else if (coordinateType === 'theta') {\n        // theta 坐标系下使用饼图文本\n        labelType = 'pie';\n      } else if (type === 'interval' || type === 'polygon') {\n        labelType = 'interval';\n      } else {\n        labelType = 'base';\n      }\n    }\n\n    return labelType;\n  }\n\n  /**\n   * 获取 Y 轴上的最小值。\n   */\n  protected getYMinValue(): number {\n    const yScale = this.getYScale();\n    const { min, max } = yScale;\n    let value: number;\n\n    if (min >= 0) {\n      value = min;\n    } else if (max <= 0) {\n      // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n      value = max;\n    } else {\n      value = 0;\n    }\n    return value;\n  }\n\n  // 创建图形属性相关的配置项\n  protected createAttrOption(attrName: string, field: AttributeOption | string | number, cfg?) {\n    if (isNil(field) || isObject(field)) {\n      if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n        // shape({ values: [ 'funnel' ] })\n        set(this.attributeOption, attrName, {\n          fields: field.values,\n        });\n      } else {\n        set(this.attributeOption, attrName, field);\n      }\n    } else {\n      const attrCfg: AttributeOption = {};\n      if (isNumber(field)) {\n        // size(3)\n        attrCfg.values = [field];\n      } else {\n        attrCfg.fields = parseFields(field);\n      }\n\n      if (cfg) {\n        if (isFunction(cfg)) {\n          attrCfg.callback = cfg;\n        } else {\n          attrCfg.values = cfg;\n        }\n      }\n\n      set(this.attributeOption, attrName, attrCfg);\n    }\n  }\n\n  protected initAttributes() {\n    const { attributes, attributeOption, theme, shapeType } = this;\n    this.groupScales = [];\n    const tmpMap = {};\n\n    // 遍历每一个 attrOption，各自创建 Attribute 实例\n    for (const attrType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attrType)) {\n        const option: AttributeOption = attributeOption[attrType];\n        if (!option) {\n          return;\n        }\n        const attrCfg: AttributeInstanceCfg = {\n          ...option,\n        };\n        const { callback, values, fields = [] } = attrCfg;\n\n        // 获取每一个字段对应的 scale\n        const scales = fields.map((field) => {\n          const scale = this.scales[field];\n          if (!tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n            const inferedScaleType = inferScaleType(scale, get(this.scaleDefs, field), attrType, this.type);\n            if (inferedScaleType === 'cat') {\n              this.groupScales.push(scale);\n              tmpMap[field] = true;\n            }\n          }\n          return scale;\n        });\n\n        attrCfg.scales = scales;\n\n        if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n          // 用户在图形通道上声明了常量字段 color('red'), size(5)\n          attrCfg.values = scales[0].values;\n        } else if (!callback && !values) {\n          // 用户没有指定任何规则，则使用默认的映射规则\n          if (attrType === 'size') {\n            attrCfg.values = theme.sizes;\n          } else if (attrType === 'shape') {\n            attrCfg.values = theme.shapes[shapeType] || [];\n          } else if (attrType === 'color') {\n            if (scales.length) {\n              // 根据数值个数使用对应的色板\n              attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n            } else {\n              attrCfg.values = theme.colors10;\n            }\n          }\n        }\n        const AttributeCtor = getAttributeClass(attrType);\n        attributes[attrType] = new AttributeCtor(attrCfg);\n      }\n    }\n  }\n\n  // 处理数据：分组 -> 数字化 -> adjust 调整\n  private processData(data: Data) {\n    this.hasSorted = false;\n    const { scales } = this.getAttribute('position');\n    const categoryScales = scales.filter((scale: Scale) => scale.isCategory);\n\n    const groupedArray = this.groupData(data); // 数据分组\n    const beforeAdjust = [];\n    for (let i = 0, len = groupedArray.length; i < len; i++) {\n      const subData = groupedArray[i];\n      const arr = [];\n      for (let j = 0, subLen = subData.length; j < subLen; j++) {\n        const originData = subData[j];\n        const item = {};\n        // tslint:disable-next-line: forin\n        for (const k in originData) {\n          item[k] = originData[k];\n        }\n        item[FIELD_ORIGIN] = originData;\n\n        // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n        for (const scale of categoryScales) {\n          const field = scale.field;\n          item[field] = scale.translate(item[field]);\n        }\n        arr.push(item);\n      }\n      beforeAdjust.push(arr);\n    }\n\n    const dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n    this.beforeMappingData = dataArray;\n\n    return dataArray;\n  }\n\n  // 调整数据\n  private adjustData(dataArray: Data[]): Data[] {\n    const adjustOption = this.adjustOption;\n    const { intervalPadding, dodgePadding, theme } = this;\n    // 兼容theme配置\n    const maxColumnWidth = this.maxColumnWidth || theme.maxColumnWidth;\n    const minColumnWidth = this.minColumnWidth || theme.minColumnWidth;\n    const columnWidthRatio = this.columnWidthRatio || theme.columnWidthRatio;\n    let result = dataArray;\n\n    if (adjustOption) {\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const xField = xScale.field;\n      const yField = yScale ? yScale.field : null;\n      const xDimensionLength = getXDimensionLength(this.coordinate);\n      const groupNum = xScale.values.length;\n      // 传入size计算相关参数，默认宽度、最大最小宽度约束\n      const sizeAttr = this.getAttribute('size');\n      let defaultSize;\n      if (sizeAttr) {\n        defaultSize = sizeAttr.values[0];\n      }\n      for (let i = 0, len = adjustOption.length; i < len; i++) {\n        const adjust = adjustOption[i];\n        const adjustCfg: AdjustInstanceCfg = {\n          xField,\n          yField,\n          intervalPadding,\n          dodgePadding,\n          xDimensionLength,\n          groupNum,\n          defaultSize,\n          maxColumnWidth,\n          minColumnWidth,\n          columnWidthRatio,\n          ...adjust,\n        };\n        const type = adjust.type;\n        if (type === 'dodge') {\n          const adjustNames = [];\n          if (xScale.isCategory || xScale.type === 'identity') {\n            adjustNames.push('x');\n          } else if (!yScale) {\n            adjustNames.push('y');\n          } else {\n            throw new Error('dodge is not support linear attribute, please use category attribute!');\n          }\n          adjustCfg.adjustNames = adjustNames;\n          // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n          // 兼容theme配置\n          adjustCfg.dodgeRatio = columnWidthRatio;\n        } else if (type === 'stack') {\n          const coordinate = this.coordinate;\n          if (!yScale) {\n            // 一维的情况下获取高度和默认size\n            adjustCfg.height = coordinate.getHeight();\n            const size = this.getDefaultValue('size') || 3;\n            adjustCfg.size = size;\n          }\n          // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n          if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n            adjustCfg.reverseOrder = true;\n          }\n        }\n        const adjustCtor = getAdjustClass(type);\n        adjustCfg.dimValuesMap = {};\n        //生成dimValuesMap\n        if (xScale && xScale.values) {\n          adjustCfg.dimValuesMap[xScale.field] = xScale.values.map((v) => xScale.translate(v));\n        }\n        const adjustInstance = new adjustCtor(adjustCfg);\n\n        result = adjustInstance.process(result);\n\n        this.adjusts[type] = adjustInstance;\n      }\n    }\n\n    return result;\n  }\n\n  // 对数据进行分组\n  private groupData(data: Data): Data[] {\n    const groupScales = this.getGroupScales();\n    const scaleDefs = this.scaleDefs;\n    const appendConditions = {};\n    const groupFields = [];\n    for (let index = 0; index < groupScales.length; index++) {\n      const scale = groupScales[index];\n      const field = scale.field;\n      groupFields.push(field);\n      if (get(scaleDefs, [field, 'values'])) {\n        // 用户通过 view.scale() 接口指定了 values 属性\n        appendConditions[field] = scaleDefs[field].values;\n      }\n    }\n\n    return group(data, groupFields, appendConditions);\n  }\n\n  // 更新发生层叠后的数据对应的度量范围\n  private updateStackRange(scale: Scale, dataArray: Data[]) {\n    const mergeArray = flatten(dataArray);\n    const field = scale.field;\n    let min = scale.min;\n    let max = scale.max;\n    for (let index = 0; index < mergeArray.length; index++) {\n      const obj = mergeArray[index];\n      const tmpMin = Math.min.apply(null, obj[field]);\n      const tmpMax = Math.max.apply(null, obj[field]);\n      if (tmpMin < min) {\n        min = tmpMin;\n      }\n      if (tmpMax > max) {\n        max = tmpMax;\n      }\n    }\n    const scaleDefs = this.scaleDefs;\n    const cfg: LooseObject = {};\n    if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n      // 用户如果在列定义中定义了 min，则以用户定义的为准\n      cfg.min = min;\n    }\n    if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n      // 用户如果在列定义中定义了 max\n      cfg.max = max;\n    }\n\n    scale.change(cfg);\n  }\n\n  // 将数据映射至图形空间前的操作：排序以及关键点的生成\n  private beforeMapping(beforeMappingData: Data[]) {\n    // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n    // const source = clone(beforeMappingData);\n    const source = beforeMappingData;\n    if (this.sortable) {\n      this.sort(source);\n    }\n    if (this.generatePoints) {\n      // 需要生成关键点\n      for (let index = 0, length = source.length; index < length; index++) {\n        const currentData = source[index];\n        this.generateShapePoints(currentData);\n        const nextData = source[index + 1];\n        if (nextData) {\n          this.generateShapePoints(nextData);\n          currentData[0].nextPoints = nextData[0].points;\n        }\n      }\n    }\n\n    return source;\n  }\n\n  // 生成 shape 的关键点\n  private generateShapePoints(data: Data) {\n    const shapeFactory = this.getShapeFactory();\n    const shapeAttr = this.getAttribute('shape');\n    for (let index = 0; index < data.length; index++) {\n      const obj = data[index];\n      const cfg = this.createShapePointsCfg(obj);\n      const shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n      const points = shapeFactory.getShapePoints(shape, cfg);\n      obj.points = points;\n    }\n  }\n\n  // 将数据归一化\n  private normalizeValues(values, scale) {\n    let rst = [];\n    if (isArray(values)) {\n      for (let index = 0; index < values.length; index++) {\n        const value = values[index];\n        rst.push(scale.scale(value));\n      }\n    } else {\n      rst = scale.scale(values);\n    }\n    return rst;\n  }\n\n  // 将数据映射至图形空间\n  private mapping(data: Data): MappingDatum[] {\n    const attributes = this.attributes;\n    const mappingData = [];\n    for (let index = 0; index < data.length; index++) {\n      const record = data[index];\n      const newRecord: MappingDatum = {\n        _origin: record[FIELD_ORIGIN],\n        points: record.points,\n        nextPoints: record.nextPoints,\n      };\n      for (const k in attributes) {\n        if (attributes.hasOwnProperty(k)) {\n          const attr = attributes[k];\n          const names = attr.names;\n          const values = this.getAttributeValues(attr, record);\n          if (names.length > 1) {\n            // position 之类的生成多个字段的属性\n            for (let j = 0; j < values.length; j += 1) {\n              const val = values[j];\n              const name = names[j];\n              newRecord[name] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n            }\n          } else {\n            // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n            // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n            newRecord[names[0]] = values.length === 1 ? values[0] : values;\n          }\n        }\n      }\n\n      this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n      mappingData.push(newRecord);\n    }\n\n    return mappingData;\n  }\n\n  // 将归一化的坐标值转换成画布坐标\n  private convertPoint(mappingRecord: MappingDatum) {\n    const { x, y } = mappingRecord;\n\n    let rstX;\n    let rstY;\n    let obj;\n    const coordinate = this.coordinate;\n    if (isArray(x) && isArray(y)) {\n      rstX = [];\n      rstY = [];\n      for (let i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n        obj = coordinate.convert({\n          x: x[i],\n          y: y[j],\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      rstY = [];\n      for (let index = 0; index < y.length; index++) {\n        const yVal = y[index];\n        obj = coordinate.convert({\n          x: x as number,\n          y: yVal,\n        });\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [rstX];\n          }\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n        rstY.push(obj.y);\n      }\n    } else if (isArray(x)) {\n      rstX = [];\n      for (let index = 0; index < x.length; index++) {\n        const xVal = x[index];\n        obj = coordinate.convert({\n          x: xVal,\n          y,\n        });\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [rstY];\n          }\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n        rstX.push(obj.x);\n      }\n    } else {\n      const point = coordinate.convert({\n        x,\n        y,\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n    mappingRecord.x = rstX;\n    mappingRecord.y = rstY;\n  }\n\n  // 获取 style 配置\n  private getStyleCfg(styleOption: StyleOption, originData: Datum) {\n    const { fields = [], callback, cfg } = styleOption;\n    if (cfg) {\n      // 用户直接配置样式属性\n      return cfg;\n    }\n\n    const params = fields.map((field) => {\n      return originData[field];\n    });\n\n    return callback(...params);\n  }\n\n  private setCfg(cfg: InitCfg) {\n    const { coordinate, data, theme, scaleDefs } = cfg;\n    if (coordinate) {\n      this.coordinate = coordinate;\n    }\n    if (data) {\n      this.data = data;\n    }\n    if (scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.idFields = [];\n      each(scaleDefs, (scaleDef, field) => {\n        if (scaleDef && scaleDef.key) {\n          this.idFields.push(field);\n        }\n      });\n    }\n    if (theme) {\n      this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n    }\n  }\n\n  private async renderLabels(mappingArray: MappingDatum[], isUpdate: boolean = false) {\n    let geometryLabel = this.geometryLabel;\n\n    this.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_RENDER_LABEL);\n\n    if (!geometryLabel) {\n      // 初次创建\n      const labelType = this.getLabelType();\n      const GeometryLabelsCtor = getGeometryLabel(labelType);\n      geometryLabel = new GeometryLabelsCtor(this);\n      this.geometryLabel = geometryLabel;\n    }\n    await geometryLabel.render(mappingArray, isUpdate);\n\n    // 将 label 同 element 进行关联\n    const labelsMap = geometryLabel.labelsRenderer.shapesMap;\n    // Store labels for every element.\n    const elementLabels = new Map<Element, Set<IGroup>>();\n    each(labelsMap, (labelGroup: IGroup, labelGroupId: string) => {\n      const labelChildren = labelGroup.getChildren() || [];\n      for (let j = 0; j < labelChildren.length; j++) {\n        const labelShape = labelChildren[j];\n        const element = this.elementsMap[labelShape.get('elementId') || labelGroupId.split(' ')[0]];\n        if (element) {\n          labelShape.cfg.name = ['element', 'label'];\n          labelShape.cfg.element = element;\n          const labels = elementLabels.get(element) || new Set();\n          labels.add(labelGroup);\n          elementLabels.set(element, labels);\n        }\n      }\n    });\n    for (const [element, labels] of elementLabels.entries()) {\n      element.labelShape = [...labels];\n    }\n\n    this.emit(GEOMETRY_LIFE_CIRCLE.AFTER_RENDER_LABEL);\n  }\n  /**\n   * 是否需要进行群组入场动画\n   * 规则：\n   * 1. 如果发生更新，则不进行\n   * 2. 如果用户关闭 geometry 动画，则不进行\n   * 3. 如果用户关闭了 appear 动画，则不进行\n   * 4. 如果用户配置了 appear.animation，则不进行\n   */\n  private canDoGroupAnimation(isUpdate: boolean) {\n    return (\n      !isUpdate &&\n      this.animateOption &&\n      (get(this.animateOption, 'appear') === undefined ||\n        (get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}