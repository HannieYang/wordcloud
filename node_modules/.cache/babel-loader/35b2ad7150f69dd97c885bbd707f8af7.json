{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { point, line } from '../../../adaptor/geometries';\nimport { pick, deepAssign } from '../../../utils';\nimport { adaptor as columnAdaptor } from '../../column/adaptor';\nimport { isLine, isColumn } from './option';\n/**\n * 绘制单个图形\n * @param params\n */\n\nexport function drawSingleGeometry(params) {\n  var options = params.options,\n      chart = params.chart;\n  var geometryOption = options.geometryOption;\n  var isStack = geometryOption.isStack,\n      color = geometryOption.color,\n      seriesField = geometryOption.seriesField,\n      groupField = geometryOption.groupField,\n      isGroup = geometryOption.isGroup;\n  var FIELD_KEY = ['xField', 'yField'];\n\n  if (isLine(geometryOption)) {\n    // 绘制线\n    line(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        line: {\n          color: geometryOption.color,\n          style: geometryOption.lineStyle\n        }\n      })\n    })); // 绘制点\n\n    point(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        point: geometryOption.point && __assign({\n          color: color,\n          shape: 'circle'\n        }, geometryOption.point)\n      })\n    })); // adjust\n\n    var adjust_1 = [];\n\n    if (isGroup) {\n      adjust_1.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        customOffset: 0\n      });\n    }\n\n    if (isStack) {\n      adjust_1.push({\n        type: 'stack'\n      });\n    }\n\n    if (adjust_1.length) {\n      each(chart.geometries, function (g) {\n        g.adjust(adjust_1);\n      });\n    }\n  }\n\n  if (isColumn(geometryOption)) {\n    columnAdaptor(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        widthRatio: geometryOption.columnWidthRatio,\n        interval: __assign(__assign({}, pick(geometryOption, ['color'])), {\n          style: geometryOption.columnStyle\n        })\n      })\n    }));\n  }\n\n  return params;\n}","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,QAAqB,YAArB;AAGA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,6BAA5B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,gBAAjC;AACA,SAASC,OAAO,IAAIC,aAApB,QAAyC,sBAAzC;AAEA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AAEA;;;;;AAIA,OAAM,SAAUC,kBAAV,CACJC,MADI,EACa;EAET,WAAO,GAAYA,MAAM,QAAzB;EAAA,IAASC,KAAK,GAAKD,MAAM,MAAzB;EACA,kBAAc,GAAKE,OAAO,eAA1B;EACA,WAAO,GAA8CC,cAAc,QAAnE;EAAA,IAASC,KAAK,GAAuCD,cAAc,MAAnE;EAAA,IAAgBE,WAAW,GAA0BF,cAAc,YAAnE;EAAA,IAA6BG,UAAU,GAAcH,cAAc,WAAnE;EAAA,IAAyCI,OAAO,GAAKJ,cAAc,QAAnE;EAER,IAAMK,SAAS,GAAG,CAAC,QAAD,EAAW,QAAX,CAAlB;;EACA,IAAIX,MAAM,CAACM,cAAD,CAAV,EAA4B;IAC1B;IACAX,IAAI,CACFE,UAAU,CAAC,EAAD,EAAKM,MAAL,EAAa;MACrBE,OAAO,iCACFT,IAAI,CAACS,OAAD,EAAUM,SAAV,CADF,GAEFL,cAFE,GAEY;QACjBX,IAAI,EAAE;UACJY,KAAK,EAAED,cAAc,CAACC,KADlB;UAEJK,KAAK,EAAEN,cAAc,CAACO;QAFlB;MADW,CAFZ;IADc,CAAb,CADR,CAAJ,CAF0B,CAc1B;;IACAnB,KAAK,CACHG,UAAU,CAAC,EAAD,EAAKM,MAAL,EAAa;MACrBE,OAAO,iCACFT,IAAI,CAACS,OAAD,EAAUM,SAAV,CADF,GAEFL,cAFE,GAEY;QACjBZ,KAAK,EAAEY,cAAc,CAACZ,KAAf,IAAoBoB;UACzBP,KAAK,OADoB;UAEzBQ,KAAK,EAAE;QAFkB,GAGtBT,cAAc,CAACZ,KAHO;MADV,CAFZ;IADc,CAAb,CADP,CAAL,CAf0B,CA4B1B;;IACA,IAAMsB,QAAM,GAAG,EAAf;;IACA,IAAIN,OAAJ,EAAa;MACXM,QAAM,CAACC,IAAP,CAAY;QACVC,IAAI,EAAE,OADI;QAEVC,OAAO,EAAEV,UAAU,IAAID,WAFb;QAGVY,YAAY,EAAE;MAHJ,CAAZ;IAKD;;IACD,IAAIC,OAAJ,EAAa;MACXL,QAAM,CAACC,IAAP,CAAY;QACVC,IAAI,EAAE;MADI,CAAZ;IAGD;;IACD,IAAIF,QAAM,CAACM,MAAX,EAAmB;MACjB7B,IAAI,CAACW,KAAK,CAACmB,UAAP,EAAmB,UAACC,CAAD,EAAY;QACjCA,CAAC,CAACC,MAAF,CAAST,QAAT;MACD,CAFG,CAAJ;IAGD;EACF;;EAED,IAAIf,QAAQ,CAACK,cAAD,CAAZ,EAA8B;IAC5BP,aAAa,CACXF,UAAU,CAAC,EAAD,EAAKM,MAAL,EAAa;MACrBE,OAAO,iCACFT,IAAI,CAACS,OAAD,EAAUM,SAAV,CADF,GAEFL,cAFE,GAEY;QACjBoB,UAAU,EAAEpB,cAAc,CAACqB,gBADV;QAEjBC,QAAQ,wBACHhC,IAAI,CAACU,cAAD,EAAiB,CAAC,OAAD,CAAjB,CADD,GAC4B;UAClCM,KAAK,EAAEN,cAAc,CAACuB;QADY,CAD5B;MAFS,CAFZ;IADc,CAAb,CADC,CAAb;EAaD;;EAED,OAAO1B,MAAP;AACD","names":["each","point","line","pick","deepAssign","adaptor","columnAdaptor","isLine","isColumn","drawSingleGeometry","params","chart","options","geometryOption","color","seriesField","groupField","isGroup","FIELD_KEY","style","lineStyle","__assign","shape","adjust_1","push","type","dodgeBy","customOffset","isStack","length","geometries","g","adjust","widthRatio","columnWidthRatio","interval","columnStyle"],"sourceRoot":"","sources":["../../../../src/plots/dual-axes/util/geometry.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { Geometry } from '@antv/g2';\nimport { Params } from '../../../core/adaptor';\nimport { point, line } from '../../../adaptor/geometries';\nimport { pick, deepAssign } from '../../../utils';\nimport { adaptor as columnAdaptor } from '../../column/adaptor';\nimport { GeometryOption } from '../types';\nimport { isLine, isColumn } from './option';\n\n/**\n * 绘制单个图形\n * @param params\n */\nexport function drawSingleGeometry<O extends { xField: string; yField: string; geometryOption: GeometryOption }>(\n  params: Params<O>\n): Params<O> {\n  const { options, chart } = params;\n  const { geometryOption } = options;\n  const { isStack, color, seriesField, groupField, isGroup } = geometryOption;\n\n  const FIELD_KEY = ['xField', 'yField'];\n  if (isLine(geometryOption)) {\n    // 绘制线\n    line(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          line: {\n            color: geometryOption.color,\n            style: geometryOption.lineStyle,\n          },\n        },\n      })\n    );\n    // 绘制点\n    point(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          point: geometryOption.point && {\n            color,\n            shape: 'circle',\n            ...geometryOption.point,\n          },\n        },\n      })\n    );\n    // adjust\n    const adjust = [];\n    if (isGroup) {\n      adjust.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        customOffset: 0,\n      });\n    }\n    if (isStack) {\n      adjust.push({\n        type: 'stack',\n      });\n    }\n    if (adjust.length) {\n      each(chart.geometries, (g: Geometry) => {\n        g.adjust(adjust);\n      });\n    }\n  }\n\n  if (isColumn(geometryOption)) {\n    columnAdaptor(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          widthRatio: geometryOption.columnWidthRatio,\n          interval: {\n            ...pick(geometryOption, ['color']),\n            style: geometryOption.columnStyle,\n          },\n        },\n      })\n    );\n  }\n\n  return params;\n}\n"]},"metadata":{},"sourceType":"module"}